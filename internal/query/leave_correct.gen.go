// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"hrapi/internal/types"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"
)

func newLeaveCorrect(db *gorm.DB, opts ...gen.DOOption) leaveCorrect {
	_leaveCorrect := leaveCorrect{}

	_leaveCorrect.leaveCorrectDo.UseDB(db, opts...)
	_leaveCorrect.leaveCorrectDo.UseModel(&types.LeaveCorrect{})

	tableName := _leaveCorrect.leaveCorrectDo.TableName()
	_leaveCorrect.ALL = field.NewAsterisk(tableName)
	_leaveCorrect.ID = field.NewUint(tableName, "id")
	_leaveCorrect.CreatedAt = field.NewTime(tableName, "created_at")
	_leaveCorrect.UpdatedAt = field.NewTime(tableName, "updated_at")
	_leaveCorrect.DeletedAt = field.NewField(tableName, "deleted_at")
	_leaveCorrect.EmployeeID = field.NewUint(tableName, "employee_id")
	_leaveCorrect.LeaveID = field.NewUint(tableName, "leave_id")
	_leaveCorrect.Available = field.NewFloat64(tableName, "available")
	_leaveCorrect.Used = field.NewFloat64(tableName, "used")
	_leaveCorrect.Signing = field.NewFloat64(tableName, "signing")
	_leaveCorrect.Employee = leaveCorrectBelongsToEmployee{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Employee", "types.Employee"),
		Department: struct {
			field.RelationField
			Manager struct {
				field.RelationField
			}
		}{
			RelationField: field.NewRelation("Employee.Department", "types.Department"),
			Manager: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("Employee.Department.Manager", "types.Employee"),
			},
		},
		Rank: struct {
			field.RelationField
			Grade struct {
				field.RelationField
				Rank struct {
					field.RelationField
				}
			}
		}{
			RelationField: field.NewRelation("Employee.Rank", "types.PositionRank"),
			Grade: struct {
				field.RelationField
				Rank struct {
					field.RelationField
				}
			}{
				RelationField: field.NewRelation("Employee.Rank.Grade", "types.PositionGrade"),
				Rank: struct {
					field.RelationField
				}{
					RelationField: field.NewRelation("Employee.Rank.Grade.Rank", "types.PositionRank"),
				},
			},
		},
		Grade: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("Employee.Grade", "types.PositionGrade"),
		},
		LoginInformation: struct {
			field.RelationField
			Employee struct {
				field.RelationField
			}
		}{
			RelationField: field.NewRelation("Employee.LoginInformation", "types.LoginInformation"),
			Employee: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("Employee.LoginInformation.Employee", "types.Employee"),
			},
		},
		Roles: struct {
			field.RelationField
			Employees struct {
				field.RelationField
			}
			Permissions struct {
				field.RelationField
				Roles struct {
					field.RelationField
				}
			}
			Menus struct {
				field.RelationField
				Roles struct {
					field.RelationField
				}
			}
		}{
			RelationField: field.NewRelation("Employee.Roles", "types.Role"),
			Employees: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("Employee.Roles.Employees", "types.Employee"),
			},
			Permissions: struct {
				field.RelationField
				Roles struct {
					field.RelationField
				}
			}{
				RelationField: field.NewRelation("Employee.Roles.Permissions", "types.Permission"),
				Roles: struct {
					field.RelationField
				}{
					RelationField: field.NewRelation("Employee.Roles.Permissions.Roles", "types.Role"),
				},
			},
			Menus: struct {
				field.RelationField
				Roles struct {
					field.RelationField
				}
			}{
				RelationField: field.NewRelation("Employee.Roles.Menus", "types.Menu"),
				Roles: struct {
					field.RelationField
				}{
					RelationField: field.NewRelation("Employee.Roles.Menus.Roles", "types.Role"),
				},
			},
		},
	}

	_leaveCorrect.Leave = leaveCorrectBelongsToLeave{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Leave", "types.Leave"),
		LeaveGroup: struct {
			field.RelationField
			Leave struct {
				field.RelationField
			}
			LeaveGroupCondition struct {
				field.RelationField
				LeaveGroup struct {
					field.RelationField
				}
			}
			Employee struct {
				field.RelationField
			}
		}{
			RelationField: field.NewRelation("Leave.LeaveGroup", "types.LeaveGroup"),
			Leave: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("Leave.LeaveGroup.Leave", "types.Leave"),
			},
			LeaveGroupCondition: struct {
				field.RelationField
				LeaveGroup struct {
					field.RelationField
				}
			}{
				RelationField: field.NewRelation("Leave.LeaveGroup.LeaveGroupCondition", "types.LeaveGroupCondition"),
				LeaveGroup: struct {
					field.RelationField
				}{
					RelationField: field.NewRelation("Leave.LeaveGroup.LeaveGroupCondition.LeaveGroup", "types.LeaveGroup"),
				},
			},
			Employee: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("Leave.LeaveGroup.Employee", "types.Employee"),
			},
		},
	}

	_leaveCorrect.fillFieldMap()

	return _leaveCorrect
}

type leaveCorrect struct {
	leaveCorrectDo leaveCorrectDo

	ALL        field.Asterisk
	ID         field.Uint
	CreatedAt  field.Time
	UpdatedAt  field.Time
	DeletedAt  field.Field
	EmployeeID field.Uint
	LeaveID    field.Uint
	Available  field.Float64
	Used       field.Float64
	Signing    field.Float64
	Employee   leaveCorrectBelongsToEmployee

	Leave leaveCorrectBelongsToLeave

	fieldMap map[string]field.Expr
}

func (l leaveCorrect) Table(newTableName string) *leaveCorrect {
	l.leaveCorrectDo.UseTable(newTableName)
	return l.updateTableName(newTableName)
}

func (l leaveCorrect) As(alias string) *leaveCorrect {
	l.leaveCorrectDo.DO = *(l.leaveCorrectDo.As(alias).(*gen.DO))
	return l.updateTableName(alias)
}

func (l *leaveCorrect) updateTableName(table string) *leaveCorrect {
	l.ALL = field.NewAsterisk(table)
	l.ID = field.NewUint(table, "id")
	l.CreatedAt = field.NewTime(table, "created_at")
	l.UpdatedAt = field.NewTime(table, "updated_at")
	l.DeletedAt = field.NewField(table, "deleted_at")
	l.EmployeeID = field.NewUint(table, "employee_id")
	l.LeaveID = field.NewUint(table, "leave_id")
	l.Available = field.NewFloat64(table, "available")
	l.Used = field.NewFloat64(table, "used")
	l.Signing = field.NewFloat64(table, "signing")

	l.fillFieldMap()

	return l
}

func (l *leaveCorrect) WithContext(ctx context.Context) ILeaveCorrectDo {
	return l.leaveCorrectDo.WithContext(ctx)
}

func (l leaveCorrect) TableName() string { return l.leaveCorrectDo.TableName() }

func (l leaveCorrect) Alias() string { return l.leaveCorrectDo.Alias() }

func (l leaveCorrect) Columns(cols ...field.Expr) gen.Columns {
	return l.leaveCorrectDo.Columns(cols...)
}

func (l *leaveCorrect) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := l.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (l *leaveCorrect) fillFieldMap() {
	l.fieldMap = make(map[string]field.Expr, 11)
	l.fieldMap["id"] = l.ID
	l.fieldMap["created_at"] = l.CreatedAt
	l.fieldMap["updated_at"] = l.UpdatedAt
	l.fieldMap["deleted_at"] = l.DeletedAt
	l.fieldMap["employee_id"] = l.EmployeeID
	l.fieldMap["leave_id"] = l.LeaveID
	l.fieldMap["available"] = l.Available
	l.fieldMap["used"] = l.Used
	l.fieldMap["signing"] = l.Signing

}

func (l leaveCorrect) clone(db *gorm.DB) leaveCorrect {
	l.leaveCorrectDo.ReplaceConnPool(db.Statement.ConnPool)
	return l
}

func (l leaveCorrect) replaceDB(db *gorm.DB) leaveCorrect {
	l.leaveCorrectDo.ReplaceDB(db)
	return l
}

type leaveCorrectBelongsToEmployee struct {
	db *gorm.DB

	field.RelationField

	Department struct {
		field.RelationField
		Manager struct {
			field.RelationField
		}
	}
	Rank struct {
		field.RelationField
		Grade struct {
			field.RelationField
			Rank struct {
				field.RelationField
			}
		}
	}
	Grade struct {
		field.RelationField
	}
	LoginInformation struct {
		field.RelationField
		Employee struct {
			field.RelationField
		}
	}
	Roles struct {
		field.RelationField
		Employees struct {
			field.RelationField
		}
		Permissions struct {
			field.RelationField
			Roles struct {
				field.RelationField
			}
		}
		Menus struct {
			field.RelationField
			Roles struct {
				field.RelationField
			}
		}
	}
}

func (a leaveCorrectBelongsToEmployee) Where(conds ...field.Expr) *leaveCorrectBelongsToEmployee {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a leaveCorrectBelongsToEmployee) WithContext(ctx context.Context) *leaveCorrectBelongsToEmployee {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a leaveCorrectBelongsToEmployee) Session(session *gorm.Session) *leaveCorrectBelongsToEmployee {
	a.db = a.db.Session(session)
	return &a
}

func (a leaveCorrectBelongsToEmployee) Model(m *types.LeaveCorrect) *leaveCorrectBelongsToEmployeeTx {
	return &leaveCorrectBelongsToEmployeeTx{a.db.Model(m).Association(a.Name())}
}

type leaveCorrectBelongsToEmployeeTx struct{ tx *gorm.Association }

func (a leaveCorrectBelongsToEmployeeTx) Find() (result *types.Employee, err error) {
	return result, a.tx.Find(&result)
}

func (a leaveCorrectBelongsToEmployeeTx) Append(values ...*types.Employee) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a leaveCorrectBelongsToEmployeeTx) Replace(values ...*types.Employee) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a leaveCorrectBelongsToEmployeeTx) Delete(values ...*types.Employee) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a leaveCorrectBelongsToEmployeeTx) Clear() error {
	return a.tx.Clear()
}

func (a leaveCorrectBelongsToEmployeeTx) Count() int64 {
	return a.tx.Count()
}

type leaveCorrectBelongsToLeave struct {
	db *gorm.DB

	field.RelationField

	LeaveGroup struct {
		field.RelationField
		Leave struct {
			field.RelationField
		}
		LeaveGroupCondition struct {
			field.RelationField
			LeaveGroup struct {
				field.RelationField
			}
		}
		Employee struct {
			field.RelationField
		}
	}
}

func (a leaveCorrectBelongsToLeave) Where(conds ...field.Expr) *leaveCorrectBelongsToLeave {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a leaveCorrectBelongsToLeave) WithContext(ctx context.Context) *leaveCorrectBelongsToLeave {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a leaveCorrectBelongsToLeave) Session(session *gorm.Session) *leaveCorrectBelongsToLeave {
	a.db = a.db.Session(session)
	return &a
}

func (a leaveCorrectBelongsToLeave) Model(m *types.LeaveCorrect) *leaveCorrectBelongsToLeaveTx {
	return &leaveCorrectBelongsToLeaveTx{a.db.Model(m).Association(a.Name())}
}

type leaveCorrectBelongsToLeaveTx struct{ tx *gorm.Association }

func (a leaveCorrectBelongsToLeaveTx) Find() (result *types.Leave, err error) {
	return result, a.tx.Find(&result)
}

func (a leaveCorrectBelongsToLeaveTx) Append(values ...*types.Leave) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a leaveCorrectBelongsToLeaveTx) Replace(values ...*types.Leave) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a leaveCorrectBelongsToLeaveTx) Delete(values ...*types.Leave) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a leaveCorrectBelongsToLeaveTx) Clear() error {
	return a.tx.Clear()
}

func (a leaveCorrectBelongsToLeaveTx) Count() int64 {
	return a.tx.Count()
}

type leaveCorrectDo struct{ gen.DO }

type ILeaveCorrectDo interface {
	gen.SubQuery
	Debug() ILeaveCorrectDo
	WithContext(ctx context.Context) ILeaveCorrectDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ILeaveCorrectDo
	WriteDB() ILeaveCorrectDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ILeaveCorrectDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ILeaveCorrectDo
	Not(conds ...gen.Condition) ILeaveCorrectDo
	Or(conds ...gen.Condition) ILeaveCorrectDo
	Select(conds ...field.Expr) ILeaveCorrectDo
	Where(conds ...gen.Condition) ILeaveCorrectDo
	Order(conds ...field.Expr) ILeaveCorrectDo
	Distinct(cols ...field.Expr) ILeaveCorrectDo
	Omit(cols ...field.Expr) ILeaveCorrectDo
	Join(table schema.Tabler, on ...field.Expr) ILeaveCorrectDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ILeaveCorrectDo
	RightJoin(table schema.Tabler, on ...field.Expr) ILeaveCorrectDo
	Group(cols ...field.Expr) ILeaveCorrectDo
	Having(conds ...gen.Condition) ILeaveCorrectDo
	Limit(limit int) ILeaveCorrectDo
	Offset(offset int) ILeaveCorrectDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ILeaveCorrectDo
	Unscoped() ILeaveCorrectDo
	Create(values ...*types.LeaveCorrect) error
	CreateInBatches(values []*types.LeaveCorrect, batchSize int) error
	Save(values ...*types.LeaveCorrect) error
	First() (*types.LeaveCorrect, error)
	Take() (*types.LeaveCorrect, error)
	Last() (*types.LeaveCorrect, error)
	Find() ([]*types.LeaveCorrect, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*types.LeaveCorrect, err error)
	FindInBatches(result *[]*types.LeaveCorrect, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*types.LeaveCorrect) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ILeaveCorrectDo
	Assign(attrs ...field.AssignExpr) ILeaveCorrectDo
	Joins(fields ...field.RelationField) ILeaveCorrectDo
	Preload(fields ...field.RelationField) ILeaveCorrectDo
	FirstOrInit() (*types.LeaveCorrect, error)
	FirstOrCreate() (*types.LeaveCorrect, error)
	FindByPage(offset int, limit int) (result []*types.LeaveCorrect, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ILeaveCorrectDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (l leaveCorrectDo) Debug() ILeaveCorrectDo {
	return l.withDO(l.DO.Debug())
}

func (l leaveCorrectDo) WithContext(ctx context.Context) ILeaveCorrectDo {
	return l.withDO(l.DO.WithContext(ctx))
}

func (l leaveCorrectDo) ReadDB() ILeaveCorrectDo {
	return l.Clauses(dbresolver.Read)
}

func (l leaveCorrectDo) WriteDB() ILeaveCorrectDo {
	return l.Clauses(dbresolver.Write)
}

func (l leaveCorrectDo) Session(config *gorm.Session) ILeaveCorrectDo {
	return l.withDO(l.DO.Session(config))
}

func (l leaveCorrectDo) Clauses(conds ...clause.Expression) ILeaveCorrectDo {
	return l.withDO(l.DO.Clauses(conds...))
}

func (l leaveCorrectDo) Returning(value interface{}, columns ...string) ILeaveCorrectDo {
	return l.withDO(l.DO.Returning(value, columns...))
}

func (l leaveCorrectDo) Not(conds ...gen.Condition) ILeaveCorrectDo {
	return l.withDO(l.DO.Not(conds...))
}

func (l leaveCorrectDo) Or(conds ...gen.Condition) ILeaveCorrectDo {
	return l.withDO(l.DO.Or(conds...))
}

func (l leaveCorrectDo) Select(conds ...field.Expr) ILeaveCorrectDo {
	return l.withDO(l.DO.Select(conds...))
}

func (l leaveCorrectDo) Where(conds ...gen.Condition) ILeaveCorrectDo {
	return l.withDO(l.DO.Where(conds...))
}

func (l leaveCorrectDo) Order(conds ...field.Expr) ILeaveCorrectDo {
	return l.withDO(l.DO.Order(conds...))
}

func (l leaveCorrectDo) Distinct(cols ...field.Expr) ILeaveCorrectDo {
	return l.withDO(l.DO.Distinct(cols...))
}

func (l leaveCorrectDo) Omit(cols ...field.Expr) ILeaveCorrectDo {
	return l.withDO(l.DO.Omit(cols...))
}

func (l leaveCorrectDo) Join(table schema.Tabler, on ...field.Expr) ILeaveCorrectDo {
	return l.withDO(l.DO.Join(table, on...))
}

func (l leaveCorrectDo) LeftJoin(table schema.Tabler, on ...field.Expr) ILeaveCorrectDo {
	return l.withDO(l.DO.LeftJoin(table, on...))
}

func (l leaveCorrectDo) RightJoin(table schema.Tabler, on ...field.Expr) ILeaveCorrectDo {
	return l.withDO(l.DO.RightJoin(table, on...))
}

func (l leaveCorrectDo) Group(cols ...field.Expr) ILeaveCorrectDo {
	return l.withDO(l.DO.Group(cols...))
}

func (l leaveCorrectDo) Having(conds ...gen.Condition) ILeaveCorrectDo {
	return l.withDO(l.DO.Having(conds...))
}

func (l leaveCorrectDo) Limit(limit int) ILeaveCorrectDo {
	return l.withDO(l.DO.Limit(limit))
}

func (l leaveCorrectDo) Offset(offset int) ILeaveCorrectDo {
	return l.withDO(l.DO.Offset(offset))
}

func (l leaveCorrectDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ILeaveCorrectDo {
	return l.withDO(l.DO.Scopes(funcs...))
}

func (l leaveCorrectDo) Unscoped() ILeaveCorrectDo {
	return l.withDO(l.DO.Unscoped())
}

func (l leaveCorrectDo) Create(values ...*types.LeaveCorrect) error {
	if len(values) == 0 {
		return nil
	}
	return l.DO.Create(values)
}

func (l leaveCorrectDo) CreateInBatches(values []*types.LeaveCorrect, batchSize int) error {
	return l.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (l leaveCorrectDo) Save(values ...*types.LeaveCorrect) error {
	if len(values) == 0 {
		return nil
	}
	return l.DO.Save(values)
}

func (l leaveCorrectDo) First() (*types.LeaveCorrect, error) {
	if result, err := l.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*types.LeaveCorrect), nil
	}
}

func (l leaveCorrectDo) Take() (*types.LeaveCorrect, error) {
	if result, err := l.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*types.LeaveCorrect), nil
	}
}

func (l leaveCorrectDo) Last() (*types.LeaveCorrect, error) {
	if result, err := l.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*types.LeaveCorrect), nil
	}
}

func (l leaveCorrectDo) Find() ([]*types.LeaveCorrect, error) {
	result, err := l.DO.Find()
	return result.([]*types.LeaveCorrect), err
}

func (l leaveCorrectDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*types.LeaveCorrect, err error) {
	buf := make([]*types.LeaveCorrect, 0, batchSize)
	err = l.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (l leaveCorrectDo) FindInBatches(result *[]*types.LeaveCorrect, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return l.DO.FindInBatches(result, batchSize, fc)
}

func (l leaveCorrectDo) Attrs(attrs ...field.AssignExpr) ILeaveCorrectDo {
	return l.withDO(l.DO.Attrs(attrs...))
}

func (l leaveCorrectDo) Assign(attrs ...field.AssignExpr) ILeaveCorrectDo {
	return l.withDO(l.DO.Assign(attrs...))
}

func (l leaveCorrectDo) Joins(fields ...field.RelationField) ILeaveCorrectDo {
	for _, _f := range fields {
		l = *l.withDO(l.DO.Joins(_f))
	}
	return &l
}

func (l leaveCorrectDo) Preload(fields ...field.RelationField) ILeaveCorrectDo {
	for _, _f := range fields {
		l = *l.withDO(l.DO.Preload(_f))
	}
	return &l
}

func (l leaveCorrectDo) FirstOrInit() (*types.LeaveCorrect, error) {
	if result, err := l.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*types.LeaveCorrect), nil
	}
}

func (l leaveCorrectDo) FirstOrCreate() (*types.LeaveCorrect, error) {
	if result, err := l.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*types.LeaveCorrect), nil
	}
}

func (l leaveCorrectDo) FindByPage(offset int, limit int) (result []*types.LeaveCorrect, count int64, err error) {
	result, err = l.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = l.Offset(-1).Limit(-1).Count()
	return
}

func (l leaveCorrectDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = l.Count()
	if err != nil {
		return
	}

	err = l.Offset(offset).Limit(limit).Scan(result)
	return
}

func (l leaveCorrectDo) Scan(result interface{}) (err error) {
	return l.DO.Scan(result)
}

func (l leaveCorrectDo) Delete(models ...*types.LeaveCorrect) (result gen.ResultInfo, err error) {
	return l.DO.Delete(models)
}

func (l *leaveCorrectDo) withDO(do gen.Dao) *leaveCorrectDo {
	l.DO = *do.(*gen.DO)
	return l
}
