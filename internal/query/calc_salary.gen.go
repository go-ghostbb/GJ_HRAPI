// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"hrapi/internal/types"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"
)

func newCalcSalary(db *gorm.DB, opts ...gen.DOOption) calcSalary {
	_calcSalary := calcSalary{}

	_calcSalary.calcSalaryDo.UseDB(db, opts...)
	_calcSalary.calcSalaryDo.UseModel(&types.CalcSalary{})

	tableName := _calcSalary.calcSalaryDo.TableName()
	_calcSalary.ALL = field.NewAsterisk(tableName)
	_calcSalary.ID = field.NewUint(tableName, "id")
	_calcSalary.CreatedAt = field.NewTime(tableName, "created_at")
	_calcSalary.UpdatedAt = field.NewTime(tableName, "updated_at")
	_calcSalary.DeletedAt = field.NewField(tableName, "deleted_at")
	_calcSalary.Start = field.NewTime(tableName, "start")
	_calcSalary.End = field.NewTime(tableName, "end")
	_calcSalary.Salary = field.NewFloat32(tableName, "salary")
	_calcSalary.Stage = field.NewUint(tableName, "stage")
	_calcSalary.SalaryAdd = calcSalaryHasManySalaryAdd{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("SalaryAdd", "types.CalcSalaryAdd"),
		CalcSalary: struct {
			field.RelationField
			SalaryAdd struct {
				field.RelationField
			}
			SalaryReduce struct {
				field.RelationField
				CalcSalary struct {
					field.RelationField
				}
			}
		}{
			RelationField: field.NewRelation("SalaryAdd.CalcSalary", "types.CalcSalary"),
			SalaryAdd: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("SalaryAdd.CalcSalary.SalaryAdd", "types.CalcSalaryAdd"),
			},
			SalaryReduce: struct {
				field.RelationField
				CalcSalary struct {
					field.RelationField
				}
			}{
				RelationField: field.NewRelation("SalaryAdd.CalcSalary.SalaryReduce", "types.CalcSalaryReduce"),
				CalcSalary: struct {
					field.RelationField
				}{
					RelationField: field.NewRelation("SalaryAdd.CalcSalary.SalaryReduce.CalcSalary", "types.CalcSalary"),
				},
			},
		},
	}

	_calcSalary.SalaryReduce = calcSalaryHasManySalaryReduce{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("SalaryReduce", "types.CalcSalaryReduce"),
	}

	_calcSalary.fillFieldMap()

	return _calcSalary
}

type calcSalary struct {
	calcSalaryDo calcSalaryDo

	ALL       field.Asterisk
	ID        field.Uint
	CreatedAt field.Time
	UpdatedAt field.Time
	DeletedAt field.Field
	Start     field.Time
	End       field.Time
	Salary    field.Float32
	Stage     field.Uint
	SalaryAdd calcSalaryHasManySalaryAdd

	SalaryReduce calcSalaryHasManySalaryReduce

	fieldMap map[string]field.Expr
}

func (c calcSalary) Table(newTableName string) *calcSalary {
	c.calcSalaryDo.UseTable(newTableName)
	return c.updateTableName(newTableName)
}

func (c calcSalary) As(alias string) *calcSalary {
	c.calcSalaryDo.DO = *(c.calcSalaryDo.As(alias).(*gen.DO))
	return c.updateTableName(alias)
}

func (c *calcSalary) updateTableName(table string) *calcSalary {
	c.ALL = field.NewAsterisk(table)
	c.ID = field.NewUint(table, "id")
	c.CreatedAt = field.NewTime(table, "created_at")
	c.UpdatedAt = field.NewTime(table, "updated_at")
	c.DeletedAt = field.NewField(table, "deleted_at")
	c.Start = field.NewTime(table, "start")
	c.End = field.NewTime(table, "end")
	c.Salary = field.NewFloat32(table, "salary")
	c.Stage = field.NewUint(table, "stage")

	c.fillFieldMap()

	return c
}

func (c *calcSalary) WithContext(ctx context.Context) ICalcSalaryDo {
	return c.calcSalaryDo.WithContext(ctx)
}

func (c calcSalary) TableName() string { return c.calcSalaryDo.TableName() }

func (c calcSalary) Alias() string { return c.calcSalaryDo.Alias() }

func (c calcSalary) Columns(cols ...field.Expr) gen.Columns { return c.calcSalaryDo.Columns(cols...) }

func (c *calcSalary) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := c.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (c *calcSalary) fillFieldMap() {
	c.fieldMap = make(map[string]field.Expr, 10)
	c.fieldMap["id"] = c.ID
	c.fieldMap["created_at"] = c.CreatedAt
	c.fieldMap["updated_at"] = c.UpdatedAt
	c.fieldMap["deleted_at"] = c.DeletedAt
	c.fieldMap["start"] = c.Start
	c.fieldMap["end"] = c.End
	c.fieldMap["salary"] = c.Salary
	c.fieldMap["stage"] = c.Stage

}

func (c calcSalary) clone(db *gorm.DB) calcSalary {
	c.calcSalaryDo.ReplaceConnPool(db.Statement.ConnPool)
	return c
}

func (c calcSalary) replaceDB(db *gorm.DB) calcSalary {
	c.calcSalaryDo.ReplaceDB(db)
	return c
}

type calcSalaryHasManySalaryAdd struct {
	db *gorm.DB

	field.RelationField

	CalcSalary struct {
		field.RelationField
		SalaryAdd struct {
			field.RelationField
		}
		SalaryReduce struct {
			field.RelationField
			CalcSalary struct {
				field.RelationField
			}
		}
	}
}

func (a calcSalaryHasManySalaryAdd) Where(conds ...field.Expr) *calcSalaryHasManySalaryAdd {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a calcSalaryHasManySalaryAdd) WithContext(ctx context.Context) *calcSalaryHasManySalaryAdd {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a calcSalaryHasManySalaryAdd) Session(session *gorm.Session) *calcSalaryHasManySalaryAdd {
	a.db = a.db.Session(session)
	return &a
}

func (a calcSalaryHasManySalaryAdd) Model(m *types.CalcSalary) *calcSalaryHasManySalaryAddTx {
	return &calcSalaryHasManySalaryAddTx{a.db.Model(m).Association(a.Name())}
}

type calcSalaryHasManySalaryAddTx struct{ tx *gorm.Association }

func (a calcSalaryHasManySalaryAddTx) Find() (result []*types.CalcSalaryAdd, err error) {
	return result, a.tx.Find(&result)
}

func (a calcSalaryHasManySalaryAddTx) Append(values ...*types.CalcSalaryAdd) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a calcSalaryHasManySalaryAddTx) Replace(values ...*types.CalcSalaryAdd) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a calcSalaryHasManySalaryAddTx) Delete(values ...*types.CalcSalaryAdd) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a calcSalaryHasManySalaryAddTx) Clear() error {
	return a.tx.Clear()
}

func (a calcSalaryHasManySalaryAddTx) Count() int64 {
	return a.tx.Count()
}

type calcSalaryHasManySalaryReduce struct {
	db *gorm.DB

	field.RelationField
}

func (a calcSalaryHasManySalaryReduce) Where(conds ...field.Expr) *calcSalaryHasManySalaryReduce {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a calcSalaryHasManySalaryReduce) WithContext(ctx context.Context) *calcSalaryHasManySalaryReduce {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a calcSalaryHasManySalaryReduce) Session(session *gorm.Session) *calcSalaryHasManySalaryReduce {
	a.db = a.db.Session(session)
	return &a
}

func (a calcSalaryHasManySalaryReduce) Model(m *types.CalcSalary) *calcSalaryHasManySalaryReduceTx {
	return &calcSalaryHasManySalaryReduceTx{a.db.Model(m).Association(a.Name())}
}

type calcSalaryHasManySalaryReduceTx struct{ tx *gorm.Association }

func (a calcSalaryHasManySalaryReduceTx) Find() (result []*types.CalcSalaryReduce, err error) {
	return result, a.tx.Find(&result)
}

func (a calcSalaryHasManySalaryReduceTx) Append(values ...*types.CalcSalaryReduce) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a calcSalaryHasManySalaryReduceTx) Replace(values ...*types.CalcSalaryReduce) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a calcSalaryHasManySalaryReduceTx) Delete(values ...*types.CalcSalaryReduce) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a calcSalaryHasManySalaryReduceTx) Clear() error {
	return a.tx.Clear()
}

func (a calcSalaryHasManySalaryReduceTx) Count() int64 {
	return a.tx.Count()
}

type calcSalaryDo struct{ gen.DO }

type ICalcSalaryDo interface {
	gen.SubQuery
	Debug() ICalcSalaryDo
	WithContext(ctx context.Context) ICalcSalaryDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ICalcSalaryDo
	WriteDB() ICalcSalaryDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ICalcSalaryDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ICalcSalaryDo
	Not(conds ...gen.Condition) ICalcSalaryDo
	Or(conds ...gen.Condition) ICalcSalaryDo
	Select(conds ...field.Expr) ICalcSalaryDo
	Where(conds ...gen.Condition) ICalcSalaryDo
	Order(conds ...field.Expr) ICalcSalaryDo
	Distinct(cols ...field.Expr) ICalcSalaryDo
	Omit(cols ...field.Expr) ICalcSalaryDo
	Join(table schema.Tabler, on ...field.Expr) ICalcSalaryDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ICalcSalaryDo
	RightJoin(table schema.Tabler, on ...field.Expr) ICalcSalaryDo
	Group(cols ...field.Expr) ICalcSalaryDo
	Having(conds ...gen.Condition) ICalcSalaryDo
	Limit(limit int) ICalcSalaryDo
	Offset(offset int) ICalcSalaryDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ICalcSalaryDo
	Unscoped() ICalcSalaryDo
	Create(values ...*types.CalcSalary) error
	CreateInBatches(values []*types.CalcSalary, batchSize int) error
	Save(values ...*types.CalcSalary) error
	First() (*types.CalcSalary, error)
	Take() (*types.CalcSalary, error)
	Last() (*types.CalcSalary, error)
	Find() ([]*types.CalcSalary, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*types.CalcSalary, err error)
	FindInBatches(result *[]*types.CalcSalary, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*types.CalcSalary) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ICalcSalaryDo
	Assign(attrs ...field.AssignExpr) ICalcSalaryDo
	Joins(fields ...field.RelationField) ICalcSalaryDo
	Preload(fields ...field.RelationField) ICalcSalaryDo
	FirstOrInit() (*types.CalcSalary, error)
	FirstOrCreate() (*types.CalcSalary, error)
	FindByPage(offset int, limit int) (result []*types.CalcSalary, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ICalcSalaryDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (c calcSalaryDo) Debug() ICalcSalaryDo {
	return c.withDO(c.DO.Debug())
}

func (c calcSalaryDo) WithContext(ctx context.Context) ICalcSalaryDo {
	return c.withDO(c.DO.WithContext(ctx))
}

func (c calcSalaryDo) ReadDB() ICalcSalaryDo {
	return c.Clauses(dbresolver.Read)
}

func (c calcSalaryDo) WriteDB() ICalcSalaryDo {
	return c.Clauses(dbresolver.Write)
}

func (c calcSalaryDo) Session(config *gorm.Session) ICalcSalaryDo {
	return c.withDO(c.DO.Session(config))
}

func (c calcSalaryDo) Clauses(conds ...clause.Expression) ICalcSalaryDo {
	return c.withDO(c.DO.Clauses(conds...))
}

func (c calcSalaryDo) Returning(value interface{}, columns ...string) ICalcSalaryDo {
	return c.withDO(c.DO.Returning(value, columns...))
}

func (c calcSalaryDo) Not(conds ...gen.Condition) ICalcSalaryDo {
	return c.withDO(c.DO.Not(conds...))
}

func (c calcSalaryDo) Or(conds ...gen.Condition) ICalcSalaryDo {
	return c.withDO(c.DO.Or(conds...))
}

func (c calcSalaryDo) Select(conds ...field.Expr) ICalcSalaryDo {
	return c.withDO(c.DO.Select(conds...))
}

func (c calcSalaryDo) Where(conds ...gen.Condition) ICalcSalaryDo {
	return c.withDO(c.DO.Where(conds...))
}

func (c calcSalaryDo) Order(conds ...field.Expr) ICalcSalaryDo {
	return c.withDO(c.DO.Order(conds...))
}

func (c calcSalaryDo) Distinct(cols ...field.Expr) ICalcSalaryDo {
	return c.withDO(c.DO.Distinct(cols...))
}

func (c calcSalaryDo) Omit(cols ...field.Expr) ICalcSalaryDo {
	return c.withDO(c.DO.Omit(cols...))
}

func (c calcSalaryDo) Join(table schema.Tabler, on ...field.Expr) ICalcSalaryDo {
	return c.withDO(c.DO.Join(table, on...))
}

func (c calcSalaryDo) LeftJoin(table schema.Tabler, on ...field.Expr) ICalcSalaryDo {
	return c.withDO(c.DO.LeftJoin(table, on...))
}

func (c calcSalaryDo) RightJoin(table schema.Tabler, on ...field.Expr) ICalcSalaryDo {
	return c.withDO(c.DO.RightJoin(table, on...))
}

func (c calcSalaryDo) Group(cols ...field.Expr) ICalcSalaryDo {
	return c.withDO(c.DO.Group(cols...))
}

func (c calcSalaryDo) Having(conds ...gen.Condition) ICalcSalaryDo {
	return c.withDO(c.DO.Having(conds...))
}

func (c calcSalaryDo) Limit(limit int) ICalcSalaryDo {
	return c.withDO(c.DO.Limit(limit))
}

func (c calcSalaryDo) Offset(offset int) ICalcSalaryDo {
	return c.withDO(c.DO.Offset(offset))
}

func (c calcSalaryDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ICalcSalaryDo {
	return c.withDO(c.DO.Scopes(funcs...))
}

func (c calcSalaryDo) Unscoped() ICalcSalaryDo {
	return c.withDO(c.DO.Unscoped())
}

func (c calcSalaryDo) Create(values ...*types.CalcSalary) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Create(values)
}

func (c calcSalaryDo) CreateInBatches(values []*types.CalcSalary, batchSize int) error {
	return c.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (c calcSalaryDo) Save(values ...*types.CalcSalary) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Save(values)
}

func (c calcSalaryDo) First() (*types.CalcSalary, error) {
	if result, err := c.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*types.CalcSalary), nil
	}
}

func (c calcSalaryDo) Take() (*types.CalcSalary, error) {
	if result, err := c.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*types.CalcSalary), nil
	}
}

func (c calcSalaryDo) Last() (*types.CalcSalary, error) {
	if result, err := c.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*types.CalcSalary), nil
	}
}

func (c calcSalaryDo) Find() ([]*types.CalcSalary, error) {
	result, err := c.DO.Find()
	return result.([]*types.CalcSalary), err
}

func (c calcSalaryDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*types.CalcSalary, err error) {
	buf := make([]*types.CalcSalary, 0, batchSize)
	err = c.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (c calcSalaryDo) FindInBatches(result *[]*types.CalcSalary, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return c.DO.FindInBatches(result, batchSize, fc)
}

func (c calcSalaryDo) Attrs(attrs ...field.AssignExpr) ICalcSalaryDo {
	return c.withDO(c.DO.Attrs(attrs...))
}

func (c calcSalaryDo) Assign(attrs ...field.AssignExpr) ICalcSalaryDo {
	return c.withDO(c.DO.Assign(attrs...))
}

func (c calcSalaryDo) Joins(fields ...field.RelationField) ICalcSalaryDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Joins(_f))
	}
	return &c
}

func (c calcSalaryDo) Preload(fields ...field.RelationField) ICalcSalaryDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Preload(_f))
	}
	return &c
}

func (c calcSalaryDo) FirstOrInit() (*types.CalcSalary, error) {
	if result, err := c.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*types.CalcSalary), nil
	}
}

func (c calcSalaryDo) FirstOrCreate() (*types.CalcSalary, error) {
	if result, err := c.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*types.CalcSalary), nil
	}
}

func (c calcSalaryDo) FindByPage(offset int, limit int) (result []*types.CalcSalary, count int64, err error) {
	result, err = c.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = c.Offset(-1).Limit(-1).Count()
	return
}

func (c calcSalaryDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = c.Count()
	if err != nil {
		return
	}

	err = c.Offset(offset).Limit(limit).Scan(result)
	return
}

func (c calcSalaryDo) Scan(result interface{}) (err error) {
	return c.DO.Scan(result)
}

func (c calcSalaryDo) Delete(models ...*types.CalcSalary) (result gen.ResultInfo, err error) {
	return c.DO.Delete(models)
}

func (c *calcSalaryDo) withDO(do gen.Dao) *calcSalaryDo {
	c.DO = *do.(*gen.DO)
	return c
}
