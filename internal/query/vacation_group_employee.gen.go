// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"hrapi/internal/types"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"
)

func newVacationGroupEmployee(db *gorm.DB, opts ...gen.DOOption) vacationGroupEmployee {
	_vacationGroupEmployee := vacationGroupEmployee{}

	_vacationGroupEmployee.vacationGroupEmployeeDo.UseDB(db, opts...)
	_vacationGroupEmployee.vacationGroupEmployeeDo.UseModel(&types.VacationGroupEmployee{})

	tableName := _vacationGroupEmployee.vacationGroupEmployeeDo.TableName()
	_vacationGroupEmployee.ALL = field.NewAsterisk(tableName)
	_vacationGroupEmployee.VacationGroupID = field.NewUint(tableName, "vacation_group_id")
	_vacationGroupEmployee.EmployeeID = field.NewUint(tableName, "employee_id")

	_vacationGroupEmployee.fillFieldMap()

	return _vacationGroupEmployee
}

type vacationGroupEmployee struct {
	vacationGroupEmployeeDo vacationGroupEmployeeDo

	ALL             field.Asterisk
	VacationGroupID field.Uint
	EmployeeID      field.Uint

	fieldMap map[string]field.Expr
}

func (v vacationGroupEmployee) Table(newTableName string) *vacationGroupEmployee {
	v.vacationGroupEmployeeDo.UseTable(newTableName)
	return v.updateTableName(newTableName)
}

func (v vacationGroupEmployee) As(alias string) *vacationGroupEmployee {
	v.vacationGroupEmployeeDo.DO = *(v.vacationGroupEmployeeDo.As(alias).(*gen.DO))
	return v.updateTableName(alias)
}

func (v *vacationGroupEmployee) updateTableName(table string) *vacationGroupEmployee {
	v.ALL = field.NewAsterisk(table)
	v.VacationGroupID = field.NewUint(table, "vacation_group_id")
	v.EmployeeID = field.NewUint(table, "employee_id")

	v.fillFieldMap()

	return v
}

func (v *vacationGroupEmployee) WithContext(ctx context.Context) IVacationGroupEmployeeDo {
	return v.vacationGroupEmployeeDo.WithContext(ctx)
}

func (v vacationGroupEmployee) TableName() string { return v.vacationGroupEmployeeDo.TableName() }

func (v vacationGroupEmployee) Alias() string { return v.vacationGroupEmployeeDo.Alias() }

func (v vacationGroupEmployee) Columns(cols ...field.Expr) gen.Columns {
	return v.vacationGroupEmployeeDo.Columns(cols...)
}

func (v *vacationGroupEmployee) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := v.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (v *vacationGroupEmployee) fillFieldMap() {
	v.fieldMap = make(map[string]field.Expr, 2)
	v.fieldMap["vacation_group_id"] = v.VacationGroupID
	v.fieldMap["employee_id"] = v.EmployeeID
}

func (v vacationGroupEmployee) clone(db *gorm.DB) vacationGroupEmployee {
	v.vacationGroupEmployeeDo.ReplaceConnPool(db.Statement.ConnPool)
	return v
}

func (v vacationGroupEmployee) replaceDB(db *gorm.DB) vacationGroupEmployee {
	v.vacationGroupEmployeeDo.ReplaceDB(db)
	return v
}

type vacationGroupEmployeeDo struct{ gen.DO }

type IVacationGroupEmployeeDo interface {
	gen.SubQuery
	Debug() IVacationGroupEmployeeDo
	WithContext(ctx context.Context) IVacationGroupEmployeeDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IVacationGroupEmployeeDo
	WriteDB() IVacationGroupEmployeeDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IVacationGroupEmployeeDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IVacationGroupEmployeeDo
	Not(conds ...gen.Condition) IVacationGroupEmployeeDo
	Or(conds ...gen.Condition) IVacationGroupEmployeeDo
	Select(conds ...field.Expr) IVacationGroupEmployeeDo
	Where(conds ...gen.Condition) IVacationGroupEmployeeDo
	Order(conds ...field.Expr) IVacationGroupEmployeeDo
	Distinct(cols ...field.Expr) IVacationGroupEmployeeDo
	Omit(cols ...field.Expr) IVacationGroupEmployeeDo
	Join(table schema.Tabler, on ...field.Expr) IVacationGroupEmployeeDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IVacationGroupEmployeeDo
	RightJoin(table schema.Tabler, on ...field.Expr) IVacationGroupEmployeeDo
	Group(cols ...field.Expr) IVacationGroupEmployeeDo
	Having(conds ...gen.Condition) IVacationGroupEmployeeDo
	Limit(limit int) IVacationGroupEmployeeDo
	Offset(offset int) IVacationGroupEmployeeDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IVacationGroupEmployeeDo
	Unscoped() IVacationGroupEmployeeDo
	Create(values ...*types.VacationGroupEmployee) error
	CreateInBatches(values []*types.VacationGroupEmployee, batchSize int) error
	Save(values ...*types.VacationGroupEmployee) error
	First() (*types.VacationGroupEmployee, error)
	Take() (*types.VacationGroupEmployee, error)
	Last() (*types.VacationGroupEmployee, error)
	Find() ([]*types.VacationGroupEmployee, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*types.VacationGroupEmployee, err error)
	FindInBatches(result *[]*types.VacationGroupEmployee, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*types.VacationGroupEmployee) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IVacationGroupEmployeeDo
	Assign(attrs ...field.AssignExpr) IVacationGroupEmployeeDo
	Joins(fields ...field.RelationField) IVacationGroupEmployeeDo
	Preload(fields ...field.RelationField) IVacationGroupEmployeeDo
	FirstOrInit() (*types.VacationGroupEmployee, error)
	FirstOrCreate() (*types.VacationGroupEmployee, error)
	FindByPage(offset int, limit int) (result []*types.VacationGroupEmployee, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IVacationGroupEmployeeDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (v vacationGroupEmployeeDo) Debug() IVacationGroupEmployeeDo {
	return v.withDO(v.DO.Debug())
}

func (v vacationGroupEmployeeDo) WithContext(ctx context.Context) IVacationGroupEmployeeDo {
	return v.withDO(v.DO.WithContext(ctx))
}

func (v vacationGroupEmployeeDo) ReadDB() IVacationGroupEmployeeDo {
	return v.Clauses(dbresolver.Read)
}

func (v vacationGroupEmployeeDo) WriteDB() IVacationGroupEmployeeDo {
	return v.Clauses(dbresolver.Write)
}

func (v vacationGroupEmployeeDo) Session(config *gorm.Session) IVacationGroupEmployeeDo {
	return v.withDO(v.DO.Session(config))
}

func (v vacationGroupEmployeeDo) Clauses(conds ...clause.Expression) IVacationGroupEmployeeDo {
	return v.withDO(v.DO.Clauses(conds...))
}

func (v vacationGroupEmployeeDo) Returning(value interface{}, columns ...string) IVacationGroupEmployeeDo {
	return v.withDO(v.DO.Returning(value, columns...))
}

func (v vacationGroupEmployeeDo) Not(conds ...gen.Condition) IVacationGroupEmployeeDo {
	return v.withDO(v.DO.Not(conds...))
}

func (v vacationGroupEmployeeDo) Or(conds ...gen.Condition) IVacationGroupEmployeeDo {
	return v.withDO(v.DO.Or(conds...))
}

func (v vacationGroupEmployeeDo) Select(conds ...field.Expr) IVacationGroupEmployeeDo {
	return v.withDO(v.DO.Select(conds...))
}

func (v vacationGroupEmployeeDo) Where(conds ...gen.Condition) IVacationGroupEmployeeDo {
	return v.withDO(v.DO.Where(conds...))
}

func (v vacationGroupEmployeeDo) Order(conds ...field.Expr) IVacationGroupEmployeeDo {
	return v.withDO(v.DO.Order(conds...))
}

func (v vacationGroupEmployeeDo) Distinct(cols ...field.Expr) IVacationGroupEmployeeDo {
	return v.withDO(v.DO.Distinct(cols...))
}

func (v vacationGroupEmployeeDo) Omit(cols ...field.Expr) IVacationGroupEmployeeDo {
	return v.withDO(v.DO.Omit(cols...))
}

func (v vacationGroupEmployeeDo) Join(table schema.Tabler, on ...field.Expr) IVacationGroupEmployeeDo {
	return v.withDO(v.DO.Join(table, on...))
}

func (v vacationGroupEmployeeDo) LeftJoin(table schema.Tabler, on ...field.Expr) IVacationGroupEmployeeDo {
	return v.withDO(v.DO.LeftJoin(table, on...))
}

func (v vacationGroupEmployeeDo) RightJoin(table schema.Tabler, on ...field.Expr) IVacationGroupEmployeeDo {
	return v.withDO(v.DO.RightJoin(table, on...))
}

func (v vacationGroupEmployeeDo) Group(cols ...field.Expr) IVacationGroupEmployeeDo {
	return v.withDO(v.DO.Group(cols...))
}

func (v vacationGroupEmployeeDo) Having(conds ...gen.Condition) IVacationGroupEmployeeDo {
	return v.withDO(v.DO.Having(conds...))
}

func (v vacationGroupEmployeeDo) Limit(limit int) IVacationGroupEmployeeDo {
	return v.withDO(v.DO.Limit(limit))
}

func (v vacationGroupEmployeeDo) Offset(offset int) IVacationGroupEmployeeDo {
	return v.withDO(v.DO.Offset(offset))
}

func (v vacationGroupEmployeeDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IVacationGroupEmployeeDo {
	return v.withDO(v.DO.Scopes(funcs...))
}

func (v vacationGroupEmployeeDo) Unscoped() IVacationGroupEmployeeDo {
	return v.withDO(v.DO.Unscoped())
}

func (v vacationGroupEmployeeDo) Create(values ...*types.VacationGroupEmployee) error {
	if len(values) == 0 {
		return nil
	}
	return v.DO.Create(values)
}

func (v vacationGroupEmployeeDo) CreateInBatches(values []*types.VacationGroupEmployee, batchSize int) error {
	return v.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (v vacationGroupEmployeeDo) Save(values ...*types.VacationGroupEmployee) error {
	if len(values) == 0 {
		return nil
	}
	return v.DO.Save(values)
}

func (v vacationGroupEmployeeDo) First() (*types.VacationGroupEmployee, error) {
	if result, err := v.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*types.VacationGroupEmployee), nil
	}
}

func (v vacationGroupEmployeeDo) Take() (*types.VacationGroupEmployee, error) {
	if result, err := v.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*types.VacationGroupEmployee), nil
	}
}

func (v vacationGroupEmployeeDo) Last() (*types.VacationGroupEmployee, error) {
	if result, err := v.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*types.VacationGroupEmployee), nil
	}
}

func (v vacationGroupEmployeeDo) Find() ([]*types.VacationGroupEmployee, error) {
	result, err := v.DO.Find()
	return result.([]*types.VacationGroupEmployee), err
}

func (v vacationGroupEmployeeDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*types.VacationGroupEmployee, err error) {
	buf := make([]*types.VacationGroupEmployee, 0, batchSize)
	err = v.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (v vacationGroupEmployeeDo) FindInBatches(result *[]*types.VacationGroupEmployee, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return v.DO.FindInBatches(result, batchSize, fc)
}

func (v vacationGroupEmployeeDo) Attrs(attrs ...field.AssignExpr) IVacationGroupEmployeeDo {
	return v.withDO(v.DO.Attrs(attrs...))
}

func (v vacationGroupEmployeeDo) Assign(attrs ...field.AssignExpr) IVacationGroupEmployeeDo {
	return v.withDO(v.DO.Assign(attrs...))
}

func (v vacationGroupEmployeeDo) Joins(fields ...field.RelationField) IVacationGroupEmployeeDo {
	for _, _f := range fields {
		v = *v.withDO(v.DO.Joins(_f))
	}
	return &v
}

func (v vacationGroupEmployeeDo) Preload(fields ...field.RelationField) IVacationGroupEmployeeDo {
	for _, _f := range fields {
		v = *v.withDO(v.DO.Preload(_f))
	}
	return &v
}

func (v vacationGroupEmployeeDo) FirstOrInit() (*types.VacationGroupEmployee, error) {
	if result, err := v.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*types.VacationGroupEmployee), nil
	}
}

func (v vacationGroupEmployeeDo) FirstOrCreate() (*types.VacationGroupEmployee, error) {
	if result, err := v.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*types.VacationGroupEmployee), nil
	}
}

func (v vacationGroupEmployeeDo) FindByPage(offset int, limit int) (result []*types.VacationGroupEmployee, count int64, err error) {
	result, err = v.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = v.Offset(-1).Limit(-1).Count()
	return
}

func (v vacationGroupEmployeeDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = v.Count()
	if err != nil {
		return
	}

	err = v.Offset(offset).Limit(limit).Scan(result)
	return
}

func (v vacationGroupEmployeeDo) Scan(result interface{}) (err error) {
	return v.DO.Scan(result)
}

func (v vacationGroupEmployeeDo) Delete(models ...*types.VacationGroupEmployee) (result gen.ResultInfo, err error) {
	return v.DO.Delete(models)
}

func (v *vacationGroupEmployeeDo) withDO(do gen.Dao) *vacationGroupEmployeeDo {
	v.DO = *do.(*gen.DO)
	return v
}
