// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"hrapi/internal/types"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"
)

func newEmployeeRole(db *gorm.DB, opts ...gen.DOOption) employeeRole {
	_employeeRole := employeeRole{}

	_employeeRole.employeeRoleDo.UseDB(db, opts...)
	_employeeRole.employeeRoleDo.UseModel(&types.EmployeeRole{})

	tableName := _employeeRole.employeeRoleDo.TableName()
	_employeeRole.ALL = field.NewAsterisk(tableName)
	_employeeRole.RoleID = field.NewUint(tableName, "role_id")
	_employeeRole.EmployeeID = field.NewUint(tableName, "employee_id")

	_employeeRole.fillFieldMap()

	return _employeeRole
}

type employeeRole struct {
	employeeRoleDo employeeRoleDo

	ALL        field.Asterisk
	RoleID     field.Uint
	EmployeeID field.Uint

	fieldMap map[string]field.Expr
}

func (e employeeRole) Table(newTableName string) *employeeRole {
	e.employeeRoleDo.UseTable(newTableName)
	return e.updateTableName(newTableName)
}

func (e employeeRole) As(alias string) *employeeRole {
	e.employeeRoleDo.DO = *(e.employeeRoleDo.As(alias).(*gen.DO))
	return e.updateTableName(alias)
}

func (e *employeeRole) updateTableName(table string) *employeeRole {
	e.ALL = field.NewAsterisk(table)
	e.RoleID = field.NewUint(table, "role_id")
	e.EmployeeID = field.NewUint(table, "employee_id")

	e.fillFieldMap()

	return e
}

func (e *employeeRole) WithContext(ctx context.Context) IEmployeeRoleDo {
	return e.employeeRoleDo.WithContext(ctx)
}

func (e employeeRole) TableName() string { return e.employeeRoleDo.TableName() }

func (e employeeRole) Alias() string { return e.employeeRoleDo.Alias() }

func (e employeeRole) Columns(cols ...field.Expr) gen.Columns {
	return e.employeeRoleDo.Columns(cols...)
}

func (e *employeeRole) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := e.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (e *employeeRole) fillFieldMap() {
	e.fieldMap = make(map[string]field.Expr, 2)
	e.fieldMap["role_id"] = e.RoleID
	e.fieldMap["employee_id"] = e.EmployeeID
}

func (e employeeRole) clone(db *gorm.DB) employeeRole {
	e.employeeRoleDo.ReplaceConnPool(db.Statement.ConnPool)
	return e
}

func (e employeeRole) replaceDB(db *gorm.DB) employeeRole {
	e.employeeRoleDo.ReplaceDB(db)
	return e
}

type employeeRoleDo struct{ gen.DO }

type IEmployeeRoleDo interface {
	gen.SubQuery
	Debug() IEmployeeRoleDo
	WithContext(ctx context.Context) IEmployeeRoleDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IEmployeeRoleDo
	WriteDB() IEmployeeRoleDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IEmployeeRoleDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IEmployeeRoleDo
	Not(conds ...gen.Condition) IEmployeeRoleDo
	Or(conds ...gen.Condition) IEmployeeRoleDo
	Select(conds ...field.Expr) IEmployeeRoleDo
	Where(conds ...gen.Condition) IEmployeeRoleDo
	Order(conds ...field.Expr) IEmployeeRoleDo
	Distinct(cols ...field.Expr) IEmployeeRoleDo
	Omit(cols ...field.Expr) IEmployeeRoleDo
	Join(table schema.Tabler, on ...field.Expr) IEmployeeRoleDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IEmployeeRoleDo
	RightJoin(table schema.Tabler, on ...field.Expr) IEmployeeRoleDo
	Group(cols ...field.Expr) IEmployeeRoleDo
	Having(conds ...gen.Condition) IEmployeeRoleDo
	Limit(limit int) IEmployeeRoleDo
	Offset(offset int) IEmployeeRoleDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IEmployeeRoleDo
	Unscoped() IEmployeeRoleDo
	Create(values ...*types.EmployeeRole) error
	CreateInBatches(values []*types.EmployeeRole, batchSize int) error
	Save(values ...*types.EmployeeRole) error
	First() (*types.EmployeeRole, error)
	Take() (*types.EmployeeRole, error)
	Last() (*types.EmployeeRole, error)
	Find() ([]*types.EmployeeRole, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*types.EmployeeRole, err error)
	FindInBatches(result *[]*types.EmployeeRole, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*types.EmployeeRole) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IEmployeeRoleDo
	Assign(attrs ...field.AssignExpr) IEmployeeRoleDo
	Joins(fields ...field.RelationField) IEmployeeRoleDo
	Preload(fields ...field.RelationField) IEmployeeRoleDo
	FirstOrInit() (*types.EmployeeRole, error)
	FirstOrCreate() (*types.EmployeeRole, error)
	FindByPage(offset int, limit int) (result []*types.EmployeeRole, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IEmployeeRoleDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (e employeeRoleDo) Debug() IEmployeeRoleDo {
	return e.withDO(e.DO.Debug())
}

func (e employeeRoleDo) WithContext(ctx context.Context) IEmployeeRoleDo {
	return e.withDO(e.DO.WithContext(ctx))
}

func (e employeeRoleDo) ReadDB() IEmployeeRoleDo {
	return e.Clauses(dbresolver.Read)
}

func (e employeeRoleDo) WriteDB() IEmployeeRoleDo {
	return e.Clauses(dbresolver.Write)
}

func (e employeeRoleDo) Session(config *gorm.Session) IEmployeeRoleDo {
	return e.withDO(e.DO.Session(config))
}

func (e employeeRoleDo) Clauses(conds ...clause.Expression) IEmployeeRoleDo {
	return e.withDO(e.DO.Clauses(conds...))
}

func (e employeeRoleDo) Returning(value interface{}, columns ...string) IEmployeeRoleDo {
	return e.withDO(e.DO.Returning(value, columns...))
}

func (e employeeRoleDo) Not(conds ...gen.Condition) IEmployeeRoleDo {
	return e.withDO(e.DO.Not(conds...))
}

func (e employeeRoleDo) Or(conds ...gen.Condition) IEmployeeRoleDo {
	return e.withDO(e.DO.Or(conds...))
}

func (e employeeRoleDo) Select(conds ...field.Expr) IEmployeeRoleDo {
	return e.withDO(e.DO.Select(conds...))
}

func (e employeeRoleDo) Where(conds ...gen.Condition) IEmployeeRoleDo {
	return e.withDO(e.DO.Where(conds...))
}

func (e employeeRoleDo) Order(conds ...field.Expr) IEmployeeRoleDo {
	return e.withDO(e.DO.Order(conds...))
}

func (e employeeRoleDo) Distinct(cols ...field.Expr) IEmployeeRoleDo {
	return e.withDO(e.DO.Distinct(cols...))
}

func (e employeeRoleDo) Omit(cols ...field.Expr) IEmployeeRoleDo {
	return e.withDO(e.DO.Omit(cols...))
}

func (e employeeRoleDo) Join(table schema.Tabler, on ...field.Expr) IEmployeeRoleDo {
	return e.withDO(e.DO.Join(table, on...))
}

func (e employeeRoleDo) LeftJoin(table schema.Tabler, on ...field.Expr) IEmployeeRoleDo {
	return e.withDO(e.DO.LeftJoin(table, on...))
}

func (e employeeRoleDo) RightJoin(table schema.Tabler, on ...field.Expr) IEmployeeRoleDo {
	return e.withDO(e.DO.RightJoin(table, on...))
}

func (e employeeRoleDo) Group(cols ...field.Expr) IEmployeeRoleDo {
	return e.withDO(e.DO.Group(cols...))
}

func (e employeeRoleDo) Having(conds ...gen.Condition) IEmployeeRoleDo {
	return e.withDO(e.DO.Having(conds...))
}

func (e employeeRoleDo) Limit(limit int) IEmployeeRoleDo {
	return e.withDO(e.DO.Limit(limit))
}

func (e employeeRoleDo) Offset(offset int) IEmployeeRoleDo {
	return e.withDO(e.DO.Offset(offset))
}

func (e employeeRoleDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IEmployeeRoleDo {
	return e.withDO(e.DO.Scopes(funcs...))
}

func (e employeeRoleDo) Unscoped() IEmployeeRoleDo {
	return e.withDO(e.DO.Unscoped())
}

func (e employeeRoleDo) Create(values ...*types.EmployeeRole) error {
	if len(values) == 0 {
		return nil
	}
	return e.DO.Create(values)
}

func (e employeeRoleDo) CreateInBatches(values []*types.EmployeeRole, batchSize int) error {
	return e.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (e employeeRoleDo) Save(values ...*types.EmployeeRole) error {
	if len(values) == 0 {
		return nil
	}
	return e.DO.Save(values)
}

func (e employeeRoleDo) First() (*types.EmployeeRole, error) {
	if result, err := e.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*types.EmployeeRole), nil
	}
}

func (e employeeRoleDo) Take() (*types.EmployeeRole, error) {
	if result, err := e.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*types.EmployeeRole), nil
	}
}

func (e employeeRoleDo) Last() (*types.EmployeeRole, error) {
	if result, err := e.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*types.EmployeeRole), nil
	}
}

func (e employeeRoleDo) Find() ([]*types.EmployeeRole, error) {
	result, err := e.DO.Find()
	return result.([]*types.EmployeeRole), err
}

func (e employeeRoleDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*types.EmployeeRole, err error) {
	buf := make([]*types.EmployeeRole, 0, batchSize)
	err = e.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (e employeeRoleDo) FindInBatches(result *[]*types.EmployeeRole, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return e.DO.FindInBatches(result, batchSize, fc)
}

func (e employeeRoleDo) Attrs(attrs ...field.AssignExpr) IEmployeeRoleDo {
	return e.withDO(e.DO.Attrs(attrs...))
}

func (e employeeRoleDo) Assign(attrs ...field.AssignExpr) IEmployeeRoleDo {
	return e.withDO(e.DO.Assign(attrs...))
}

func (e employeeRoleDo) Joins(fields ...field.RelationField) IEmployeeRoleDo {
	for _, _f := range fields {
		e = *e.withDO(e.DO.Joins(_f))
	}
	return &e
}

func (e employeeRoleDo) Preload(fields ...field.RelationField) IEmployeeRoleDo {
	for _, _f := range fields {
		e = *e.withDO(e.DO.Preload(_f))
	}
	return &e
}

func (e employeeRoleDo) FirstOrInit() (*types.EmployeeRole, error) {
	if result, err := e.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*types.EmployeeRole), nil
	}
}

func (e employeeRoleDo) FirstOrCreate() (*types.EmployeeRole, error) {
	if result, err := e.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*types.EmployeeRole), nil
	}
}

func (e employeeRoleDo) FindByPage(offset int, limit int) (result []*types.EmployeeRole, count int64, err error) {
	result, err = e.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = e.Offset(-1).Limit(-1).Count()
	return
}

func (e employeeRoleDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = e.Count()
	if err != nil {
		return
	}

	err = e.Offset(offset).Limit(limit).Scan(result)
	return
}

func (e employeeRoleDo) Scan(result interface{}) (err error) {
	return e.DO.Scan(result)
}

func (e employeeRoleDo) Delete(models ...*types.EmployeeRole) (result gen.ResultInfo, err error) {
	return e.DO.Delete(models)
}

func (e *employeeRoleDo) withDO(do gen.Dao) *employeeRoleDo {
	e.DO = *do.(*gen.DO)
	return e
}
