// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"hrapi/internal/types"
	"strings"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"
)

func newMenu(db *gorm.DB, opts ...gen.DOOption) menu {
	_menu := menu{}

	_menu.menuDo.UseDB(db, opts...)
	_menu.menuDo.UseModel(&types.Menu{})

	tableName := _menu.menuDo.TableName()
	_menu.ALL = field.NewAsterisk(tableName)
	_menu.ID = field.NewUint(tableName, "id")
	_menu.CreatedAt = field.NewTime(tableName, "created_at")
	_menu.UpdatedAt = field.NewTime(tableName, "updated_at")
	_menu.DeletedAt = field.NewField(tableName, "deleted_at")
	_menu.Type = field.NewField(tableName, "type")
	_menu.Show = field.NewField(tableName, "show")
	_menu.ParentID = field.NewUint(tableName, "parent_id")
	_menu.Path = field.NewString(tableName, "path")
	_menu.Name = field.NewString(tableName, "name")
	_menu.Component = field.NewString(tableName, "component")
	_menu.Redirect = field.NewString(tableName, "redirect")
	_menu.Sort = field.NewInt(tableName, "sort")
	_menu.Status = field.NewBool(tableName, "status")
	_menu.Title = field.NewString(tableName, "title")
	_menu.DynamicLevel = field.NewInt(tableName, "dynamic_level")
	_menu.RealPath = field.NewString(tableName, "real_path")
	_menu.IgnoreKeepAlive = field.NewBool(tableName, "ignore_keep_alive")
	_menu.Affix = field.NewBool(tableName, "affix")
	_menu.Icon = field.NewString(tableName, "icon")
	_menu.FrameSrc = field.NewString(tableName, "frame_src")
	_menu.TransitionName = field.NewString(tableName, "transition_name")
	_menu.HideBreadcrumb = field.NewBool(tableName, "hide_breadcrumb")
	_menu.CarryParam = field.NewBool(tableName, "carry_param")
	_menu.HideChildrenInMenu = field.NewBool(tableName, "hide_children_in_menu")
	_menu.CurrentActiveMenu = field.NewString(tableName, "current_active_menu")
	_menu.HideTab = field.NewBool(tableName, "hide_tab")
	_menu.HideMenu = field.NewBool(tableName, "hide_menu")
	_menu.IgnoreRoute = field.NewBool(tableName, "ignore_route")
	_menu.HidePathForChildren = field.NewBool(tableName, "hide_path_for_children")
	_menu.Roles = menuManyToManyRoles{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Roles", "types.Role"),
		Employees: struct {
			field.RelationField
			Department struct {
				field.RelationField
				Manager struct {
					field.RelationField
				}
			}
			LoginInformation struct {
				field.RelationField
				Employee struct {
					field.RelationField
				}
			}
			Roles struct {
				field.RelationField
			}
		}{
			RelationField: field.NewRelation("Roles.Employees", "types.Employee"),
			Department: struct {
				field.RelationField
				Manager struct {
					field.RelationField
				}
			}{
				RelationField: field.NewRelation("Roles.Employees.Department", "types.Department"),
				Manager: struct {
					field.RelationField
				}{
					RelationField: field.NewRelation("Roles.Employees.Department.Manager", "types.Employee"),
				},
			},
			LoginInformation: struct {
				field.RelationField
				Employee struct {
					field.RelationField
				}
			}{
				RelationField: field.NewRelation("Roles.Employees.LoginInformation", "types.LoginInformation"),
				Employee: struct {
					field.RelationField
				}{
					RelationField: field.NewRelation("Roles.Employees.LoginInformation.Employee", "types.Employee"),
				},
			},
			Roles: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("Roles.Employees.Roles", "types.Role"),
			},
		},
		Permissions: struct {
			field.RelationField
			Roles struct {
				field.RelationField
			}
		}{
			RelationField: field.NewRelation("Roles.Permissions", "types.Permission"),
			Roles: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("Roles.Permissions.Roles", "types.Role"),
			},
		},
		Menus: struct {
			field.RelationField
			Roles struct {
				field.RelationField
			}
		}{
			RelationField: field.NewRelation("Roles.Menus", "types.Menu"),
			Roles: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("Roles.Menus.Roles", "types.Role"),
			},
		},
	}

	_menu.fillFieldMap()

	return _menu
}

type menu struct {
	menuDo menuDo

	ALL                 field.Asterisk
	ID                  field.Uint
	CreatedAt           field.Time
	UpdatedAt           field.Time
	DeletedAt           field.Field
	Type                field.Field
	Show                field.Field
	ParentID            field.Uint
	Path                field.String
	Name                field.String
	Component           field.String
	Redirect            field.String
	Sort                field.Int
	Status              field.Bool
	Title               field.String
	DynamicLevel        field.Int
	RealPath            field.String
	IgnoreKeepAlive     field.Bool
	Affix               field.Bool
	Icon                field.String
	FrameSrc            field.String
	TransitionName      field.String
	HideBreadcrumb      field.Bool
	CarryParam          field.Bool
	HideChildrenInMenu  field.Bool
	CurrentActiveMenu   field.String
	HideTab             field.Bool
	HideMenu            field.Bool
	IgnoreRoute         field.Bool
	HidePathForChildren field.Bool
	Roles               menuManyToManyRoles

	fieldMap map[string]field.Expr
}

func (m menu) Table(newTableName string) *menu {
	m.menuDo.UseTable(newTableName)
	return m.updateTableName(newTableName)
}

func (m menu) As(alias string) *menu {
	m.menuDo.DO = *(m.menuDo.As(alias).(*gen.DO))
	return m.updateTableName(alias)
}

func (m *menu) updateTableName(table string) *menu {
	m.ALL = field.NewAsterisk(table)
	m.ID = field.NewUint(table, "id")
	m.CreatedAt = field.NewTime(table, "created_at")
	m.UpdatedAt = field.NewTime(table, "updated_at")
	m.DeletedAt = field.NewField(table, "deleted_at")
	m.Type = field.NewField(table, "type")
	m.Show = field.NewField(table, "show")
	m.ParentID = field.NewUint(table, "parent_id")
	m.Path = field.NewString(table, "path")
	m.Name = field.NewString(table, "name")
	m.Component = field.NewString(table, "component")
	m.Redirect = field.NewString(table, "redirect")
	m.Sort = field.NewInt(table, "sort")
	m.Status = field.NewBool(table, "status")
	m.Title = field.NewString(table, "title")
	m.DynamicLevel = field.NewInt(table, "dynamic_level")
	m.RealPath = field.NewString(table, "real_path")
	m.IgnoreKeepAlive = field.NewBool(table, "ignore_keep_alive")
	m.Affix = field.NewBool(table, "affix")
	m.Icon = field.NewString(table, "icon")
	m.FrameSrc = field.NewString(table, "frame_src")
	m.TransitionName = field.NewString(table, "transition_name")
	m.HideBreadcrumb = field.NewBool(table, "hide_breadcrumb")
	m.CarryParam = field.NewBool(table, "carry_param")
	m.HideChildrenInMenu = field.NewBool(table, "hide_children_in_menu")
	m.CurrentActiveMenu = field.NewString(table, "current_active_menu")
	m.HideTab = field.NewBool(table, "hide_tab")
	m.HideMenu = field.NewBool(table, "hide_menu")
	m.IgnoreRoute = field.NewBool(table, "ignore_route")
	m.HidePathForChildren = field.NewBool(table, "hide_path_for_children")

	m.fillFieldMap()

	return m
}

func (m *menu) WithContext(ctx context.Context) IMenuDo { return m.menuDo.WithContext(ctx) }

func (m menu) TableName() string { return m.menuDo.TableName() }

func (m menu) Alias() string { return m.menuDo.Alias() }

func (m menu) Columns(cols ...field.Expr) gen.Columns { return m.menuDo.Columns(cols...) }

func (m *menu) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := m.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (m *menu) fillFieldMap() {
	m.fieldMap = make(map[string]field.Expr, 30)
	m.fieldMap["id"] = m.ID
	m.fieldMap["created_at"] = m.CreatedAt
	m.fieldMap["updated_at"] = m.UpdatedAt
	m.fieldMap["deleted_at"] = m.DeletedAt
	m.fieldMap["type"] = m.Type
	m.fieldMap["show"] = m.Show
	m.fieldMap["parent_id"] = m.ParentID
	m.fieldMap["path"] = m.Path
	m.fieldMap["name"] = m.Name
	m.fieldMap["component"] = m.Component
	m.fieldMap["redirect"] = m.Redirect
	m.fieldMap["sort"] = m.Sort
	m.fieldMap["status"] = m.Status
	m.fieldMap["title"] = m.Title
	m.fieldMap["dynamic_level"] = m.DynamicLevel
	m.fieldMap["real_path"] = m.RealPath
	m.fieldMap["ignore_keep_alive"] = m.IgnoreKeepAlive
	m.fieldMap["affix"] = m.Affix
	m.fieldMap["icon"] = m.Icon
	m.fieldMap["frame_src"] = m.FrameSrc
	m.fieldMap["transition_name"] = m.TransitionName
	m.fieldMap["hide_breadcrumb"] = m.HideBreadcrumb
	m.fieldMap["carry_param"] = m.CarryParam
	m.fieldMap["hide_children_in_menu"] = m.HideChildrenInMenu
	m.fieldMap["current_active_menu"] = m.CurrentActiveMenu
	m.fieldMap["hide_tab"] = m.HideTab
	m.fieldMap["hide_menu"] = m.HideMenu
	m.fieldMap["ignore_route"] = m.IgnoreRoute
	m.fieldMap["hide_path_for_children"] = m.HidePathForChildren

}

func (m menu) clone(db *gorm.DB) menu {
	m.menuDo.ReplaceConnPool(db.Statement.ConnPool)
	return m
}

func (m menu) replaceDB(db *gorm.DB) menu {
	m.menuDo.ReplaceDB(db)
	return m
}

type menuManyToManyRoles struct {
	db *gorm.DB

	field.RelationField

	Employees struct {
		field.RelationField
		Department struct {
			field.RelationField
			Manager struct {
				field.RelationField
			}
		}
		LoginInformation struct {
			field.RelationField
			Employee struct {
				field.RelationField
			}
		}
		Roles struct {
			field.RelationField
		}
	}
	Permissions struct {
		field.RelationField
		Roles struct {
			field.RelationField
		}
	}
	Menus struct {
		field.RelationField
		Roles struct {
			field.RelationField
		}
	}
}

func (a menuManyToManyRoles) Where(conds ...field.Expr) *menuManyToManyRoles {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a menuManyToManyRoles) WithContext(ctx context.Context) *menuManyToManyRoles {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a menuManyToManyRoles) Session(session *gorm.Session) *menuManyToManyRoles {
	a.db = a.db.Session(session)
	return &a
}

func (a menuManyToManyRoles) Model(m *types.Menu) *menuManyToManyRolesTx {
	return &menuManyToManyRolesTx{a.db.Model(m).Association(a.Name())}
}

type menuManyToManyRolesTx struct{ tx *gorm.Association }

func (a menuManyToManyRolesTx) Find() (result []*types.Role, err error) {
	return result, a.tx.Find(&result)
}

func (a menuManyToManyRolesTx) Append(values ...*types.Role) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a menuManyToManyRolesTx) Replace(values ...*types.Role) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a menuManyToManyRolesTx) Delete(values ...*types.Role) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a menuManyToManyRolesTx) Clear() error {
	return a.tx.Clear()
}

func (a menuManyToManyRolesTx) Count() int64 {
	return a.tx.Count()
}

type menuDo struct{ gen.DO }

type IMenuDo interface {
	gen.SubQuery
	Debug() IMenuDo
	WithContext(ctx context.Context) IMenuDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IMenuDo
	WriteDB() IMenuDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IMenuDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IMenuDo
	Not(conds ...gen.Condition) IMenuDo
	Or(conds ...gen.Condition) IMenuDo
	Select(conds ...field.Expr) IMenuDo
	Where(conds ...gen.Condition) IMenuDo
	Order(conds ...field.Expr) IMenuDo
	Distinct(cols ...field.Expr) IMenuDo
	Omit(cols ...field.Expr) IMenuDo
	Join(table schema.Tabler, on ...field.Expr) IMenuDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IMenuDo
	RightJoin(table schema.Tabler, on ...field.Expr) IMenuDo
	Group(cols ...field.Expr) IMenuDo
	Having(conds ...gen.Condition) IMenuDo
	Limit(limit int) IMenuDo
	Offset(offset int) IMenuDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IMenuDo
	Unscoped() IMenuDo
	Create(values ...*types.Menu) error
	CreateInBatches(values []*types.Menu, batchSize int) error
	Save(values ...*types.Menu) error
	First() (*types.Menu, error)
	Take() (*types.Menu, error)
	Last() (*types.Menu, error)
	Find() ([]*types.Menu, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*types.Menu, err error)
	FindInBatches(result *[]*types.Menu, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*types.Menu) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IMenuDo
	Assign(attrs ...field.AssignExpr) IMenuDo
	Joins(fields ...field.RelationField) IMenuDo
	Preload(fields ...field.RelationField) IMenuDo
	FirstOrInit() (*types.Menu, error)
	FirstOrCreate() (*types.Menu, error)
	FindByPage(offset int, limit int) (result []*types.Menu, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IMenuDo
	UnderlyingDB() *gorm.DB
	schema.Tabler

	QueryAllRelated(menuIDs []uint) (result []uint, err error)
}

// with tree as (
//
//	select id,
//	       parent_id,
//	       convert(nvarchar(150),CONCAT('.',id,'.')) as path
//	from @@table where parent_id = 0
//	union all
//	select data.id,
//	       data.parent_id,
//	       Convert(nvarchar(150),CONCAT(tree.Path , '-','.',data.id,'.')) as Path
//	from @@table data
//	join tree tree on data.parent_id = tree.id and tree.path not like '%' + CONCAT('.',data.Id,'.') + '%'
//
// )
// select distinct convert(bigint, replace(s.value, '.', ”)) as id from tree t
// cross apply STRING_SPLIT(t.path, '-') s
// where t.id in @menuIDs
func (m menuDo) QueryAllRelated(menuIDs []uint) (result []uint, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	params = append(params, menuIDs)
	generateSQL.WriteString("with tree as ( select id, parent_id, convert(nvarchar(150),CONCAT('.',id,'.')) as path from menu where parent_id = 0 union all select data.id, data.parent_id, Convert(nvarchar(150),CONCAT(tree.Path , '-','.',data.id,'.')) as Path from menu data join tree tree on data.parent_id = tree.id and tree.path not like '%' + CONCAT('.',data.Id,'.') + '%' ) select distinct convert(bigint, replace(s.value, '.', '')) as id from tree t cross apply STRING_SPLIT(t.path, '-') s where t.id in ? ")

	var executeSQL *gorm.DB
	executeSQL = m.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

func (m menuDo) Debug() IMenuDo {
	return m.withDO(m.DO.Debug())
}

func (m menuDo) WithContext(ctx context.Context) IMenuDo {
	return m.withDO(m.DO.WithContext(ctx))
}

func (m menuDo) ReadDB() IMenuDo {
	return m.Clauses(dbresolver.Read)
}

func (m menuDo) WriteDB() IMenuDo {
	return m.Clauses(dbresolver.Write)
}

func (m menuDo) Session(config *gorm.Session) IMenuDo {
	return m.withDO(m.DO.Session(config))
}

func (m menuDo) Clauses(conds ...clause.Expression) IMenuDo {
	return m.withDO(m.DO.Clauses(conds...))
}

func (m menuDo) Returning(value interface{}, columns ...string) IMenuDo {
	return m.withDO(m.DO.Returning(value, columns...))
}

func (m menuDo) Not(conds ...gen.Condition) IMenuDo {
	return m.withDO(m.DO.Not(conds...))
}

func (m menuDo) Or(conds ...gen.Condition) IMenuDo {
	return m.withDO(m.DO.Or(conds...))
}

func (m menuDo) Select(conds ...field.Expr) IMenuDo {
	return m.withDO(m.DO.Select(conds...))
}

func (m menuDo) Where(conds ...gen.Condition) IMenuDo {
	return m.withDO(m.DO.Where(conds...))
}

func (m menuDo) Order(conds ...field.Expr) IMenuDo {
	return m.withDO(m.DO.Order(conds...))
}

func (m menuDo) Distinct(cols ...field.Expr) IMenuDo {
	return m.withDO(m.DO.Distinct(cols...))
}

func (m menuDo) Omit(cols ...field.Expr) IMenuDo {
	return m.withDO(m.DO.Omit(cols...))
}

func (m menuDo) Join(table schema.Tabler, on ...field.Expr) IMenuDo {
	return m.withDO(m.DO.Join(table, on...))
}

func (m menuDo) LeftJoin(table schema.Tabler, on ...field.Expr) IMenuDo {
	return m.withDO(m.DO.LeftJoin(table, on...))
}

func (m menuDo) RightJoin(table schema.Tabler, on ...field.Expr) IMenuDo {
	return m.withDO(m.DO.RightJoin(table, on...))
}

func (m menuDo) Group(cols ...field.Expr) IMenuDo {
	return m.withDO(m.DO.Group(cols...))
}

func (m menuDo) Having(conds ...gen.Condition) IMenuDo {
	return m.withDO(m.DO.Having(conds...))
}

func (m menuDo) Limit(limit int) IMenuDo {
	return m.withDO(m.DO.Limit(limit))
}

func (m menuDo) Offset(offset int) IMenuDo {
	return m.withDO(m.DO.Offset(offset))
}

func (m menuDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IMenuDo {
	return m.withDO(m.DO.Scopes(funcs...))
}

func (m menuDo) Unscoped() IMenuDo {
	return m.withDO(m.DO.Unscoped())
}

func (m menuDo) Create(values ...*types.Menu) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Create(values)
}

func (m menuDo) CreateInBatches(values []*types.Menu, batchSize int) error {
	return m.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (m menuDo) Save(values ...*types.Menu) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Save(values)
}

func (m menuDo) First() (*types.Menu, error) {
	if result, err := m.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*types.Menu), nil
	}
}

func (m menuDo) Take() (*types.Menu, error) {
	if result, err := m.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*types.Menu), nil
	}
}

func (m menuDo) Last() (*types.Menu, error) {
	if result, err := m.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*types.Menu), nil
	}
}

func (m menuDo) Find() ([]*types.Menu, error) {
	result, err := m.DO.Find()
	return result.([]*types.Menu), err
}

func (m menuDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*types.Menu, err error) {
	buf := make([]*types.Menu, 0, batchSize)
	err = m.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (m menuDo) FindInBatches(result *[]*types.Menu, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return m.DO.FindInBatches(result, batchSize, fc)
}

func (m menuDo) Attrs(attrs ...field.AssignExpr) IMenuDo {
	return m.withDO(m.DO.Attrs(attrs...))
}

func (m menuDo) Assign(attrs ...field.AssignExpr) IMenuDo {
	return m.withDO(m.DO.Assign(attrs...))
}

func (m menuDo) Joins(fields ...field.RelationField) IMenuDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Joins(_f))
	}
	return &m
}

func (m menuDo) Preload(fields ...field.RelationField) IMenuDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Preload(_f))
	}
	return &m
}

func (m menuDo) FirstOrInit() (*types.Menu, error) {
	if result, err := m.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*types.Menu), nil
	}
}

func (m menuDo) FirstOrCreate() (*types.Menu, error) {
	if result, err := m.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*types.Menu), nil
	}
}

func (m menuDo) FindByPage(offset int, limit int) (result []*types.Menu, count int64, err error) {
	result, err = m.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = m.Offset(-1).Limit(-1).Count()
	return
}

func (m menuDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = m.Count()
	if err != nil {
		return
	}

	err = m.Offset(offset).Limit(limit).Scan(result)
	return
}

func (m menuDo) Scan(result interface{}) (err error) {
	return m.DO.Scan(result)
}

func (m menuDo) Delete(models ...*types.Menu) (result gen.ResultInfo, err error) {
	return m.DO.Delete(models)
}

func (m *menuDo) withDO(do gen.Dao) *menuDo {
	m.DO = *do.(*gen.DO)
	return m
}
