// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"hrapi/internal/types"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"
)

func newVacation(db *gorm.DB, opts ...gen.DOOption) vacation {
	_vacation := vacation{}

	_vacation.vacationDo.UseDB(db, opts...)
	_vacation.vacationDo.UseModel(&types.Vacation{})

	tableName := _vacation.vacationDo.TableName()
	_vacation.ALL = field.NewAsterisk(tableName)
	_vacation.ID = field.NewUint(tableName, "id")
	_vacation.CreatedAt = field.NewTime(tableName, "created_at")
	_vacation.UpdatedAt = field.NewTime(tableName, "updated_at")
	_vacation.DeletedAt = field.NewField(tableName, "deleted_at")
	_vacation.Code = field.NewString(tableName, "code")
	_vacation.Name = field.NewString(tableName, "name")
	_vacation.Status = field.NewBool(tableName, "status")
	_vacation.Remark = field.NewString(tableName, "remark")
	_vacation.Color = field.NewString(tableName, "color")
	_vacation.Weight = field.NewInt(tableName, "weight")
	_vacation.Schedule = vacationHasManySchedule{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Schedule", "types.VacationSchedule"),
		Vacation: struct {
			field.RelationField
			Schedule struct {
				field.RelationField
			}
			VacationGroup struct {
				field.RelationField
				Vacation struct {
					field.RelationField
				}
				VacationGroupOvertimeRate struct {
					field.RelationField
					VacationGroup struct {
						field.RelationField
						Leave struct {
							field.RelationField
							LeaveGroup struct {
								field.RelationField
							}
						}
						LeaveGroupCondition struct {
							field.RelationField
							LeaveGroup struct {
								field.RelationField
							}
						}
						Employee struct {
							field.RelationField
							Department struct {
								field.RelationField
								Manager struct {
									field.RelationField
								}
							}
							Rank struct {
								field.RelationField
								Grade struct {
									field.RelationField
									Rank struct {
										field.RelationField
									}
								}
							}
							Grade struct {
								field.RelationField
							}
							LoginInformation struct {
								field.RelationField
								Employee struct {
									field.RelationField
								}
							}
							Roles struct {
								field.RelationField
								Employees struct {
									field.RelationField
								}
								Permissions struct {
									field.RelationField
									Roles struct {
										field.RelationField
									}
								}
								Menus struct {
									field.RelationField
									Roles struct {
										field.RelationField
									}
								}
							}
						}
					}
				}
				Employee struct {
					field.RelationField
				}
			}
		}{
			RelationField: field.NewRelation("Schedule.Vacation", "types.Vacation"),
			Schedule: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("Schedule.Vacation.Schedule", "types.VacationSchedule"),
			},
			VacationGroup: struct {
				field.RelationField
				Vacation struct {
					field.RelationField
				}
				VacationGroupOvertimeRate struct {
					field.RelationField
					VacationGroup struct {
						field.RelationField
						Leave struct {
							field.RelationField
							LeaveGroup struct {
								field.RelationField
							}
						}
						LeaveGroupCondition struct {
							field.RelationField
							LeaveGroup struct {
								field.RelationField
							}
						}
						Employee struct {
							field.RelationField
							Department struct {
								field.RelationField
								Manager struct {
									field.RelationField
								}
							}
							Rank struct {
								field.RelationField
								Grade struct {
									field.RelationField
									Rank struct {
										field.RelationField
									}
								}
							}
							Grade struct {
								field.RelationField
							}
							LoginInformation struct {
								field.RelationField
								Employee struct {
									field.RelationField
								}
							}
							Roles struct {
								field.RelationField
								Employees struct {
									field.RelationField
								}
								Permissions struct {
									field.RelationField
									Roles struct {
										field.RelationField
									}
								}
								Menus struct {
									field.RelationField
									Roles struct {
										field.RelationField
									}
								}
							}
						}
					}
				}
				Employee struct {
					field.RelationField
				}
			}{
				RelationField: field.NewRelation("Schedule.Vacation.VacationGroup", "types.VacationGroup"),
				Vacation: struct {
					field.RelationField
				}{
					RelationField: field.NewRelation("Schedule.Vacation.VacationGroup.Vacation", "types.Vacation"),
				},
				VacationGroupOvertimeRate: struct {
					field.RelationField
					VacationGroup struct {
						field.RelationField
						Leave struct {
							field.RelationField
							LeaveGroup struct {
								field.RelationField
							}
						}
						LeaveGroupCondition struct {
							field.RelationField
							LeaveGroup struct {
								field.RelationField
							}
						}
						Employee struct {
							field.RelationField
							Department struct {
								field.RelationField
								Manager struct {
									field.RelationField
								}
							}
							Rank struct {
								field.RelationField
								Grade struct {
									field.RelationField
									Rank struct {
										field.RelationField
									}
								}
							}
							Grade struct {
								field.RelationField
							}
							LoginInformation struct {
								field.RelationField
								Employee struct {
									field.RelationField
								}
							}
							Roles struct {
								field.RelationField
								Employees struct {
									field.RelationField
								}
								Permissions struct {
									field.RelationField
									Roles struct {
										field.RelationField
									}
								}
								Menus struct {
									field.RelationField
									Roles struct {
										field.RelationField
									}
								}
							}
						}
					}
				}{
					RelationField: field.NewRelation("Schedule.Vacation.VacationGroup.VacationGroupOvertimeRate", "types.VacationGroupOvertimeRate"),
					VacationGroup: struct {
						field.RelationField
						Leave struct {
							field.RelationField
							LeaveGroup struct {
								field.RelationField
							}
						}
						LeaveGroupCondition struct {
							field.RelationField
							LeaveGroup struct {
								field.RelationField
							}
						}
						Employee struct {
							field.RelationField
							Department struct {
								field.RelationField
								Manager struct {
									field.RelationField
								}
							}
							Rank struct {
								field.RelationField
								Grade struct {
									field.RelationField
									Rank struct {
										field.RelationField
									}
								}
							}
							Grade struct {
								field.RelationField
							}
							LoginInformation struct {
								field.RelationField
								Employee struct {
									field.RelationField
								}
							}
							Roles struct {
								field.RelationField
								Employees struct {
									field.RelationField
								}
								Permissions struct {
									field.RelationField
									Roles struct {
										field.RelationField
									}
								}
								Menus struct {
									field.RelationField
									Roles struct {
										field.RelationField
									}
								}
							}
						}
					}{
						RelationField: field.NewRelation("Schedule.Vacation.VacationGroup.VacationGroupOvertimeRate.VacationGroup", "types.LeaveGroup"),
						Leave: struct {
							field.RelationField
							LeaveGroup struct {
								field.RelationField
							}
						}{
							RelationField: field.NewRelation("Schedule.Vacation.VacationGroup.VacationGroupOvertimeRate.VacationGroup.Leave", "types.Leave"),
							LeaveGroup: struct {
								field.RelationField
							}{
								RelationField: field.NewRelation("Schedule.Vacation.VacationGroup.VacationGroupOvertimeRate.VacationGroup.Leave.LeaveGroup", "types.LeaveGroup"),
							},
						},
						LeaveGroupCondition: struct {
							field.RelationField
							LeaveGroup struct {
								field.RelationField
							}
						}{
							RelationField: field.NewRelation("Schedule.Vacation.VacationGroup.VacationGroupOvertimeRate.VacationGroup.LeaveGroupCondition", "types.LeaveGroupCondition"),
							LeaveGroup: struct {
								field.RelationField
							}{
								RelationField: field.NewRelation("Schedule.Vacation.VacationGroup.VacationGroupOvertimeRate.VacationGroup.LeaveGroupCondition.LeaveGroup", "types.LeaveGroup"),
							},
						},
						Employee: struct {
							field.RelationField
							Department struct {
								field.RelationField
								Manager struct {
									field.RelationField
								}
							}
							Rank struct {
								field.RelationField
								Grade struct {
									field.RelationField
									Rank struct {
										field.RelationField
									}
								}
							}
							Grade struct {
								field.RelationField
							}
							LoginInformation struct {
								field.RelationField
								Employee struct {
									field.RelationField
								}
							}
							Roles struct {
								field.RelationField
								Employees struct {
									field.RelationField
								}
								Permissions struct {
									field.RelationField
									Roles struct {
										field.RelationField
									}
								}
								Menus struct {
									field.RelationField
									Roles struct {
										field.RelationField
									}
								}
							}
						}{
							RelationField: field.NewRelation("Schedule.Vacation.VacationGroup.VacationGroupOvertimeRate.VacationGroup.Employee", "types.Employee"),
							Department: struct {
								field.RelationField
								Manager struct {
									field.RelationField
								}
							}{
								RelationField: field.NewRelation("Schedule.Vacation.VacationGroup.VacationGroupOvertimeRate.VacationGroup.Employee.Department", "types.Department"),
								Manager: struct {
									field.RelationField
								}{
									RelationField: field.NewRelation("Schedule.Vacation.VacationGroup.VacationGroupOvertimeRate.VacationGroup.Employee.Department.Manager", "types.Employee"),
								},
							},
							Rank: struct {
								field.RelationField
								Grade struct {
									field.RelationField
									Rank struct {
										field.RelationField
									}
								}
							}{
								RelationField: field.NewRelation("Schedule.Vacation.VacationGroup.VacationGroupOvertimeRate.VacationGroup.Employee.Rank", "types.PositionRank"),
								Grade: struct {
									field.RelationField
									Rank struct {
										field.RelationField
									}
								}{
									RelationField: field.NewRelation("Schedule.Vacation.VacationGroup.VacationGroupOvertimeRate.VacationGroup.Employee.Rank.Grade", "types.PositionGrade"),
									Rank: struct {
										field.RelationField
									}{
										RelationField: field.NewRelation("Schedule.Vacation.VacationGroup.VacationGroupOvertimeRate.VacationGroup.Employee.Rank.Grade.Rank", "types.PositionRank"),
									},
								},
							},
							Grade: struct {
								field.RelationField
							}{
								RelationField: field.NewRelation("Schedule.Vacation.VacationGroup.VacationGroupOvertimeRate.VacationGroup.Employee.Grade", "types.PositionGrade"),
							},
							LoginInformation: struct {
								field.RelationField
								Employee struct {
									field.RelationField
								}
							}{
								RelationField: field.NewRelation("Schedule.Vacation.VacationGroup.VacationGroupOvertimeRate.VacationGroup.Employee.LoginInformation", "types.LoginInformation"),
								Employee: struct {
									field.RelationField
								}{
									RelationField: field.NewRelation("Schedule.Vacation.VacationGroup.VacationGroupOvertimeRate.VacationGroup.Employee.LoginInformation.Employee", "types.Employee"),
								},
							},
							Roles: struct {
								field.RelationField
								Employees struct {
									field.RelationField
								}
								Permissions struct {
									field.RelationField
									Roles struct {
										field.RelationField
									}
								}
								Menus struct {
									field.RelationField
									Roles struct {
										field.RelationField
									}
								}
							}{
								RelationField: field.NewRelation("Schedule.Vacation.VacationGroup.VacationGroupOvertimeRate.VacationGroup.Employee.Roles", "types.Role"),
								Employees: struct {
									field.RelationField
								}{
									RelationField: field.NewRelation("Schedule.Vacation.VacationGroup.VacationGroupOvertimeRate.VacationGroup.Employee.Roles.Employees", "types.Employee"),
								},
								Permissions: struct {
									field.RelationField
									Roles struct {
										field.RelationField
									}
								}{
									RelationField: field.NewRelation("Schedule.Vacation.VacationGroup.VacationGroupOvertimeRate.VacationGroup.Employee.Roles.Permissions", "types.Permission"),
									Roles: struct {
										field.RelationField
									}{
										RelationField: field.NewRelation("Schedule.Vacation.VacationGroup.VacationGroupOvertimeRate.VacationGroup.Employee.Roles.Permissions.Roles", "types.Role"),
									},
								},
								Menus: struct {
									field.RelationField
									Roles struct {
										field.RelationField
									}
								}{
									RelationField: field.NewRelation("Schedule.Vacation.VacationGroup.VacationGroupOvertimeRate.VacationGroup.Employee.Roles.Menus", "types.Menu"),
									Roles: struct {
										field.RelationField
									}{
										RelationField: field.NewRelation("Schedule.Vacation.VacationGroup.VacationGroupOvertimeRate.VacationGroup.Employee.Roles.Menus.Roles", "types.Role"),
									},
								},
							},
						},
					},
				},
				Employee: struct {
					field.RelationField
				}{
					RelationField: field.NewRelation("Schedule.Vacation.VacationGroup.Employee", "types.Employee"),
				},
			},
		},
	}

	_vacation.VacationGroup = vacationHasManyVacationGroup{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("VacationGroup", "types.VacationGroup"),
	}

	_vacation.fillFieldMap()

	return _vacation
}

type vacation struct {
	vacationDo vacationDo

	ALL       field.Asterisk
	ID        field.Uint
	CreatedAt field.Time
	UpdatedAt field.Time
	DeletedAt field.Field
	Code      field.String
	Name      field.String
	Status    field.Bool
	Remark    field.String
	Color     field.String
	Weight    field.Int
	Schedule  vacationHasManySchedule

	VacationGroup vacationHasManyVacationGroup

	fieldMap map[string]field.Expr
}

func (v vacation) Table(newTableName string) *vacation {
	v.vacationDo.UseTable(newTableName)
	return v.updateTableName(newTableName)
}

func (v vacation) As(alias string) *vacation {
	v.vacationDo.DO = *(v.vacationDo.As(alias).(*gen.DO))
	return v.updateTableName(alias)
}

func (v *vacation) updateTableName(table string) *vacation {
	v.ALL = field.NewAsterisk(table)
	v.ID = field.NewUint(table, "id")
	v.CreatedAt = field.NewTime(table, "created_at")
	v.UpdatedAt = field.NewTime(table, "updated_at")
	v.DeletedAt = field.NewField(table, "deleted_at")
	v.Code = field.NewString(table, "code")
	v.Name = field.NewString(table, "name")
	v.Status = field.NewBool(table, "status")
	v.Remark = field.NewString(table, "remark")
	v.Color = field.NewString(table, "color")
	v.Weight = field.NewInt(table, "weight")

	v.fillFieldMap()

	return v
}

func (v *vacation) WithContext(ctx context.Context) IVacationDo { return v.vacationDo.WithContext(ctx) }

func (v vacation) TableName() string { return v.vacationDo.TableName() }

func (v vacation) Alias() string { return v.vacationDo.Alias() }

func (v vacation) Columns(cols ...field.Expr) gen.Columns { return v.vacationDo.Columns(cols...) }

func (v *vacation) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := v.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (v *vacation) fillFieldMap() {
	v.fieldMap = make(map[string]field.Expr, 12)
	v.fieldMap["id"] = v.ID
	v.fieldMap["created_at"] = v.CreatedAt
	v.fieldMap["updated_at"] = v.UpdatedAt
	v.fieldMap["deleted_at"] = v.DeletedAt
	v.fieldMap["code"] = v.Code
	v.fieldMap["name"] = v.Name
	v.fieldMap["status"] = v.Status
	v.fieldMap["remark"] = v.Remark
	v.fieldMap["color"] = v.Color
	v.fieldMap["weight"] = v.Weight

}

func (v vacation) clone(db *gorm.DB) vacation {
	v.vacationDo.ReplaceConnPool(db.Statement.ConnPool)
	return v
}

func (v vacation) replaceDB(db *gorm.DB) vacation {
	v.vacationDo.ReplaceDB(db)
	return v
}

type vacationHasManySchedule struct {
	db *gorm.DB

	field.RelationField

	Vacation struct {
		field.RelationField
		Schedule struct {
			field.RelationField
		}
		VacationGroup struct {
			field.RelationField
			Vacation struct {
				field.RelationField
			}
			VacationGroupOvertimeRate struct {
				field.RelationField
				VacationGroup struct {
					field.RelationField
					Leave struct {
						field.RelationField
						LeaveGroup struct {
							field.RelationField
						}
					}
					LeaveGroupCondition struct {
						field.RelationField
						LeaveGroup struct {
							field.RelationField
						}
					}
					Employee struct {
						field.RelationField
						Department struct {
							field.RelationField
							Manager struct {
								field.RelationField
							}
						}
						Rank struct {
							field.RelationField
							Grade struct {
								field.RelationField
								Rank struct {
									field.RelationField
								}
							}
						}
						Grade struct {
							field.RelationField
						}
						LoginInformation struct {
							field.RelationField
							Employee struct {
								field.RelationField
							}
						}
						Roles struct {
							field.RelationField
							Employees struct {
								field.RelationField
							}
							Permissions struct {
								field.RelationField
								Roles struct {
									field.RelationField
								}
							}
							Menus struct {
								field.RelationField
								Roles struct {
									field.RelationField
								}
							}
						}
					}
				}
			}
			Employee struct {
				field.RelationField
			}
		}
	}
}

func (a vacationHasManySchedule) Where(conds ...field.Expr) *vacationHasManySchedule {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a vacationHasManySchedule) WithContext(ctx context.Context) *vacationHasManySchedule {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a vacationHasManySchedule) Session(session *gorm.Session) *vacationHasManySchedule {
	a.db = a.db.Session(session)
	return &a
}

func (a vacationHasManySchedule) Model(m *types.Vacation) *vacationHasManyScheduleTx {
	return &vacationHasManyScheduleTx{a.db.Model(m).Association(a.Name())}
}

type vacationHasManyScheduleTx struct{ tx *gorm.Association }

func (a vacationHasManyScheduleTx) Find() (result []*types.VacationSchedule, err error) {
	return result, a.tx.Find(&result)
}

func (a vacationHasManyScheduleTx) Append(values ...*types.VacationSchedule) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a vacationHasManyScheduleTx) Replace(values ...*types.VacationSchedule) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a vacationHasManyScheduleTx) Delete(values ...*types.VacationSchedule) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a vacationHasManyScheduleTx) Clear() error {
	return a.tx.Clear()
}

func (a vacationHasManyScheduleTx) Count() int64 {
	return a.tx.Count()
}

type vacationHasManyVacationGroup struct {
	db *gorm.DB

	field.RelationField
}

func (a vacationHasManyVacationGroup) Where(conds ...field.Expr) *vacationHasManyVacationGroup {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a vacationHasManyVacationGroup) WithContext(ctx context.Context) *vacationHasManyVacationGroup {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a vacationHasManyVacationGroup) Session(session *gorm.Session) *vacationHasManyVacationGroup {
	a.db = a.db.Session(session)
	return &a
}

func (a vacationHasManyVacationGroup) Model(m *types.Vacation) *vacationHasManyVacationGroupTx {
	return &vacationHasManyVacationGroupTx{a.db.Model(m).Association(a.Name())}
}

type vacationHasManyVacationGroupTx struct{ tx *gorm.Association }

func (a vacationHasManyVacationGroupTx) Find() (result []*types.VacationGroup, err error) {
	return result, a.tx.Find(&result)
}

func (a vacationHasManyVacationGroupTx) Append(values ...*types.VacationGroup) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a vacationHasManyVacationGroupTx) Replace(values ...*types.VacationGroup) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a vacationHasManyVacationGroupTx) Delete(values ...*types.VacationGroup) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a vacationHasManyVacationGroupTx) Clear() error {
	return a.tx.Clear()
}

func (a vacationHasManyVacationGroupTx) Count() int64 {
	return a.tx.Count()
}

type vacationDo struct{ gen.DO }

type IVacationDo interface {
	gen.SubQuery
	Debug() IVacationDo
	WithContext(ctx context.Context) IVacationDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IVacationDo
	WriteDB() IVacationDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IVacationDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IVacationDo
	Not(conds ...gen.Condition) IVacationDo
	Or(conds ...gen.Condition) IVacationDo
	Select(conds ...field.Expr) IVacationDo
	Where(conds ...gen.Condition) IVacationDo
	Order(conds ...field.Expr) IVacationDo
	Distinct(cols ...field.Expr) IVacationDo
	Omit(cols ...field.Expr) IVacationDo
	Join(table schema.Tabler, on ...field.Expr) IVacationDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IVacationDo
	RightJoin(table schema.Tabler, on ...field.Expr) IVacationDo
	Group(cols ...field.Expr) IVacationDo
	Having(conds ...gen.Condition) IVacationDo
	Limit(limit int) IVacationDo
	Offset(offset int) IVacationDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IVacationDo
	Unscoped() IVacationDo
	Create(values ...*types.Vacation) error
	CreateInBatches(values []*types.Vacation, batchSize int) error
	Save(values ...*types.Vacation) error
	First() (*types.Vacation, error)
	Take() (*types.Vacation, error)
	Last() (*types.Vacation, error)
	Find() ([]*types.Vacation, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*types.Vacation, err error)
	FindInBatches(result *[]*types.Vacation, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*types.Vacation) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IVacationDo
	Assign(attrs ...field.AssignExpr) IVacationDo
	Joins(fields ...field.RelationField) IVacationDo
	Preload(fields ...field.RelationField) IVacationDo
	FirstOrInit() (*types.Vacation, error)
	FirstOrCreate() (*types.Vacation, error)
	FindByPage(offset int, limit int) (result []*types.Vacation, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IVacationDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (v vacationDo) Debug() IVacationDo {
	return v.withDO(v.DO.Debug())
}

func (v vacationDo) WithContext(ctx context.Context) IVacationDo {
	return v.withDO(v.DO.WithContext(ctx))
}

func (v vacationDo) ReadDB() IVacationDo {
	return v.Clauses(dbresolver.Read)
}

func (v vacationDo) WriteDB() IVacationDo {
	return v.Clauses(dbresolver.Write)
}

func (v vacationDo) Session(config *gorm.Session) IVacationDo {
	return v.withDO(v.DO.Session(config))
}

func (v vacationDo) Clauses(conds ...clause.Expression) IVacationDo {
	return v.withDO(v.DO.Clauses(conds...))
}

func (v vacationDo) Returning(value interface{}, columns ...string) IVacationDo {
	return v.withDO(v.DO.Returning(value, columns...))
}

func (v vacationDo) Not(conds ...gen.Condition) IVacationDo {
	return v.withDO(v.DO.Not(conds...))
}

func (v vacationDo) Or(conds ...gen.Condition) IVacationDo {
	return v.withDO(v.DO.Or(conds...))
}

func (v vacationDo) Select(conds ...field.Expr) IVacationDo {
	return v.withDO(v.DO.Select(conds...))
}

func (v vacationDo) Where(conds ...gen.Condition) IVacationDo {
	return v.withDO(v.DO.Where(conds...))
}

func (v vacationDo) Order(conds ...field.Expr) IVacationDo {
	return v.withDO(v.DO.Order(conds...))
}

func (v vacationDo) Distinct(cols ...field.Expr) IVacationDo {
	return v.withDO(v.DO.Distinct(cols...))
}

func (v vacationDo) Omit(cols ...field.Expr) IVacationDo {
	return v.withDO(v.DO.Omit(cols...))
}

func (v vacationDo) Join(table schema.Tabler, on ...field.Expr) IVacationDo {
	return v.withDO(v.DO.Join(table, on...))
}

func (v vacationDo) LeftJoin(table schema.Tabler, on ...field.Expr) IVacationDo {
	return v.withDO(v.DO.LeftJoin(table, on...))
}

func (v vacationDo) RightJoin(table schema.Tabler, on ...field.Expr) IVacationDo {
	return v.withDO(v.DO.RightJoin(table, on...))
}

func (v vacationDo) Group(cols ...field.Expr) IVacationDo {
	return v.withDO(v.DO.Group(cols...))
}

func (v vacationDo) Having(conds ...gen.Condition) IVacationDo {
	return v.withDO(v.DO.Having(conds...))
}

func (v vacationDo) Limit(limit int) IVacationDo {
	return v.withDO(v.DO.Limit(limit))
}

func (v vacationDo) Offset(offset int) IVacationDo {
	return v.withDO(v.DO.Offset(offset))
}

func (v vacationDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IVacationDo {
	return v.withDO(v.DO.Scopes(funcs...))
}

func (v vacationDo) Unscoped() IVacationDo {
	return v.withDO(v.DO.Unscoped())
}

func (v vacationDo) Create(values ...*types.Vacation) error {
	if len(values) == 0 {
		return nil
	}
	return v.DO.Create(values)
}

func (v vacationDo) CreateInBatches(values []*types.Vacation, batchSize int) error {
	return v.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (v vacationDo) Save(values ...*types.Vacation) error {
	if len(values) == 0 {
		return nil
	}
	return v.DO.Save(values)
}

func (v vacationDo) First() (*types.Vacation, error) {
	if result, err := v.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*types.Vacation), nil
	}
}

func (v vacationDo) Take() (*types.Vacation, error) {
	if result, err := v.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*types.Vacation), nil
	}
}

func (v vacationDo) Last() (*types.Vacation, error) {
	if result, err := v.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*types.Vacation), nil
	}
}

func (v vacationDo) Find() ([]*types.Vacation, error) {
	result, err := v.DO.Find()
	return result.([]*types.Vacation), err
}

func (v vacationDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*types.Vacation, err error) {
	buf := make([]*types.Vacation, 0, batchSize)
	err = v.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (v vacationDo) FindInBatches(result *[]*types.Vacation, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return v.DO.FindInBatches(result, batchSize, fc)
}

func (v vacationDo) Attrs(attrs ...field.AssignExpr) IVacationDo {
	return v.withDO(v.DO.Attrs(attrs...))
}

func (v vacationDo) Assign(attrs ...field.AssignExpr) IVacationDo {
	return v.withDO(v.DO.Assign(attrs...))
}

func (v vacationDo) Joins(fields ...field.RelationField) IVacationDo {
	for _, _f := range fields {
		v = *v.withDO(v.DO.Joins(_f))
	}
	return &v
}

func (v vacationDo) Preload(fields ...field.RelationField) IVacationDo {
	for _, _f := range fields {
		v = *v.withDO(v.DO.Preload(_f))
	}
	return &v
}

func (v vacationDo) FirstOrInit() (*types.Vacation, error) {
	if result, err := v.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*types.Vacation), nil
	}
}

func (v vacationDo) FirstOrCreate() (*types.Vacation, error) {
	if result, err := v.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*types.Vacation), nil
	}
}

func (v vacationDo) FindByPage(offset int, limit int) (result []*types.Vacation, count int64, err error) {
	result, err = v.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = v.Offset(-1).Limit(-1).Count()
	return
}

func (v vacationDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = v.Count()
	if err != nil {
		return
	}

	err = v.Offset(offset).Limit(limit).Scan(result)
	return
}

func (v vacationDo) Scan(result interface{}) (err error) {
	return v.DO.Scan(result)
}

func (v vacationDo) Delete(models ...*types.Vacation) (result gen.ResultInfo, err error) {
	return v.DO.Delete(models)
}

func (v *vacationDo) withDO(do gen.Dao) *vacationDo {
	v.DO = *do.(*gen.DO)
	return v
}
