// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"hrapi/internal/types"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"
)

func newSalaryAddItemEmployee(db *gorm.DB, opts ...gen.DOOption) salaryAddItemEmployee {
	_salaryAddItemEmployee := salaryAddItemEmployee{}

	_salaryAddItemEmployee.salaryAddItemEmployeeDo.UseDB(db, opts...)
	_salaryAddItemEmployee.salaryAddItemEmployeeDo.UseModel(&types.SalaryAddItemEmployee{})

	tableName := _salaryAddItemEmployee.salaryAddItemEmployeeDo.TableName()
	_salaryAddItemEmployee.ALL = field.NewAsterisk(tableName)
	_salaryAddItemEmployee.SalaryAddItemID = field.NewUint(tableName, "salary_add_item_id")
	_salaryAddItemEmployee.EmployeeID = field.NewUint(tableName, "employee_id")
	_salaryAddItemEmployee.UseCustom = field.NewBool(tableName, "use_custom")
	_salaryAddItemEmployee.CustomAmount = field.NewFloat32(tableName, "custom_amount")

	_salaryAddItemEmployee.fillFieldMap()

	return _salaryAddItemEmployee
}

type salaryAddItemEmployee struct {
	salaryAddItemEmployeeDo salaryAddItemEmployeeDo

	ALL             field.Asterisk
	SalaryAddItemID field.Uint
	EmployeeID      field.Uint
	UseCustom       field.Bool
	CustomAmount    field.Float32

	fieldMap map[string]field.Expr
}

func (s salaryAddItemEmployee) Table(newTableName string) *salaryAddItemEmployee {
	s.salaryAddItemEmployeeDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s salaryAddItemEmployee) As(alias string) *salaryAddItemEmployee {
	s.salaryAddItemEmployeeDo.DO = *(s.salaryAddItemEmployeeDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *salaryAddItemEmployee) updateTableName(table string) *salaryAddItemEmployee {
	s.ALL = field.NewAsterisk(table)
	s.SalaryAddItemID = field.NewUint(table, "salary_add_item_id")
	s.EmployeeID = field.NewUint(table, "employee_id")
	s.UseCustom = field.NewBool(table, "use_custom")
	s.CustomAmount = field.NewFloat32(table, "custom_amount")

	s.fillFieldMap()

	return s
}

func (s *salaryAddItemEmployee) WithContext(ctx context.Context) ISalaryAddItemEmployeeDo {
	return s.salaryAddItemEmployeeDo.WithContext(ctx)
}

func (s salaryAddItemEmployee) TableName() string { return s.salaryAddItemEmployeeDo.TableName() }

func (s salaryAddItemEmployee) Alias() string { return s.salaryAddItemEmployeeDo.Alias() }

func (s salaryAddItemEmployee) Columns(cols ...field.Expr) gen.Columns {
	return s.salaryAddItemEmployeeDo.Columns(cols...)
}

func (s *salaryAddItemEmployee) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *salaryAddItemEmployee) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 4)
	s.fieldMap["salary_add_item_id"] = s.SalaryAddItemID
	s.fieldMap["employee_id"] = s.EmployeeID
	s.fieldMap["use_custom"] = s.UseCustom
	s.fieldMap["custom_amount"] = s.CustomAmount
}

func (s salaryAddItemEmployee) clone(db *gorm.DB) salaryAddItemEmployee {
	s.salaryAddItemEmployeeDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s salaryAddItemEmployee) replaceDB(db *gorm.DB) salaryAddItemEmployee {
	s.salaryAddItemEmployeeDo.ReplaceDB(db)
	return s
}

type salaryAddItemEmployeeDo struct{ gen.DO }

type ISalaryAddItemEmployeeDo interface {
	gen.SubQuery
	Debug() ISalaryAddItemEmployeeDo
	WithContext(ctx context.Context) ISalaryAddItemEmployeeDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ISalaryAddItemEmployeeDo
	WriteDB() ISalaryAddItemEmployeeDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ISalaryAddItemEmployeeDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ISalaryAddItemEmployeeDo
	Not(conds ...gen.Condition) ISalaryAddItemEmployeeDo
	Or(conds ...gen.Condition) ISalaryAddItemEmployeeDo
	Select(conds ...field.Expr) ISalaryAddItemEmployeeDo
	Where(conds ...gen.Condition) ISalaryAddItemEmployeeDo
	Order(conds ...field.Expr) ISalaryAddItemEmployeeDo
	Distinct(cols ...field.Expr) ISalaryAddItemEmployeeDo
	Omit(cols ...field.Expr) ISalaryAddItemEmployeeDo
	Join(table schema.Tabler, on ...field.Expr) ISalaryAddItemEmployeeDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ISalaryAddItemEmployeeDo
	RightJoin(table schema.Tabler, on ...field.Expr) ISalaryAddItemEmployeeDo
	Group(cols ...field.Expr) ISalaryAddItemEmployeeDo
	Having(conds ...gen.Condition) ISalaryAddItemEmployeeDo
	Limit(limit int) ISalaryAddItemEmployeeDo
	Offset(offset int) ISalaryAddItemEmployeeDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ISalaryAddItemEmployeeDo
	Unscoped() ISalaryAddItemEmployeeDo
	Create(values ...*types.SalaryAddItemEmployee) error
	CreateInBatches(values []*types.SalaryAddItemEmployee, batchSize int) error
	Save(values ...*types.SalaryAddItemEmployee) error
	First() (*types.SalaryAddItemEmployee, error)
	Take() (*types.SalaryAddItemEmployee, error)
	Last() (*types.SalaryAddItemEmployee, error)
	Find() ([]*types.SalaryAddItemEmployee, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*types.SalaryAddItemEmployee, err error)
	FindInBatches(result *[]*types.SalaryAddItemEmployee, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*types.SalaryAddItemEmployee) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ISalaryAddItemEmployeeDo
	Assign(attrs ...field.AssignExpr) ISalaryAddItemEmployeeDo
	Joins(fields ...field.RelationField) ISalaryAddItemEmployeeDo
	Preload(fields ...field.RelationField) ISalaryAddItemEmployeeDo
	FirstOrInit() (*types.SalaryAddItemEmployee, error)
	FirstOrCreate() (*types.SalaryAddItemEmployee, error)
	FindByPage(offset int, limit int) (result []*types.SalaryAddItemEmployee, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ISalaryAddItemEmployeeDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s salaryAddItemEmployeeDo) Debug() ISalaryAddItemEmployeeDo {
	return s.withDO(s.DO.Debug())
}

func (s salaryAddItemEmployeeDo) WithContext(ctx context.Context) ISalaryAddItemEmployeeDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s salaryAddItemEmployeeDo) ReadDB() ISalaryAddItemEmployeeDo {
	return s.Clauses(dbresolver.Read)
}

func (s salaryAddItemEmployeeDo) WriteDB() ISalaryAddItemEmployeeDo {
	return s.Clauses(dbresolver.Write)
}

func (s salaryAddItemEmployeeDo) Session(config *gorm.Session) ISalaryAddItemEmployeeDo {
	return s.withDO(s.DO.Session(config))
}

func (s salaryAddItemEmployeeDo) Clauses(conds ...clause.Expression) ISalaryAddItemEmployeeDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s salaryAddItemEmployeeDo) Returning(value interface{}, columns ...string) ISalaryAddItemEmployeeDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s salaryAddItemEmployeeDo) Not(conds ...gen.Condition) ISalaryAddItemEmployeeDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s salaryAddItemEmployeeDo) Or(conds ...gen.Condition) ISalaryAddItemEmployeeDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s salaryAddItemEmployeeDo) Select(conds ...field.Expr) ISalaryAddItemEmployeeDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s salaryAddItemEmployeeDo) Where(conds ...gen.Condition) ISalaryAddItemEmployeeDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s salaryAddItemEmployeeDo) Order(conds ...field.Expr) ISalaryAddItemEmployeeDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s salaryAddItemEmployeeDo) Distinct(cols ...field.Expr) ISalaryAddItemEmployeeDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s salaryAddItemEmployeeDo) Omit(cols ...field.Expr) ISalaryAddItemEmployeeDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s salaryAddItemEmployeeDo) Join(table schema.Tabler, on ...field.Expr) ISalaryAddItemEmployeeDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s salaryAddItemEmployeeDo) LeftJoin(table schema.Tabler, on ...field.Expr) ISalaryAddItemEmployeeDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s salaryAddItemEmployeeDo) RightJoin(table schema.Tabler, on ...field.Expr) ISalaryAddItemEmployeeDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s salaryAddItemEmployeeDo) Group(cols ...field.Expr) ISalaryAddItemEmployeeDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s salaryAddItemEmployeeDo) Having(conds ...gen.Condition) ISalaryAddItemEmployeeDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s salaryAddItemEmployeeDo) Limit(limit int) ISalaryAddItemEmployeeDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s salaryAddItemEmployeeDo) Offset(offset int) ISalaryAddItemEmployeeDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s salaryAddItemEmployeeDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ISalaryAddItemEmployeeDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s salaryAddItemEmployeeDo) Unscoped() ISalaryAddItemEmployeeDo {
	return s.withDO(s.DO.Unscoped())
}

func (s salaryAddItemEmployeeDo) Create(values ...*types.SalaryAddItemEmployee) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s salaryAddItemEmployeeDo) CreateInBatches(values []*types.SalaryAddItemEmployee, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s salaryAddItemEmployeeDo) Save(values ...*types.SalaryAddItemEmployee) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s salaryAddItemEmployeeDo) First() (*types.SalaryAddItemEmployee, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*types.SalaryAddItemEmployee), nil
	}
}

func (s salaryAddItemEmployeeDo) Take() (*types.SalaryAddItemEmployee, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*types.SalaryAddItemEmployee), nil
	}
}

func (s salaryAddItemEmployeeDo) Last() (*types.SalaryAddItemEmployee, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*types.SalaryAddItemEmployee), nil
	}
}

func (s salaryAddItemEmployeeDo) Find() ([]*types.SalaryAddItemEmployee, error) {
	result, err := s.DO.Find()
	return result.([]*types.SalaryAddItemEmployee), err
}

func (s salaryAddItemEmployeeDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*types.SalaryAddItemEmployee, err error) {
	buf := make([]*types.SalaryAddItemEmployee, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s salaryAddItemEmployeeDo) FindInBatches(result *[]*types.SalaryAddItemEmployee, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s salaryAddItemEmployeeDo) Attrs(attrs ...field.AssignExpr) ISalaryAddItemEmployeeDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s salaryAddItemEmployeeDo) Assign(attrs ...field.AssignExpr) ISalaryAddItemEmployeeDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s salaryAddItemEmployeeDo) Joins(fields ...field.RelationField) ISalaryAddItemEmployeeDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s salaryAddItemEmployeeDo) Preload(fields ...field.RelationField) ISalaryAddItemEmployeeDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s salaryAddItemEmployeeDo) FirstOrInit() (*types.SalaryAddItemEmployee, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*types.SalaryAddItemEmployee), nil
	}
}

func (s salaryAddItemEmployeeDo) FirstOrCreate() (*types.SalaryAddItemEmployee, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*types.SalaryAddItemEmployee), nil
	}
}

func (s salaryAddItemEmployeeDo) FindByPage(offset int, limit int) (result []*types.SalaryAddItemEmployee, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s salaryAddItemEmployeeDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s salaryAddItemEmployeeDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s salaryAddItemEmployeeDo) Delete(models ...*types.SalaryAddItemEmployee) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *salaryAddItemEmployeeDo) withDO(do gen.Dao) *salaryAddItemEmployeeDo {
	s.DO = *do.(*gen.DO)
	return s
}
