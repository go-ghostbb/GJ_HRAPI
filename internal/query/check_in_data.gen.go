// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"hrapi/internal/types"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"
)

func newCheckInData(db *gorm.DB, opts ...gen.DOOption) checkInData {
	_checkInData := checkInData{}

	_checkInData.checkInDataDo.UseDB(db, opts...)
	_checkInData.checkInDataDo.UseModel(&types.CheckInData{})

	tableName := _checkInData.checkInDataDo.TableName()
	_checkInData.ALL = field.NewAsterisk(tableName)
	_checkInData.ID = field.NewUint(tableName, "id")
	_checkInData.CreatedAt = field.NewTime(tableName, "created_at")
	_checkInData.UpdatedAt = field.NewTime(tableName, "updated_at")
	_checkInData.DeletedAt = field.NewField(tableName, "deleted_at")
	_checkInData.EmployeeID = field.NewUint(tableName, "employee_id")
	_checkInData.Datetime = field.NewField(tableName, "datetime")
	_checkInData.Type = field.NewField(tableName, "type")
	_checkInData.Employee = checkInDataBelongsToEmployee{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Employee", "types.Employee"),
		Department: struct {
			field.RelationField
			Manager struct {
				field.RelationField
			}
		}{
			RelationField: field.NewRelation("Employee.Department", "types.Department"),
			Manager: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("Employee.Department.Manager", "types.Employee"),
			},
		},
		Rank: struct {
			field.RelationField
			Grade struct {
				field.RelationField
				Rank struct {
					field.RelationField
				}
			}
		}{
			RelationField: field.NewRelation("Employee.Rank", "types.PositionRank"),
			Grade: struct {
				field.RelationField
				Rank struct {
					field.RelationField
				}
			}{
				RelationField: field.NewRelation("Employee.Rank.Grade", "types.PositionGrade"),
				Rank: struct {
					field.RelationField
				}{
					RelationField: field.NewRelation("Employee.Rank.Grade.Rank", "types.PositionRank"),
				},
			},
		},
		Grade: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("Employee.Grade", "types.PositionGrade"),
		},
		LoginInformation: struct {
			field.RelationField
			Employee struct {
				field.RelationField
			}
		}{
			RelationField: field.NewRelation("Employee.LoginInformation", "types.LoginInformation"),
			Employee: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("Employee.LoginInformation.Employee", "types.Employee"),
			},
		},
		Roles: struct {
			field.RelationField
			Employees struct {
				field.RelationField
			}
			Permissions struct {
				field.RelationField
				Roles struct {
					field.RelationField
				}
			}
			Menus struct {
				field.RelationField
				Roles struct {
					field.RelationField
				}
			}
		}{
			RelationField: field.NewRelation("Employee.Roles", "types.Role"),
			Employees: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("Employee.Roles.Employees", "types.Employee"),
			},
			Permissions: struct {
				field.RelationField
				Roles struct {
					field.RelationField
				}
			}{
				RelationField: field.NewRelation("Employee.Roles.Permissions", "types.Permission"),
				Roles: struct {
					field.RelationField
				}{
					RelationField: field.NewRelation("Employee.Roles.Permissions.Roles", "types.Role"),
				},
			},
			Menus: struct {
				field.RelationField
				Roles struct {
					field.RelationField
				}
			}{
				RelationField: field.NewRelation("Employee.Roles.Menus", "types.Menu"),
				Roles: struct {
					field.RelationField
				}{
					RelationField: field.NewRelation("Employee.Roles.Menus.Roles", "types.Role"),
				},
			},
		},
	}

	_checkInData.fillFieldMap()

	return _checkInData
}

type checkInData struct {
	checkInDataDo checkInDataDo

	ALL        field.Asterisk
	ID         field.Uint
	CreatedAt  field.Time
	UpdatedAt  field.Time
	DeletedAt  field.Field
	EmployeeID field.Uint
	Datetime   field.Field
	Type       field.Field
	Employee   checkInDataBelongsToEmployee

	fieldMap map[string]field.Expr
}

func (c checkInData) Table(newTableName string) *checkInData {
	c.checkInDataDo.UseTable(newTableName)
	return c.updateTableName(newTableName)
}

func (c checkInData) As(alias string) *checkInData {
	c.checkInDataDo.DO = *(c.checkInDataDo.As(alias).(*gen.DO))
	return c.updateTableName(alias)
}

func (c *checkInData) updateTableName(table string) *checkInData {
	c.ALL = field.NewAsterisk(table)
	c.ID = field.NewUint(table, "id")
	c.CreatedAt = field.NewTime(table, "created_at")
	c.UpdatedAt = field.NewTime(table, "updated_at")
	c.DeletedAt = field.NewField(table, "deleted_at")
	c.EmployeeID = field.NewUint(table, "employee_id")
	c.Datetime = field.NewField(table, "datetime")
	c.Type = field.NewField(table, "type")

	c.fillFieldMap()

	return c
}

func (c *checkInData) WithContext(ctx context.Context) ICheckInDataDo {
	return c.checkInDataDo.WithContext(ctx)
}

func (c checkInData) TableName() string { return c.checkInDataDo.TableName() }

func (c checkInData) Alias() string { return c.checkInDataDo.Alias() }

func (c checkInData) Columns(cols ...field.Expr) gen.Columns { return c.checkInDataDo.Columns(cols...) }

func (c *checkInData) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := c.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (c *checkInData) fillFieldMap() {
	c.fieldMap = make(map[string]field.Expr, 8)
	c.fieldMap["id"] = c.ID
	c.fieldMap["created_at"] = c.CreatedAt
	c.fieldMap["updated_at"] = c.UpdatedAt
	c.fieldMap["deleted_at"] = c.DeletedAt
	c.fieldMap["employee_id"] = c.EmployeeID
	c.fieldMap["datetime"] = c.Datetime
	c.fieldMap["type"] = c.Type

}

func (c checkInData) clone(db *gorm.DB) checkInData {
	c.checkInDataDo.ReplaceConnPool(db.Statement.ConnPool)
	return c
}

func (c checkInData) replaceDB(db *gorm.DB) checkInData {
	c.checkInDataDo.ReplaceDB(db)
	return c
}

type checkInDataBelongsToEmployee struct {
	db *gorm.DB

	field.RelationField

	Department struct {
		field.RelationField
		Manager struct {
			field.RelationField
		}
	}
	Rank struct {
		field.RelationField
		Grade struct {
			field.RelationField
			Rank struct {
				field.RelationField
			}
		}
	}
	Grade struct {
		field.RelationField
	}
	LoginInformation struct {
		field.RelationField
		Employee struct {
			field.RelationField
		}
	}
	Roles struct {
		field.RelationField
		Employees struct {
			field.RelationField
		}
		Permissions struct {
			field.RelationField
			Roles struct {
				field.RelationField
			}
		}
		Menus struct {
			field.RelationField
			Roles struct {
				field.RelationField
			}
		}
	}
}

func (a checkInDataBelongsToEmployee) Where(conds ...field.Expr) *checkInDataBelongsToEmployee {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a checkInDataBelongsToEmployee) WithContext(ctx context.Context) *checkInDataBelongsToEmployee {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a checkInDataBelongsToEmployee) Session(session *gorm.Session) *checkInDataBelongsToEmployee {
	a.db = a.db.Session(session)
	return &a
}

func (a checkInDataBelongsToEmployee) Model(m *types.CheckInData) *checkInDataBelongsToEmployeeTx {
	return &checkInDataBelongsToEmployeeTx{a.db.Model(m).Association(a.Name())}
}

type checkInDataBelongsToEmployeeTx struct{ tx *gorm.Association }

func (a checkInDataBelongsToEmployeeTx) Find() (result *types.Employee, err error) {
	return result, a.tx.Find(&result)
}

func (a checkInDataBelongsToEmployeeTx) Append(values ...*types.Employee) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a checkInDataBelongsToEmployeeTx) Replace(values ...*types.Employee) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a checkInDataBelongsToEmployeeTx) Delete(values ...*types.Employee) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a checkInDataBelongsToEmployeeTx) Clear() error {
	return a.tx.Clear()
}

func (a checkInDataBelongsToEmployeeTx) Count() int64 {
	return a.tx.Count()
}

type checkInDataDo struct{ gen.DO }

type ICheckInDataDo interface {
	gen.SubQuery
	Debug() ICheckInDataDo
	WithContext(ctx context.Context) ICheckInDataDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ICheckInDataDo
	WriteDB() ICheckInDataDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ICheckInDataDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ICheckInDataDo
	Not(conds ...gen.Condition) ICheckInDataDo
	Or(conds ...gen.Condition) ICheckInDataDo
	Select(conds ...field.Expr) ICheckInDataDo
	Where(conds ...gen.Condition) ICheckInDataDo
	Order(conds ...field.Expr) ICheckInDataDo
	Distinct(cols ...field.Expr) ICheckInDataDo
	Omit(cols ...field.Expr) ICheckInDataDo
	Join(table schema.Tabler, on ...field.Expr) ICheckInDataDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ICheckInDataDo
	RightJoin(table schema.Tabler, on ...field.Expr) ICheckInDataDo
	Group(cols ...field.Expr) ICheckInDataDo
	Having(conds ...gen.Condition) ICheckInDataDo
	Limit(limit int) ICheckInDataDo
	Offset(offset int) ICheckInDataDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ICheckInDataDo
	Unscoped() ICheckInDataDo
	Create(values ...*types.CheckInData) error
	CreateInBatches(values []*types.CheckInData, batchSize int) error
	Save(values ...*types.CheckInData) error
	First() (*types.CheckInData, error)
	Take() (*types.CheckInData, error)
	Last() (*types.CheckInData, error)
	Find() ([]*types.CheckInData, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*types.CheckInData, err error)
	FindInBatches(result *[]*types.CheckInData, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*types.CheckInData) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ICheckInDataDo
	Assign(attrs ...field.AssignExpr) ICheckInDataDo
	Joins(fields ...field.RelationField) ICheckInDataDo
	Preload(fields ...field.RelationField) ICheckInDataDo
	FirstOrInit() (*types.CheckInData, error)
	FirstOrCreate() (*types.CheckInData, error)
	FindByPage(offset int, limit int) (result []*types.CheckInData, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ICheckInDataDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (c checkInDataDo) Debug() ICheckInDataDo {
	return c.withDO(c.DO.Debug())
}

func (c checkInDataDo) WithContext(ctx context.Context) ICheckInDataDo {
	return c.withDO(c.DO.WithContext(ctx))
}

func (c checkInDataDo) ReadDB() ICheckInDataDo {
	return c.Clauses(dbresolver.Read)
}

func (c checkInDataDo) WriteDB() ICheckInDataDo {
	return c.Clauses(dbresolver.Write)
}

func (c checkInDataDo) Session(config *gorm.Session) ICheckInDataDo {
	return c.withDO(c.DO.Session(config))
}

func (c checkInDataDo) Clauses(conds ...clause.Expression) ICheckInDataDo {
	return c.withDO(c.DO.Clauses(conds...))
}

func (c checkInDataDo) Returning(value interface{}, columns ...string) ICheckInDataDo {
	return c.withDO(c.DO.Returning(value, columns...))
}

func (c checkInDataDo) Not(conds ...gen.Condition) ICheckInDataDo {
	return c.withDO(c.DO.Not(conds...))
}

func (c checkInDataDo) Or(conds ...gen.Condition) ICheckInDataDo {
	return c.withDO(c.DO.Or(conds...))
}

func (c checkInDataDo) Select(conds ...field.Expr) ICheckInDataDo {
	return c.withDO(c.DO.Select(conds...))
}

func (c checkInDataDo) Where(conds ...gen.Condition) ICheckInDataDo {
	return c.withDO(c.DO.Where(conds...))
}

func (c checkInDataDo) Order(conds ...field.Expr) ICheckInDataDo {
	return c.withDO(c.DO.Order(conds...))
}

func (c checkInDataDo) Distinct(cols ...field.Expr) ICheckInDataDo {
	return c.withDO(c.DO.Distinct(cols...))
}

func (c checkInDataDo) Omit(cols ...field.Expr) ICheckInDataDo {
	return c.withDO(c.DO.Omit(cols...))
}

func (c checkInDataDo) Join(table schema.Tabler, on ...field.Expr) ICheckInDataDo {
	return c.withDO(c.DO.Join(table, on...))
}

func (c checkInDataDo) LeftJoin(table schema.Tabler, on ...field.Expr) ICheckInDataDo {
	return c.withDO(c.DO.LeftJoin(table, on...))
}

func (c checkInDataDo) RightJoin(table schema.Tabler, on ...field.Expr) ICheckInDataDo {
	return c.withDO(c.DO.RightJoin(table, on...))
}

func (c checkInDataDo) Group(cols ...field.Expr) ICheckInDataDo {
	return c.withDO(c.DO.Group(cols...))
}

func (c checkInDataDo) Having(conds ...gen.Condition) ICheckInDataDo {
	return c.withDO(c.DO.Having(conds...))
}

func (c checkInDataDo) Limit(limit int) ICheckInDataDo {
	return c.withDO(c.DO.Limit(limit))
}

func (c checkInDataDo) Offset(offset int) ICheckInDataDo {
	return c.withDO(c.DO.Offset(offset))
}

func (c checkInDataDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ICheckInDataDo {
	return c.withDO(c.DO.Scopes(funcs...))
}

func (c checkInDataDo) Unscoped() ICheckInDataDo {
	return c.withDO(c.DO.Unscoped())
}

func (c checkInDataDo) Create(values ...*types.CheckInData) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Create(values)
}

func (c checkInDataDo) CreateInBatches(values []*types.CheckInData, batchSize int) error {
	return c.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (c checkInDataDo) Save(values ...*types.CheckInData) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Save(values)
}

func (c checkInDataDo) First() (*types.CheckInData, error) {
	if result, err := c.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*types.CheckInData), nil
	}
}

func (c checkInDataDo) Take() (*types.CheckInData, error) {
	if result, err := c.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*types.CheckInData), nil
	}
}

func (c checkInDataDo) Last() (*types.CheckInData, error) {
	if result, err := c.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*types.CheckInData), nil
	}
}

func (c checkInDataDo) Find() ([]*types.CheckInData, error) {
	result, err := c.DO.Find()
	return result.([]*types.CheckInData), err
}

func (c checkInDataDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*types.CheckInData, err error) {
	buf := make([]*types.CheckInData, 0, batchSize)
	err = c.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (c checkInDataDo) FindInBatches(result *[]*types.CheckInData, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return c.DO.FindInBatches(result, batchSize, fc)
}

func (c checkInDataDo) Attrs(attrs ...field.AssignExpr) ICheckInDataDo {
	return c.withDO(c.DO.Attrs(attrs...))
}

func (c checkInDataDo) Assign(attrs ...field.AssignExpr) ICheckInDataDo {
	return c.withDO(c.DO.Assign(attrs...))
}

func (c checkInDataDo) Joins(fields ...field.RelationField) ICheckInDataDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Joins(_f))
	}
	return &c
}

func (c checkInDataDo) Preload(fields ...field.RelationField) ICheckInDataDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Preload(_f))
	}
	return &c
}

func (c checkInDataDo) FirstOrInit() (*types.CheckInData, error) {
	if result, err := c.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*types.CheckInData), nil
	}
}

func (c checkInDataDo) FirstOrCreate() (*types.CheckInData, error) {
	if result, err := c.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*types.CheckInData), nil
	}
}

func (c checkInDataDo) FindByPage(offset int, limit int) (result []*types.CheckInData, count int64, err error) {
	result, err = c.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = c.Offset(-1).Limit(-1).Count()
	return
}

func (c checkInDataDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = c.Count()
	if err != nil {
		return
	}

	err = c.Offset(offset).Limit(limit).Scan(result)
	return
}

func (c checkInDataDo) Scan(result interface{}) (err error) {
	return c.DO.Scan(result)
}

func (c checkInDataDo) Delete(models ...*types.CheckInData) (result gen.ResultInfo, err error) {
	return c.DO.Delete(models)
}

func (c *checkInDataDo) withDO(do gen.Dao) *checkInDataDo {
	c.DO = *do.(*gen.DO)
	return c
}
