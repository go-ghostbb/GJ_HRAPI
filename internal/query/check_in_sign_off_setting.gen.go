// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"hrapi/internal/types"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"
)

func newCheckInSignOffSetting(db *gorm.DB, opts ...gen.DOOption) checkInSignOffSetting {
	_checkInSignOffSetting := checkInSignOffSetting{}

	_checkInSignOffSetting.checkInSignOffSettingDo.UseDB(db, opts...)
	_checkInSignOffSetting.checkInSignOffSettingDo.UseModel(&types.CheckInSignOffSetting{})

	tableName := _checkInSignOffSetting.checkInSignOffSettingDo.TableName()
	_checkInSignOffSetting.ALL = field.NewAsterisk(tableName)
	_checkInSignOffSetting.ID = field.NewUint(tableName, "id")
	_checkInSignOffSetting.CreatedAt = field.NewTime(tableName, "created_at")
	_checkInSignOffSetting.UpdatedAt = field.NewTime(tableName, "updated_at")
	_checkInSignOffSetting.DeletedAt = field.NewField(tableName, "deleted_at")
	_checkInSignOffSetting.Level = field.NewUint(tableName, "level")
	_checkInSignOffSetting.SignType = field.NewField(tableName, "sign_type")
	_checkInSignOffSetting.SpecificEmployeeID = field.NewUint(tableName, "specific_employee_id")
	_checkInSignOffSetting.Notify = field.NewField(tableName, "notify")
	_checkInSignOffSetting.Remark = field.NewString(tableName, "remark")
	_checkInSignOffSetting.SpecificEmployee = checkInSignOffSettingBelongsToSpecificEmployee{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("SpecificEmployee", "types.Employee"),
		Department: struct {
			field.RelationField
			Manager struct {
				field.RelationField
			}
		}{
			RelationField: field.NewRelation("SpecificEmployee.Department", "types.Department"),
			Manager: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("SpecificEmployee.Department.Manager", "types.Employee"),
			},
		},
		Rank: struct {
			field.RelationField
			Grade struct {
				field.RelationField
				Rank struct {
					field.RelationField
				}
			}
		}{
			RelationField: field.NewRelation("SpecificEmployee.Rank", "types.PositionRank"),
			Grade: struct {
				field.RelationField
				Rank struct {
					field.RelationField
				}
			}{
				RelationField: field.NewRelation("SpecificEmployee.Rank.Grade", "types.PositionGrade"),
				Rank: struct {
					field.RelationField
				}{
					RelationField: field.NewRelation("SpecificEmployee.Rank.Grade.Rank", "types.PositionRank"),
				},
			},
		},
		Grade: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("SpecificEmployee.Grade", "types.PositionGrade"),
		},
		LoginInformation: struct {
			field.RelationField
			Employee struct {
				field.RelationField
			}
		}{
			RelationField: field.NewRelation("SpecificEmployee.LoginInformation", "types.LoginInformation"),
			Employee: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("SpecificEmployee.LoginInformation.Employee", "types.Employee"),
			},
		},
		Roles: struct {
			field.RelationField
			Employees struct {
				field.RelationField
			}
			Permissions struct {
				field.RelationField
				Roles struct {
					field.RelationField
				}
			}
			Menus struct {
				field.RelationField
				Roles struct {
					field.RelationField
				}
			}
		}{
			RelationField: field.NewRelation("SpecificEmployee.Roles", "types.Role"),
			Employees: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("SpecificEmployee.Roles.Employees", "types.Employee"),
			},
			Permissions: struct {
				field.RelationField
				Roles struct {
					field.RelationField
				}
			}{
				RelationField: field.NewRelation("SpecificEmployee.Roles.Permissions", "types.Permission"),
				Roles: struct {
					field.RelationField
				}{
					RelationField: field.NewRelation("SpecificEmployee.Roles.Permissions.Roles", "types.Role"),
				},
			},
			Menus: struct {
				field.RelationField
				Roles struct {
					field.RelationField
				}
			}{
				RelationField: field.NewRelation("SpecificEmployee.Roles.Menus", "types.Menu"),
				Roles: struct {
					field.RelationField
				}{
					RelationField: field.NewRelation("SpecificEmployee.Roles.Menus.Roles", "types.Role"),
				},
			},
		},
	}

	_checkInSignOffSetting.fillFieldMap()

	return _checkInSignOffSetting
}

type checkInSignOffSetting struct {
	checkInSignOffSettingDo checkInSignOffSettingDo

	ALL                field.Asterisk
	ID                 field.Uint
	CreatedAt          field.Time
	UpdatedAt          field.Time
	DeletedAt          field.Field
	Level              field.Uint
	SignType           field.Field
	SpecificEmployeeID field.Uint
	Notify             field.Field
	Remark             field.String
	SpecificEmployee   checkInSignOffSettingBelongsToSpecificEmployee

	fieldMap map[string]field.Expr
}

func (c checkInSignOffSetting) Table(newTableName string) *checkInSignOffSetting {
	c.checkInSignOffSettingDo.UseTable(newTableName)
	return c.updateTableName(newTableName)
}

func (c checkInSignOffSetting) As(alias string) *checkInSignOffSetting {
	c.checkInSignOffSettingDo.DO = *(c.checkInSignOffSettingDo.As(alias).(*gen.DO))
	return c.updateTableName(alias)
}

func (c *checkInSignOffSetting) updateTableName(table string) *checkInSignOffSetting {
	c.ALL = field.NewAsterisk(table)
	c.ID = field.NewUint(table, "id")
	c.CreatedAt = field.NewTime(table, "created_at")
	c.UpdatedAt = field.NewTime(table, "updated_at")
	c.DeletedAt = field.NewField(table, "deleted_at")
	c.Level = field.NewUint(table, "level")
	c.SignType = field.NewField(table, "sign_type")
	c.SpecificEmployeeID = field.NewUint(table, "specific_employee_id")
	c.Notify = field.NewField(table, "notify")
	c.Remark = field.NewString(table, "remark")

	c.fillFieldMap()

	return c
}

func (c *checkInSignOffSetting) WithContext(ctx context.Context) ICheckInSignOffSettingDo {
	return c.checkInSignOffSettingDo.WithContext(ctx)
}

func (c checkInSignOffSetting) TableName() string { return c.checkInSignOffSettingDo.TableName() }

func (c checkInSignOffSetting) Alias() string { return c.checkInSignOffSettingDo.Alias() }

func (c checkInSignOffSetting) Columns(cols ...field.Expr) gen.Columns {
	return c.checkInSignOffSettingDo.Columns(cols...)
}

func (c *checkInSignOffSetting) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := c.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (c *checkInSignOffSetting) fillFieldMap() {
	c.fieldMap = make(map[string]field.Expr, 10)
	c.fieldMap["id"] = c.ID
	c.fieldMap["created_at"] = c.CreatedAt
	c.fieldMap["updated_at"] = c.UpdatedAt
	c.fieldMap["deleted_at"] = c.DeletedAt
	c.fieldMap["level"] = c.Level
	c.fieldMap["sign_type"] = c.SignType
	c.fieldMap["specific_employee_id"] = c.SpecificEmployeeID
	c.fieldMap["notify"] = c.Notify
	c.fieldMap["remark"] = c.Remark

}

func (c checkInSignOffSetting) clone(db *gorm.DB) checkInSignOffSetting {
	c.checkInSignOffSettingDo.ReplaceConnPool(db.Statement.ConnPool)
	return c
}

func (c checkInSignOffSetting) replaceDB(db *gorm.DB) checkInSignOffSetting {
	c.checkInSignOffSettingDo.ReplaceDB(db)
	return c
}

type checkInSignOffSettingBelongsToSpecificEmployee struct {
	db *gorm.DB

	field.RelationField

	Department struct {
		field.RelationField
		Manager struct {
			field.RelationField
		}
	}
	Rank struct {
		field.RelationField
		Grade struct {
			field.RelationField
			Rank struct {
				field.RelationField
			}
		}
	}
	Grade struct {
		field.RelationField
	}
	LoginInformation struct {
		field.RelationField
		Employee struct {
			field.RelationField
		}
	}
	Roles struct {
		field.RelationField
		Employees struct {
			field.RelationField
		}
		Permissions struct {
			field.RelationField
			Roles struct {
				field.RelationField
			}
		}
		Menus struct {
			field.RelationField
			Roles struct {
				field.RelationField
			}
		}
	}
}

func (a checkInSignOffSettingBelongsToSpecificEmployee) Where(conds ...field.Expr) *checkInSignOffSettingBelongsToSpecificEmployee {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a checkInSignOffSettingBelongsToSpecificEmployee) WithContext(ctx context.Context) *checkInSignOffSettingBelongsToSpecificEmployee {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a checkInSignOffSettingBelongsToSpecificEmployee) Session(session *gorm.Session) *checkInSignOffSettingBelongsToSpecificEmployee {
	a.db = a.db.Session(session)
	return &a
}

func (a checkInSignOffSettingBelongsToSpecificEmployee) Model(m *types.CheckInSignOffSetting) *checkInSignOffSettingBelongsToSpecificEmployeeTx {
	return &checkInSignOffSettingBelongsToSpecificEmployeeTx{a.db.Model(m).Association(a.Name())}
}

type checkInSignOffSettingBelongsToSpecificEmployeeTx struct{ tx *gorm.Association }

func (a checkInSignOffSettingBelongsToSpecificEmployeeTx) Find() (result *types.Employee, err error) {
	return result, a.tx.Find(&result)
}

func (a checkInSignOffSettingBelongsToSpecificEmployeeTx) Append(values ...*types.Employee) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a checkInSignOffSettingBelongsToSpecificEmployeeTx) Replace(values ...*types.Employee) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a checkInSignOffSettingBelongsToSpecificEmployeeTx) Delete(values ...*types.Employee) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a checkInSignOffSettingBelongsToSpecificEmployeeTx) Clear() error {
	return a.tx.Clear()
}

func (a checkInSignOffSettingBelongsToSpecificEmployeeTx) Count() int64 {
	return a.tx.Count()
}

type checkInSignOffSettingDo struct{ gen.DO }

type ICheckInSignOffSettingDo interface {
	gen.SubQuery
	Debug() ICheckInSignOffSettingDo
	WithContext(ctx context.Context) ICheckInSignOffSettingDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ICheckInSignOffSettingDo
	WriteDB() ICheckInSignOffSettingDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ICheckInSignOffSettingDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ICheckInSignOffSettingDo
	Not(conds ...gen.Condition) ICheckInSignOffSettingDo
	Or(conds ...gen.Condition) ICheckInSignOffSettingDo
	Select(conds ...field.Expr) ICheckInSignOffSettingDo
	Where(conds ...gen.Condition) ICheckInSignOffSettingDo
	Order(conds ...field.Expr) ICheckInSignOffSettingDo
	Distinct(cols ...field.Expr) ICheckInSignOffSettingDo
	Omit(cols ...field.Expr) ICheckInSignOffSettingDo
	Join(table schema.Tabler, on ...field.Expr) ICheckInSignOffSettingDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ICheckInSignOffSettingDo
	RightJoin(table schema.Tabler, on ...field.Expr) ICheckInSignOffSettingDo
	Group(cols ...field.Expr) ICheckInSignOffSettingDo
	Having(conds ...gen.Condition) ICheckInSignOffSettingDo
	Limit(limit int) ICheckInSignOffSettingDo
	Offset(offset int) ICheckInSignOffSettingDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ICheckInSignOffSettingDo
	Unscoped() ICheckInSignOffSettingDo
	Create(values ...*types.CheckInSignOffSetting) error
	CreateInBatches(values []*types.CheckInSignOffSetting, batchSize int) error
	Save(values ...*types.CheckInSignOffSetting) error
	First() (*types.CheckInSignOffSetting, error)
	Take() (*types.CheckInSignOffSetting, error)
	Last() (*types.CheckInSignOffSetting, error)
	Find() ([]*types.CheckInSignOffSetting, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*types.CheckInSignOffSetting, err error)
	FindInBatches(result *[]*types.CheckInSignOffSetting, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*types.CheckInSignOffSetting) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ICheckInSignOffSettingDo
	Assign(attrs ...field.AssignExpr) ICheckInSignOffSettingDo
	Joins(fields ...field.RelationField) ICheckInSignOffSettingDo
	Preload(fields ...field.RelationField) ICheckInSignOffSettingDo
	FirstOrInit() (*types.CheckInSignOffSetting, error)
	FirstOrCreate() (*types.CheckInSignOffSetting, error)
	FindByPage(offset int, limit int) (result []*types.CheckInSignOffSetting, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ICheckInSignOffSettingDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (c checkInSignOffSettingDo) Debug() ICheckInSignOffSettingDo {
	return c.withDO(c.DO.Debug())
}

func (c checkInSignOffSettingDo) WithContext(ctx context.Context) ICheckInSignOffSettingDo {
	return c.withDO(c.DO.WithContext(ctx))
}

func (c checkInSignOffSettingDo) ReadDB() ICheckInSignOffSettingDo {
	return c.Clauses(dbresolver.Read)
}

func (c checkInSignOffSettingDo) WriteDB() ICheckInSignOffSettingDo {
	return c.Clauses(dbresolver.Write)
}

func (c checkInSignOffSettingDo) Session(config *gorm.Session) ICheckInSignOffSettingDo {
	return c.withDO(c.DO.Session(config))
}

func (c checkInSignOffSettingDo) Clauses(conds ...clause.Expression) ICheckInSignOffSettingDo {
	return c.withDO(c.DO.Clauses(conds...))
}

func (c checkInSignOffSettingDo) Returning(value interface{}, columns ...string) ICheckInSignOffSettingDo {
	return c.withDO(c.DO.Returning(value, columns...))
}

func (c checkInSignOffSettingDo) Not(conds ...gen.Condition) ICheckInSignOffSettingDo {
	return c.withDO(c.DO.Not(conds...))
}

func (c checkInSignOffSettingDo) Or(conds ...gen.Condition) ICheckInSignOffSettingDo {
	return c.withDO(c.DO.Or(conds...))
}

func (c checkInSignOffSettingDo) Select(conds ...field.Expr) ICheckInSignOffSettingDo {
	return c.withDO(c.DO.Select(conds...))
}

func (c checkInSignOffSettingDo) Where(conds ...gen.Condition) ICheckInSignOffSettingDo {
	return c.withDO(c.DO.Where(conds...))
}

func (c checkInSignOffSettingDo) Order(conds ...field.Expr) ICheckInSignOffSettingDo {
	return c.withDO(c.DO.Order(conds...))
}

func (c checkInSignOffSettingDo) Distinct(cols ...field.Expr) ICheckInSignOffSettingDo {
	return c.withDO(c.DO.Distinct(cols...))
}

func (c checkInSignOffSettingDo) Omit(cols ...field.Expr) ICheckInSignOffSettingDo {
	return c.withDO(c.DO.Omit(cols...))
}

func (c checkInSignOffSettingDo) Join(table schema.Tabler, on ...field.Expr) ICheckInSignOffSettingDo {
	return c.withDO(c.DO.Join(table, on...))
}

func (c checkInSignOffSettingDo) LeftJoin(table schema.Tabler, on ...field.Expr) ICheckInSignOffSettingDo {
	return c.withDO(c.DO.LeftJoin(table, on...))
}

func (c checkInSignOffSettingDo) RightJoin(table schema.Tabler, on ...field.Expr) ICheckInSignOffSettingDo {
	return c.withDO(c.DO.RightJoin(table, on...))
}

func (c checkInSignOffSettingDo) Group(cols ...field.Expr) ICheckInSignOffSettingDo {
	return c.withDO(c.DO.Group(cols...))
}

func (c checkInSignOffSettingDo) Having(conds ...gen.Condition) ICheckInSignOffSettingDo {
	return c.withDO(c.DO.Having(conds...))
}

func (c checkInSignOffSettingDo) Limit(limit int) ICheckInSignOffSettingDo {
	return c.withDO(c.DO.Limit(limit))
}

func (c checkInSignOffSettingDo) Offset(offset int) ICheckInSignOffSettingDo {
	return c.withDO(c.DO.Offset(offset))
}

func (c checkInSignOffSettingDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ICheckInSignOffSettingDo {
	return c.withDO(c.DO.Scopes(funcs...))
}

func (c checkInSignOffSettingDo) Unscoped() ICheckInSignOffSettingDo {
	return c.withDO(c.DO.Unscoped())
}

func (c checkInSignOffSettingDo) Create(values ...*types.CheckInSignOffSetting) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Create(values)
}

func (c checkInSignOffSettingDo) CreateInBatches(values []*types.CheckInSignOffSetting, batchSize int) error {
	return c.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (c checkInSignOffSettingDo) Save(values ...*types.CheckInSignOffSetting) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Save(values)
}

func (c checkInSignOffSettingDo) First() (*types.CheckInSignOffSetting, error) {
	if result, err := c.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*types.CheckInSignOffSetting), nil
	}
}

func (c checkInSignOffSettingDo) Take() (*types.CheckInSignOffSetting, error) {
	if result, err := c.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*types.CheckInSignOffSetting), nil
	}
}

func (c checkInSignOffSettingDo) Last() (*types.CheckInSignOffSetting, error) {
	if result, err := c.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*types.CheckInSignOffSetting), nil
	}
}

func (c checkInSignOffSettingDo) Find() ([]*types.CheckInSignOffSetting, error) {
	result, err := c.DO.Find()
	return result.([]*types.CheckInSignOffSetting), err
}

func (c checkInSignOffSettingDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*types.CheckInSignOffSetting, err error) {
	buf := make([]*types.CheckInSignOffSetting, 0, batchSize)
	err = c.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (c checkInSignOffSettingDo) FindInBatches(result *[]*types.CheckInSignOffSetting, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return c.DO.FindInBatches(result, batchSize, fc)
}

func (c checkInSignOffSettingDo) Attrs(attrs ...field.AssignExpr) ICheckInSignOffSettingDo {
	return c.withDO(c.DO.Attrs(attrs...))
}

func (c checkInSignOffSettingDo) Assign(attrs ...field.AssignExpr) ICheckInSignOffSettingDo {
	return c.withDO(c.DO.Assign(attrs...))
}

func (c checkInSignOffSettingDo) Joins(fields ...field.RelationField) ICheckInSignOffSettingDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Joins(_f))
	}
	return &c
}

func (c checkInSignOffSettingDo) Preload(fields ...field.RelationField) ICheckInSignOffSettingDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Preload(_f))
	}
	return &c
}

func (c checkInSignOffSettingDo) FirstOrInit() (*types.CheckInSignOffSetting, error) {
	if result, err := c.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*types.CheckInSignOffSetting), nil
	}
}

func (c checkInSignOffSettingDo) FirstOrCreate() (*types.CheckInSignOffSetting, error) {
	if result, err := c.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*types.CheckInSignOffSetting), nil
	}
}

func (c checkInSignOffSettingDo) FindByPage(offset int, limit int) (result []*types.CheckInSignOffSetting, count int64, err error) {
	result, err = c.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = c.Offset(-1).Limit(-1).Count()
	return
}

func (c checkInSignOffSettingDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = c.Count()
	if err != nil {
		return
	}

	err = c.Offset(offset).Limit(limit).Scan(result)
	return
}

func (c checkInSignOffSettingDo) Scan(result interface{}) (err error) {
	return c.DO.Scan(result)
}

func (c checkInSignOffSettingDo) Delete(models ...*types.CheckInSignOffSetting) (result gen.ResultInfo, err error) {
	return c.DO.Delete(models)
}

func (c *checkInSignOffSettingDo) withDO(do gen.Dao) *checkInSignOffSettingDo {
	c.DO = *do.(*gen.DO)
	return c
}
