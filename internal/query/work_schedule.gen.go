// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"hrapi/internal/types"
	"strings"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"
)

func newWorkSchedule(db *gorm.DB, opts ...gen.DOOption) workSchedule {
	_workSchedule := workSchedule{}

	_workSchedule.workScheduleDo.UseDB(db, opts...)
	_workSchedule.workScheduleDo.UseModel(&types.WorkSchedule{})

	tableName := _workSchedule.workScheduleDo.TableName()
	_workSchedule.ALL = field.NewAsterisk(tableName)
	_workSchedule.ID = field.NewUint(tableName, "id")
	_workSchedule.CreatedAt = field.NewTime(tableName, "created_at")
	_workSchedule.UpdatedAt = field.NewTime(tableName, "updated_at")
	_workSchedule.DeletedAt = field.NewField(tableName, "deleted_at")
	_workSchedule.ScheduleDate = field.NewField(tableName, "schedule_date")
	_workSchedule.EmployeeID = field.NewUint(tableName, "employee_id")
	_workSchedule.WorkShiftID = field.NewUint(tableName, "work_shift_id")
	_workSchedule.Employee = workScheduleBelongsToEmployee{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Employee", "types.Employee"),
		Department: struct {
			field.RelationField
			Manager struct {
				field.RelationField
			}
		}{
			RelationField: field.NewRelation("Employee.Department", "types.Department"),
			Manager: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("Employee.Department.Manager", "types.Employee"),
			},
		},
		Rank: struct {
			field.RelationField
			Grade struct {
				field.RelationField
				Rank struct {
					field.RelationField
				}
			}
		}{
			RelationField: field.NewRelation("Employee.Rank", "types.PositionRank"),
			Grade: struct {
				field.RelationField
				Rank struct {
					field.RelationField
				}
			}{
				RelationField: field.NewRelation("Employee.Rank.Grade", "types.PositionGrade"),
				Rank: struct {
					field.RelationField
				}{
					RelationField: field.NewRelation("Employee.Rank.Grade.Rank", "types.PositionRank"),
				},
			},
		},
		Grade: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("Employee.Grade", "types.PositionGrade"),
		},
		LoginInformation: struct {
			field.RelationField
			Employee struct {
				field.RelationField
			}
		}{
			RelationField: field.NewRelation("Employee.LoginInformation", "types.LoginInformation"),
			Employee: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("Employee.LoginInformation.Employee", "types.Employee"),
			},
		},
		Roles: struct {
			field.RelationField
			Employees struct {
				field.RelationField
			}
			Permissions struct {
				field.RelationField
				Roles struct {
					field.RelationField
				}
			}
			Menus struct {
				field.RelationField
				Roles struct {
					field.RelationField
				}
			}
		}{
			RelationField: field.NewRelation("Employee.Roles", "types.Role"),
			Employees: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("Employee.Roles.Employees", "types.Employee"),
			},
			Permissions: struct {
				field.RelationField
				Roles struct {
					field.RelationField
				}
			}{
				RelationField: field.NewRelation("Employee.Roles.Permissions", "types.Permission"),
				Roles: struct {
					field.RelationField
				}{
					RelationField: field.NewRelation("Employee.Roles.Permissions.Roles", "types.Role"),
				},
			},
			Menus: struct {
				field.RelationField
				Roles struct {
					field.RelationField
				}
			}{
				RelationField: field.NewRelation("Employee.Roles.Menus", "types.Menu"),
				Roles: struct {
					field.RelationField
				}{
					RelationField: field.NewRelation("Employee.Roles.Menus.Roles", "types.Role"),
				},
			},
		},
	}

	_workSchedule.WorkShift = workScheduleBelongsToWorkShift{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("WorkShift", "types.WorkShift"),
	}

	_workSchedule.fillFieldMap()

	return _workSchedule
}

type workSchedule struct {
	workScheduleDo workScheduleDo

	ALL          field.Asterisk
	ID           field.Uint
	CreatedAt    field.Time
	UpdatedAt    field.Time
	DeletedAt    field.Field
	ScheduleDate field.Field
	EmployeeID   field.Uint
	WorkShiftID  field.Uint
	Employee     workScheduleBelongsToEmployee

	WorkShift workScheduleBelongsToWorkShift

	fieldMap map[string]field.Expr
}

func (w workSchedule) Table(newTableName string) *workSchedule {
	w.workScheduleDo.UseTable(newTableName)
	return w.updateTableName(newTableName)
}

func (w workSchedule) As(alias string) *workSchedule {
	w.workScheduleDo.DO = *(w.workScheduleDo.As(alias).(*gen.DO))
	return w.updateTableName(alias)
}

func (w *workSchedule) updateTableName(table string) *workSchedule {
	w.ALL = field.NewAsterisk(table)
	w.ID = field.NewUint(table, "id")
	w.CreatedAt = field.NewTime(table, "created_at")
	w.UpdatedAt = field.NewTime(table, "updated_at")
	w.DeletedAt = field.NewField(table, "deleted_at")
	w.ScheduleDate = field.NewField(table, "schedule_date")
	w.EmployeeID = field.NewUint(table, "employee_id")
	w.WorkShiftID = field.NewUint(table, "work_shift_id")

	w.fillFieldMap()

	return w
}

func (w *workSchedule) WithContext(ctx context.Context) IWorkScheduleDo {
	return w.workScheduleDo.WithContext(ctx)
}

func (w workSchedule) TableName() string { return w.workScheduleDo.TableName() }

func (w workSchedule) Alias() string { return w.workScheduleDo.Alias() }

func (w workSchedule) Columns(cols ...field.Expr) gen.Columns {
	return w.workScheduleDo.Columns(cols...)
}

func (w *workSchedule) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := w.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (w *workSchedule) fillFieldMap() {
	w.fieldMap = make(map[string]field.Expr, 9)
	w.fieldMap["id"] = w.ID
	w.fieldMap["created_at"] = w.CreatedAt
	w.fieldMap["updated_at"] = w.UpdatedAt
	w.fieldMap["deleted_at"] = w.DeletedAt
	w.fieldMap["schedule_date"] = w.ScheduleDate
	w.fieldMap["employee_id"] = w.EmployeeID
	w.fieldMap["work_shift_id"] = w.WorkShiftID

}

func (w workSchedule) clone(db *gorm.DB) workSchedule {
	w.workScheduleDo.ReplaceConnPool(db.Statement.ConnPool)
	return w
}

func (w workSchedule) replaceDB(db *gorm.DB) workSchedule {
	w.workScheduleDo.ReplaceDB(db)
	return w
}

type workScheduleBelongsToEmployee struct {
	db *gorm.DB

	field.RelationField

	Department struct {
		field.RelationField
		Manager struct {
			field.RelationField
		}
	}
	Rank struct {
		field.RelationField
		Grade struct {
			field.RelationField
			Rank struct {
				field.RelationField
			}
		}
	}
	Grade struct {
		field.RelationField
	}
	LoginInformation struct {
		field.RelationField
		Employee struct {
			field.RelationField
		}
	}
	Roles struct {
		field.RelationField
		Employees struct {
			field.RelationField
		}
		Permissions struct {
			field.RelationField
			Roles struct {
				field.RelationField
			}
		}
		Menus struct {
			field.RelationField
			Roles struct {
				field.RelationField
			}
		}
	}
}

func (a workScheduleBelongsToEmployee) Where(conds ...field.Expr) *workScheduleBelongsToEmployee {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a workScheduleBelongsToEmployee) WithContext(ctx context.Context) *workScheduleBelongsToEmployee {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a workScheduleBelongsToEmployee) Session(session *gorm.Session) *workScheduleBelongsToEmployee {
	a.db = a.db.Session(session)
	return &a
}

func (a workScheduleBelongsToEmployee) Model(m *types.WorkSchedule) *workScheduleBelongsToEmployeeTx {
	return &workScheduleBelongsToEmployeeTx{a.db.Model(m).Association(a.Name())}
}

type workScheduleBelongsToEmployeeTx struct{ tx *gorm.Association }

func (a workScheduleBelongsToEmployeeTx) Find() (result *types.Employee, err error) {
	return result, a.tx.Find(&result)
}

func (a workScheduleBelongsToEmployeeTx) Append(values ...*types.Employee) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a workScheduleBelongsToEmployeeTx) Replace(values ...*types.Employee) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a workScheduleBelongsToEmployeeTx) Delete(values ...*types.Employee) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a workScheduleBelongsToEmployeeTx) Clear() error {
	return a.tx.Clear()
}

func (a workScheduleBelongsToEmployeeTx) Count() int64 {
	return a.tx.Count()
}

type workScheduleBelongsToWorkShift struct {
	db *gorm.DB

	field.RelationField
}

func (a workScheduleBelongsToWorkShift) Where(conds ...field.Expr) *workScheduleBelongsToWorkShift {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a workScheduleBelongsToWorkShift) WithContext(ctx context.Context) *workScheduleBelongsToWorkShift {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a workScheduleBelongsToWorkShift) Session(session *gorm.Session) *workScheduleBelongsToWorkShift {
	a.db = a.db.Session(session)
	return &a
}

func (a workScheduleBelongsToWorkShift) Model(m *types.WorkSchedule) *workScheduleBelongsToWorkShiftTx {
	return &workScheduleBelongsToWorkShiftTx{a.db.Model(m).Association(a.Name())}
}

type workScheduleBelongsToWorkShiftTx struct{ tx *gorm.Association }

func (a workScheduleBelongsToWorkShiftTx) Find() (result *types.WorkShift, err error) {
	return result, a.tx.Find(&result)
}

func (a workScheduleBelongsToWorkShiftTx) Append(values ...*types.WorkShift) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a workScheduleBelongsToWorkShiftTx) Replace(values ...*types.WorkShift) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a workScheduleBelongsToWorkShiftTx) Delete(values ...*types.WorkShift) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a workScheduleBelongsToWorkShiftTx) Clear() error {
	return a.tx.Clear()
}

func (a workScheduleBelongsToWorkShiftTx) Count() int64 {
	return a.tx.Count()
}

type workScheduleDo struct{ gen.DO }

type IWorkScheduleDo interface {
	gen.SubQuery
	Debug() IWorkScheduleDo
	WithContext(ctx context.Context) IWorkScheduleDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IWorkScheduleDo
	WriteDB() IWorkScheduleDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IWorkScheduleDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IWorkScheduleDo
	Not(conds ...gen.Condition) IWorkScheduleDo
	Or(conds ...gen.Condition) IWorkScheduleDo
	Select(conds ...field.Expr) IWorkScheduleDo
	Where(conds ...gen.Condition) IWorkScheduleDo
	Order(conds ...field.Expr) IWorkScheduleDo
	Distinct(cols ...field.Expr) IWorkScheduleDo
	Omit(cols ...field.Expr) IWorkScheduleDo
	Join(table schema.Tabler, on ...field.Expr) IWorkScheduleDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IWorkScheduleDo
	RightJoin(table schema.Tabler, on ...field.Expr) IWorkScheduleDo
	Group(cols ...field.Expr) IWorkScheduleDo
	Having(conds ...gen.Condition) IWorkScheduleDo
	Limit(limit int) IWorkScheduleDo
	Offset(offset int) IWorkScheduleDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IWorkScheduleDo
	Unscoped() IWorkScheduleDo
	Create(values ...*types.WorkSchedule) error
	CreateInBatches(values []*types.WorkSchedule, batchSize int) error
	Save(values ...*types.WorkSchedule) error
	First() (*types.WorkSchedule, error)
	Take() (*types.WorkSchedule, error)
	Last() (*types.WorkSchedule, error)
	Find() ([]*types.WorkSchedule, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*types.WorkSchedule, err error)
	FindInBatches(result *[]*types.WorkSchedule, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*types.WorkSchedule) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IWorkScheduleDo
	Assign(attrs ...field.AssignExpr) IWorkScheduleDo
	Joins(fields ...field.RelationField) IWorkScheduleDo
	Preload(fields ...field.RelationField) IWorkScheduleDo
	FirstOrInit() (*types.WorkSchedule, error)
	FirstOrCreate() (*types.WorkSchedule, error)
	FindByPage(offset int, limit int) (result []*types.WorkSchedule, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IWorkScheduleDo
	UnderlyingDB() *gorm.DB
	schema.Tabler

	WorkHoursCountMany(empID uint, startDate string, endDate string, startTime string, endTime string) (result float32, err error)
	WorkHourCount(empID uint, start string, end string) (result float32, err error)
}

// select dbo.FN_C_WorkHoursCountMany(@empID, @startDate, @endDate, @startTime, @endTime)
func (w workScheduleDo) WorkHoursCountMany(empID uint, startDate string, endDate string, startTime string, endTime string) (result float32, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	params = append(params, empID)
	params = append(params, startDate)
	params = append(params, endDate)
	params = append(params, startTime)
	params = append(params, endTime)
	generateSQL.WriteString("select dbo.FN_C_WorkHoursCountMany(?, ?, ?, ?, ?) ")

	var executeSQL *gorm.DB
	executeSQL = w.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// select dbo.FN_C_WorkHoursCount(@empID, @start, @end)
func (w workScheduleDo) WorkHourCount(empID uint, start string, end string) (result float32, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	params = append(params, empID)
	params = append(params, start)
	params = append(params, end)
	generateSQL.WriteString("select dbo.FN_C_WorkHoursCount(?, ?, ?) ")

	var executeSQL *gorm.DB
	executeSQL = w.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

func (w workScheduleDo) Debug() IWorkScheduleDo {
	return w.withDO(w.DO.Debug())
}

func (w workScheduleDo) WithContext(ctx context.Context) IWorkScheduleDo {
	return w.withDO(w.DO.WithContext(ctx))
}

func (w workScheduleDo) ReadDB() IWorkScheduleDo {
	return w.Clauses(dbresolver.Read)
}

func (w workScheduleDo) WriteDB() IWorkScheduleDo {
	return w.Clauses(dbresolver.Write)
}

func (w workScheduleDo) Session(config *gorm.Session) IWorkScheduleDo {
	return w.withDO(w.DO.Session(config))
}

func (w workScheduleDo) Clauses(conds ...clause.Expression) IWorkScheduleDo {
	return w.withDO(w.DO.Clauses(conds...))
}

func (w workScheduleDo) Returning(value interface{}, columns ...string) IWorkScheduleDo {
	return w.withDO(w.DO.Returning(value, columns...))
}

func (w workScheduleDo) Not(conds ...gen.Condition) IWorkScheduleDo {
	return w.withDO(w.DO.Not(conds...))
}

func (w workScheduleDo) Or(conds ...gen.Condition) IWorkScheduleDo {
	return w.withDO(w.DO.Or(conds...))
}

func (w workScheduleDo) Select(conds ...field.Expr) IWorkScheduleDo {
	return w.withDO(w.DO.Select(conds...))
}

func (w workScheduleDo) Where(conds ...gen.Condition) IWorkScheduleDo {
	return w.withDO(w.DO.Where(conds...))
}

func (w workScheduleDo) Order(conds ...field.Expr) IWorkScheduleDo {
	return w.withDO(w.DO.Order(conds...))
}

func (w workScheduleDo) Distinct(cols ...field.Expr) IWorkScheduleDo {
	return w.withDO(w.DO.Distinct(cols...))
}

func (w workScheduleDo) Omit(cols ...field.Expr) IWorkScheduleDo {
	return w.withDO(w.DO.Omit(cols...))
}

func (w workScheduleDo) Join(table schema.Tabler, on ...field.Expr) IWorkScheduleDo {
	return w.withDO(w.DO.Join(table, on...))
}

func (w workScheduleDo) LeftJoin(table schema.Tabler, on ...field.Expr) IWorkScheduleDo {
	return w.withDO(w.DO.LeftJoin(table, on...))
}

func (w workScheduleDo) RightJoin(table schema.Tabler, on ...field.Expr) IWorkScheduleDo {
	return w.withDO(w.DO.RightJoin(table, on...))
}

func (w workScheduleDo) Group(cols ...field.Expr) IWorkScheduleDo {
	return w.withDO(w.DO.Group(cols...))
}

func (w workScheduleDo) Having(conds ...gen.Condition) IWorkScheduleDo {
	return w.withDO(w.DO.Having(conds...))
}

func (w workScheduleDo) Limit(limit int) IWorkScheduleDo {
	return w.withDO(w.DO.Limit(limit))
}

func (w workScheduleDo) Offset(offset int) IWorkScheduleDo {
	return w.withDO(w.DO.Offset(offset))
}

func (w workScheduleDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IWorkScheduleDo {
	return w.withDO(w.DO.Scopes(funcs...))
}

func (w workScheduleDo) Unscoped() IWorkScheduleDo {
	return w.withDO(w.DO.Unscoped())
}

func (w workScheduleDo) Create(values ...*types.WorkSchedule) error {
	if len(values) == 0 {
		return nil
	}
	return w.DO.Create(values)
}

func (w workScheduleDo) CreateInBatches(values []*types.WorkSchedule, batchSize int) error {
	return w.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (w workScheduleDo) Save(values ...*types.WorkSchedule) error {
	if len(values) == 0 {
		return nil
	}
	return w.DO.Save(values)
}

func (w workScheduleDo) First() (*types.WorkSchedule, error) {
	if result, err := w.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*types.WorkSchedule), nil
	}
}

func (w workScheduleDo) Take() (*types.WorkSchedule, error) {
	if result, err := w.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*types.WorkSchedule), nil
	}
}

func (w workScheduleDo) Last() (*types.WorkSchedule, error) {
	if result, err := w.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*types.WorkSchedule), nil
	}
}

func (w workScheduleDo) Find() ([]*types.WorkSchedule, error) {
	result, err := w.DO.Find()
	return result.([]*types.WorkSchedule), err
}

func (w workScheduleDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*types.WorkSchedule, err error) {
	buf := make([]*types.WorkSchedule, 0, batchSize)
	err = w.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (w workScheduleDo) FindInBatches(result *[]*types.WorkSchedule, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return w.DO.FindInBatches(result, batchSize, fc)
}

func (w workScheduleDo) Attrs(attrs ...field.AssignExpr) IWorkScheduleDo {
	return w.withDO(w.DO.Attrs(attrs...))
}

func (w workScheduleDo) Assign(attrs ...field.AssignExpr) IWorkScheduleDo {
	return w.withDO(w.DO.Assign(attrs...))
}

func (w workScheduleDo) Joins(fields ...field.RelationField) IWorkScheduleDo {
	for _, _f := range fields {
		w = *w.withDO(w.DO.Joins(_f))
	}
	return &w
}

func (w workScheduleDo) Preload(fields ...field.RelationField) IWorkScheduleDo {
	for _, _f := range fields {
		w = *w.withDO(w.DO.Preload(_f))
	}
	return &w
}

func (w workScheduleDo) FirstOrInit() (*types.WorkSchedule, error) {
	if result, err := w.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*types.WorkSchedule), nil
	}
}

func (w workScheduleDo) FirstOrCreate() (*types.WorkSchedule, error) {
	if result, err := w.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*types.WorkSchedule), nil
	}
}

func (w workScheduleDo) FindByPage(offset int, limit int) (result []*types.WorkSchedule, count int64, err error) {
	result, err = w.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = w.Offset(-1).Limit(-1).Count()
	return
}

func (w workScheduleDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = w.Count()
	if err != nil {
		return
	}

	err = w.Offset(offset).Limit(limit).Scan(result)
	return
}

func (w workScheduleDo) Scan(result interface{}) (err error) {
	return w.DO.Scan(result)
}

func (w workScheduleDo) Delete(models ...*types.WorkSchedule) (result gen.ResultInfo, err error) {
	return w.DO.Delete(models)
}

func (w *workScheduleDo) withDO(do gen.Dao) *workScheduleDo {
	w.DO = *do.(*gen.DO)
	return w
}
