// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"

	"gorm.io/gen"

	"gorm.io/plugin/dbresolver"
)

var (
	Q                         = new(Query)
	CalcSalary                *calcSalary
	CalcSalaryAdd             *calcSalaryAdd
	CalcSalaryEmployee        *calcSalaryEmployee
	CalcSalaryReduce          *calcSalaryReduce
	CheckInRequestForm        *checkInRequestForm
	CheckInRequestFormDetail  *checkInRequestFormDetail
	CheckInSignOffFlow        *checkInSignOffFlow
	CheckInSignOffSetting     *checkInSignOffSetting
	CheckInStatus             *checkInStatus
	ConfigMap                 *configMap
	Department                *department
	Employee                  *employee
	Leave                     *leave
	LeaveCorrect              *leaveCorrect
	LeaveDefer                *leaveDefer
	LeaveGroup                *leaveGroup
	LeaveGroupCondition       *leaveGroupCondition
	LeaveGroupEmployee        *leaveGroupEmployee
	LeaveRequestForm          *leaveRequestForm
	LeaveSignOffFlow          *leaveSignOffFlow
	LeaveSignOffSetting       *leaveSignOffSetting
	LoginInformation          *loginInformation
	Menu                      *menu
	OvertimeSignOffSetting    *overtimeSignOffSetting
	Permission                *permission
	PositionGrade             *positionGrade
	PositionRank              *positionRank
	Role                      *role
	RoleMenu                  *roleMenu
	RolePermission            *rolePermission
	SalaryAddItem             *salaryAddItem
	SalaryAddItemEmployee     *salaryAddItemEmployee
	SalaryReduceItem          *salaryReduceItem
	SalaryReduceItemEmployee  *salaryReduceItemEmployee
	Vacation                  *vacation
	VacationGroup             *vacationGroup
	VacationGroupEmployee     *vacationGroupEmployee
	VacationGroupOvertimeRate *vacationGroupOvertimeRate
	VacationSchedule          *vacationSchedule
	WorkSchedule              *workSchedule
	WorkShift                 *workShift
)

func SetDefault(db *gorm.DB, opts ...gen.DOOption) {
	*Q = *Use(db, opts...)
	CalcSalary = &Q.CalcSalary
	CalcSalaryAdd = &Q.CalcSalaryAdd
	CalcSalaryEmployee = &Q.CalcSalaryEmployee
	CalcSalaryReduce = &Q.CalcSalaryReduce
	CheckInRequestForm = &Q.CheckInRequestForm
	CheckInRequestFormDetail = &Q.CheckInRequestFormDetail
	CheckInSignOffFlow = &Q.CheckInSignOffFlow
	CheckInSignOffSetting = &Q.CheckInSignOffSetting
	CheckInStatus = &Q.CheckInStatus
	ConfigMap = &Q.ConfigMap
	Department = &Q.Department
	Employee = &Q.Employee
	Leave = &Q.Leave
	LeaveCorrect = &Q.LeaveCorrect
	LeaveDefer = &Q.LeaveDefer
	LeaveGroup = &Q.LeaveGroup
	LeaveGroupCondition = &Q.LeaveGroupCondition
	LeaveGroupEmployee = &Q.LeaveGroupEmployee
	LeaveRequestForm = &Q.LeaveRequestForm
	LeaveSignOffFlow = &Q.LeaveSignOffFlow
	LeaveSignOffSetting = &Q.LeaveSignOffSetting
	LoginInformation = &Q.LoginInformation
	Menu = &Q.Menu
	OvertimeSignOffSetting = &Q.OvertimeSignOffSetting
	Permission = &Q.Permission
	PositionGrade = &Q.PositionGrade
	PositionRank = &Q.PositionRank
	Role = &Q.Role
	RoleMenu = &Q.RoleMenu
	RolePermission = &Q.RolePermission
	SalaryAddItem = &Q.SalaryAddItem
	SalaryAddItemEmployee = &Q.SalaryAddItemEmployee
	SalaryReduceItem = &Q.SalaryReduceItem
	SalaryReduceItemEmployee = &Q.SalaryReduceItemEmployee
	Vacation = &Q.Vacation
	VacationGroup = &Q.VacationGroup
	VacationGroupEmployee = &Q.VacationGroupEmployee
	VacationGroupOvertimeRate = &Q.VacationGroupOvertimeRate
	VacationSchedule = &Q.VacationSchedule
	WorkSchedule = &Q.WorkSchedule
	WorkShift = &Q.WorkShift
}

func Use(db *gorm.DB, opts ...gen.DOOption) *Query {
	return &Query{
		db:                        db,
		CalcSalary:                newCalcSalary(db, opts...),
		CalcSalaryAdd:             newCalcSalaryAdd(db, opts...),
		CalcSalaryEmployee:        newCalcSalaryEmployee(db, opts...),
		CalcSalaryReduce:          newCalcSalaryReduce(db, opts...),
		CheckInRequestForm:        newCheckInRequestForm(db, opts...),
		CheckInRequestFormDetail:  newCheckInRequestFormDetail(db, opts...),
		CheckInSignOffFlow:        newCheckInSignOffFlow(db, opts...),
		CheckInSignOffSetting:     newCheckInSignOffSetting(db, opts...),
		CheckInStatus:             newCheckInStatus(db, opts...),
		ConfigMap:                 newConfigMap(db, opts...),
		Department:                newDepartment(db, opts...),
		Employee:                  newEmployee(db, opts...),
		Leave:                     newLeave(db, opts...),
		LeaveCorrect:              newLeaveCorrect(db, opts...),
		LeaveDefer:                newLeaveDefer(db, opts...),
		LeaveGroup:                newLeaveGroup(db, opts...),
		LeaveGroupCondition:       newLeaveGroupCondition(db, opts...),
		LeaveGroupEmployee:        newLeaveGroupEmployee(db, opts...),
		LeaveRequestForm:          newLeaveRequestForm(db, opts...),
		LeaveSignOffFlow:          newLeaveSignOffFlow(db, opts...),
		LeaveSignOffSetting:       newLeaveSignOffSetting(db, opts...),
		LoginInformation:          newLoginInformation(db, opts...),
		Menu:                      newMenu(db, opts...),
		OvertimeSignOffSetting:    newOvertimeSignOffSetting(db, opts...),
		Permission:                newPermission(db, opts...),
		PositionGrade:             newPositionGrade(db, opts...),
		PositionRank:              newPositionRank(db, opts...),
		Role:                      newRole(db, opts...),
		RoleMenu:                  newRoleMenu(db, opts...),
		RolePermission:            newRolePermission(db, opts...),
		SalaryAddItem:             newSalaryAddItem(db, opts...),
		SalaryAddItemEmployee:     newSalaryAddItemEmployee(db, opts...),
		SalaryReduceItem:          newSalaryReduceItem(db, opts...),
		SalaryReduceItemEmployee:  newSalaryReduceItemEmployee(db, opts...),
		Vacation:                  newVacation(db, opts...),
		VacationGroup:             newVacationGroup(db, opts...),
		VacationGroupEmployee:     newVacationGroupEmployee(db, opts...),
		VacationGroupOvertimeRate: newVacationGroupOvertimeRate(db, opts...),
		VacationSchedule:          newVacationSchedule(db, opts...),
		WorkSchedule:              newWorkSchedule(db, opts...),
		WorkShift:                 newWorkShift(db, opts...),
	}
}

type Query struct {
	db *gorm.DB

	CalcSalary                calcSalary
	CalcSalaryAdd             calcSalaryAdd
	CalcSalaryEmployee        calcSalaryEmployee
	CalcSalaryReduce          calcSalaryReduce
	CheckInRequestForm        checkInRequestForm
	CheckInRequestFormDetail  checkInRequestFormDetail
	CheckInSignOffFlow        checkInSignOffFlow
	CheckInSignOffSetting     checkInSignOffSetting
	CheckInStatus             checkInStatus
	ConfigMap                 configMap
	Department                department
	Employee                  employee
	Leave                     leave
	LeaveCorrect              leaveCorrect
	LeaveDefer                leaveDefer
	LeaveGroup                leaveGroup
	LeaveGroupCondition       leaveGroupCondition
	LeaveGroupEmployee        leaveGroupEmployee
	LeaveRequestForm          leaveRequestForm
	LeaveSignOffFlow          leaveSignOffFlow
	LeaveSignOffSetting       leaveSignOffSetting
	LoginInformation          loginInformation
	Menu                      menu
	OvertimeSignOffSetting    overtimeSignOffSetting
	Permission                permission
	PositionGrade             positionGrade
	PositionRank              positionRank
	Role                      role
	RoleMenu                  roleMenu
	RolePermission            rolePermission
	SalaryAddItem             salaryAddItem
	SalaryAddItemEmployee     salaryAddItemEmployee
	SalaryReduceItem          salaryReduceItem
	SalaryReduceItemEmployee  salaryReduceItemEmployee
	Vacation                  vacation
	VacationGroup             vacationGroup
	VacationGroupEmployee     vacationGroupEmployee
	VacationGroupOvertimeRate vacationGroupOvertimeRate
	VacationSchedule          vacationSchedule
	WorkSchedule              workSchedule
	WorkShift                 workShift
}

func (q *Query) Available() bool { return q.db != nil }

func (q *Query) clone(db *gorm.DB) *Query {
	return &Query{
		db:                        db,
		CalcSalary:                q.CalcSalary.clone(db),
		CalcSalaryAdd:             q.CalcSalaryAdd.clone(db),
		CalcSalaryEmployee:        q.CalcSalaryEmployee.clone(db),
		CalcSalaryReduce:          q.CalcSalaryReduce.clone(db),
		CheckInRequestForm:        q.CheckInRequestForm.clone(db),
		CheckInRequestFormDetail:  q.CheckInRequestFormDetail.clone(db),
		CheckInSignOffFlow:        q.CheckInSignOffFlow.clone(db),
		CheckInSignOffSetting:     q.CheckInSignOffSetting.clone(db),
		CheckInStatus:             q.CheckInStatus.clone(db),
		ConfigMap:                 q.ConfigMap.clone(db),
		Department:                q.Department.clone(db),
		Employee:                  q.Employee.clone(db),
		Leave:                     q.Leave.clone(db),
		LeaveCorrect:              q.LeaveCorrect.clone(db),
		LeaveDefer:                q.LeaveDefer.clone(db),
		LeaveGroup:                q.LeaveGroup.clone(db),
		LeaveGroupCondition:       q.LeaveGroupCondition.clone(db),
		LeaveGroupEmployee:        q.LeaveGroupEmployee.clone(db),
		LeaveRequestForm:          q.LeaveRequestForm.clone(db),
		LeaveSignOffFlow:          q.LeaveSignOffFlow.clone(db),
		LeaveSignOffSetting:       q.LeaveSignOffSetting.clone(db),
		LoginInformation:          q.LoginInformation.clone(db),
		Menu:                      q.Menu.clone(db),
		OvertimeSignOffSetting:    q.OvertimeSignOffSetting.clone(db),
		Permission:                q.Permission.clone(db),
		PositionGrade:             q.PositionGrade.clone(db),
		PositionRank:              q.PositionRank.clone(db),
		Role:                      q.Role.clone(db),
		RoleMenu:                  q.RoleMenu.clone(db),
		RolePermission:            q.RolePermission.clone(db),
		SalaryAddItem:             q.SalaryAddItem.clone(db),
		SalaryAddItemEmployee:     q.SalaryAddItemEmployee.clone(db),
		SalaryReduceItem:          q.SalaryReduceItem.clone(db),
		SalaryReduceItemEmployee:  q.SalaryReduceItemEmployee.clone(db),
		Vacation:                  q.Vacation.clone(db),
		VacationGroup:             q.VacationGroup.clone(db),
		VacationGroupEmployee:     q.VacationGroupEmployee.clone(db),
		VacationGroupOvertimeRate: q.VacationGroupOvertimeRate.clone(db),
		VacationSchedule:          q.VacationSchedule.clone(db),
		WorkSchedule:              q.WorkSchedule.clone(db),
		WorkShift:                 q.WorkShift.clone(db),
	}
}

func (q *Query) ReadDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Read))
}

func (q *Query) WriteDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Write))
}

func (q *Query) ReplaceDB(db *gorm.DB) *Query {
	return &Query{
		db:                        db,
		CalcSalary:                q.CalcSalary.replaceDB(db),
		CalcSalaryAdd:             q.CalcSalaryAdd.replaceDB(db),
		CalcSalaryEmployee:        q.CalcSalaryEmployee.replaceDB(db),
		CalcSalaryReduce:          q.CalcSalaryReduce.replaceDB(db),
		CheckInRequestForm:        q.CheckInRequestForm.replaceDB(db),
		CheckInRequestFormDetail:  q.CheckInRequestFormDetail.replaceDB(db),
		CheckInSignOffFlow:        q.CheckInSignOffFlow.replaceDB(db),
		CheckInSignOffSetting:     q.CheckInSignOffSetting.replaceDB(db),
		CheckInStatus:             q.CheckInStatus.replaceDB(db),
		ConfigMap:                 q.ConfigMap.replaceDB(db),
		Department:                q.Department.replaceDB(db),
		Employee:                  q.Employee.replaceDB(db),
		Leave:                     q.Leave.replaceDB(db),
		LeaveCorrect:              q.LeaveCorrect.replaceDB(db),
		LeaveDefer:                q.LeaveDefer.replaceDB(db),
		LeaveGroup:                q.LeaveGroup.replaceDB(db),
		LeaveGroupCondition:       q.LeaveGroupCondition.replaceDB(db),
		LeaveGroupEmployee:        q.LeaveGroupEmployee.replaceDB(db),
		LeaveRequestForm:          q.LeaveRequestForm.replaceDB(db),
		LeaveSignOffFlow:          q.LeaveSignOffFlow.replaceDB(db),
		LeaveSignOffSetting:       q.LeaveSignOffSetting.replaceDB(db),
		LoginInformation:          q.LoginInformation.replaceDB(db),
		Menu:                      q.Menu.replaceDB(db),
		OvertimeSignOffSetting:    q.OvertimeSignOffSetting.replaceDB(db),
		Permission:                q.Permission.replaceDB(db),
		PositionGrade:             q.PositionGrade.replaceDB(db),
		PositionRank:              q.PositionRank.replaceDB(db),
		Role:                      q.Role.replaceDB(db),
		RoleMenu:                  q.RoleMenu.replaceDB(db),
		RolePermission:            q.RolePermission.replaceDB(db),
		SalaryAddItem:             q.SalaryAddItem.replaceDB(db),
		SalaryAddItemEmployee:     q.SalaryAddItemEmployee.replaceDB(db),
		SalaryReduceItem:          q.SalaryReduceItem.replaceDB(db),
		SalaryReduceItemEmployee:  q.SalaryReduceItemEmployee.replaceDB(db),
		Vacation:                  q.Vacation.replaceDB(db),
		VacationGroup:             q.VacationGroup.replaceDB(db),
		VacationGroupEmployee:     q.VacationGroupEmployee.replaceDB(db),
		VacationGroupOvertimeRate: q.VacationGroupOvertimeRate.replaceDB(db),
		VacationSchedule:          q.VacationSchedule.replaceDB(db),
		WorkSchedule:              q.WorkSchedule.replaceDB(db),
		WorkShift:                 q.WorkShift.replaceDB(db),
	}
}

type queryCtx struct {
	CalcSalary                ICalcSalaryDo
	CalcSalaryAdd             ICalcSalaryAddDo
	CalcSalaryEmployee        ICalcSalaryEmployeeDo
	CalcSalaryReduce          ICalcSalaryReduceDo
	CheckInRequestForm        ICheckInRequestFormDo
	CheckInRequestFormDetail  ICheckInRequestFormDetailDo
	CheckInSignOffFlow        ICheckInSignOffFlowDo
	CheckInSignOffSetting     ICheckInSignOffSettingDo
	CheckInStatus             ICheckInStatusDo
	ConfigMap                 IConfigMapDo
	Department                IDepartmentDo
	Employee                  IEmployeeDo
	Leave                     ILeaveDo
	LeaveCorrect              ILeaveCorrectDo
	LeaveDefer                ILeaveDeferDo
	LeaveGroup                ILeaveGroupDo
	LeaveGroupCondition       ILeaveGroupConditionDo
	LeaveGroupEmployee        ILeaveGroupEmployeeDo
	LeaveRequestForm          ILeaveRequestFormDo
	LeaveSignOffFlow          ILeaveSignOffFlowDo
	LeaveSignOffSetting       ILeaveSignOffSettingDo
	LoginInformation          ILoginInformationDo
	Menu                      IMenuDo
	OvertimeSignOffSetting    IOvertimeSignOffSettingDo
	Permission                IPermissionDo
	PositionGrade             IPositionGradeDo
	PositionRank              IPositionRankDo
	Role                      IRoleDo
	RoleMenu                  IRoleMenuDo
	RolePermission            IRolePermissionDo
	SalaryAddItem             ISalaryAddItemDo
	SalaryAddItemEmployee     ISalaryAddItemEmployeeDo
	SalaryReduceItem          ISalaryReduceItemDo
	SalaryReduceItemEmployee  ISalaryReduceItemEmployeeDo
	Vacation                  IVacationDo
	VacationGroup             IVacationGroupDo
	VacationGroupEmployee     IVacationGroupEmployeeDo
	VacationGroupOvertimeRate IVacationGroupOvertimeRateDo
	VacationSchedule          IVacationScheduleDo
	WorkSchedule              IWorkScheduleDo
	WorkShift                 IWorkShiftDo
}

func (q *Query) WithContext(ctx context.Context) *queryCtx {
	return &queryCtx{
		CalcSalary:                q.CalcSalary.WithContext(ctx),
		CalcSalaryAdd:             q.CalcSalaryAdd.WithContext(ctx),
		CalcSalaryEmployee:        q.CalcSalaryEmployee.WithContext(ctx),
		CalcSalaryReduce:          q.CalcSalaryReduce.WithContext(ctx),
		CheckInRequestForm:        q.CheckInRequestForm.WithContext(ctx),
		CheckInRequestFormDetail:  q.CheckInRequestFormDetail.WithContext(ctx),
		CheckInSignOffFlow:        q.CheckInSignOffFlow.WithContext(ctx),
		CheckInSignOffSetting:     q.CheckInSignOffSetting.WithContext(ctx),
		CheckInStatus:             q.CheckInStatus.WithContext(ctx),
		ConfigMap:                 q.ConfigMap.WithContext(ctx),
		Department:                q.Department.WithContext(ctx),
		Employee:                  q.Employee.WithContext(ctx),
		Leave:                     q.Leave.WithContext(ctx),
		LeaveCorrect:              q.LeaveCorrect.WithContext(ctx),
		LeaveDefer:                q.LeaveDefer.WithContext(ctx),
		LeaveGroup:                q.LeaveGroup.WithContext(ctx),
		LeaveGroupCondition:       q.LeaveGroupCondition.WithContext(ctx),
		LeaveGroupEmployee:        q.LeaveGroupEmployee.WithContext(ctx),
		LeaveRequestForm:          q.LeaveRequestForm.WithContext(ctx),
		LeaveSignOffFlow:          q.LeaveSignOffFlow.WithContext(ctx),
		LeaveSignOffSetting:       q.LeaveSignOffSetting.WithContext(ctx),
		LoginInformation:          q.LoginInformation.WithContext(ctx),
		Menu:                      q.Menu.WithContext(ctx),
		OvertimeSignOffSetting:    q.OvertimeSignOffSetting.WithContext(ctx),
		Permission:                q.Permission.WithContext(ctx),
		PositionGrade:             q.PositionGrade.WithContext(ctx),
		PositionRank:              q.PositionRank.WithContext(ctx),
		Role:                      q.Role.WithContext(ctx),
		RoleMenu:                  q.RoleMenu.WithContext(ctx),
		RolePermission:            q.RolePermission.WithContext(ctx),
		SalaryAddItem:             q.SalaryAddItem.WithContext(ctx),
		SalaryAddItemEmployee:     q.SalaryAddItemEmployee.WithContext(ctx),
		SalaryReduceItem:          q.SalaryReduceItem.WithContext(ctx),
		SalaryReduceItemEmployee:  q.SalaryReduceItemEmployee.WithContext(ctx),
		Vacation:                  q.Vacation.WithContext(ctx),
		VacationGroup:             q.VacationGroup.WithContext(ctx),
		VacationGroupEmployee:     q.VacationGroupEmployee.WithContext(ctx),
		VacationGroupOvertimeRate: q.VacationGroupOvertimeRate.WithContext(ctx),
		VacationSchedule:          q.VacationSchedule.WithContext(ctx),
		WorkSchedule:              q.WorkSchedule.WithContext(ctx),
		WorkShift:                 q.WorkShift.WithContext(ctx),
	}
}

func (q *Query) Transaction(fc func(tx *Query) error, opts ...*sql.TxOptions) error {
	return q.db.Transaction(func(tx *gorm.DB) error { return fc(q.clone(tx)) }, opts...)
}

func (q *Query) Begin(opts ...*sql.TxOptions) *QueryTx {
	tx := q.db.Begin(opts...)
	return &QueryTx{Query: q.clone(tx), Error: tx.Error}
}

type QueryTx struct {
	*Query
	Error error
}

func (q *QueryTx) Commit() error {
	return q.db.Commit().Error
}

func (q *QueryTx) Rollback() error {
	return q.db.Rollback().Error
}

func (q *QueryTx) SavePoint(name string) error {
	return q.db.SavePoint(name).Error
}

func (q *QueryTx) RollbackTo(name string) error {
	return q.db.RollbackTo(name).Error
}
