// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"

	"gorm.io/gen"

	"gorm.io/plugin/dbresolver"
)

var (
	Q                         = new(Query)
	Department                *department
	Employee                  *employee
	Leave                     *leave
	LeaveGroup                *leaveGroup
	LeaveGroupCondition       *leaveGroupCondition
	LeaveGroupEmployee        *leaveGroupEmployee
	LoginInformation          *loginInformation
	Menu                      *menu
	Permission                *permission
	PositionGrade             *positionGrade
	PositionRank              *positionRank
	Role                      *role
	RoleMenu                  *roleMenu
	RolePermission            *rolePermission
	Vacation                  *vacation
	VacationGroup             *vacationGroup
	VacationGroupEmployee     *vacationGroupEmployee
	VacationGroupOvertimeRate *vacationGroupOvertimeRate
	VacationSchedule          *vacationSchedule
	WorkSchedule              *workSchedule
	WorkShift                 *workShift
)

func SetDefault(db *gorm.DB, opts ...gen.DOOption) {
	*Q = *Use(db, opts...)
	Department = &Q.Department
	Employee = &Q.Employee
	Leave = &Q.Leave
	LeaveGroup = &Q.LeaveGroup
	LeaveGroupCondition = &Q.LeaveGroupCondition
	LeaveGroupEmployee = &Q.LeaveGroupEmployee
	LoginInformation = &Q.LoginInformation
	Menu = &Q.Menu
	Permission = &Q.Permission
	PositionGrade = &Q.PositionGrade
	PositionRank = &Q.PositionRank
	Role = &Q.Role
	RoleMenu = &Q.RoleMenu
	RolePermission = &Q.RolePermission
	Vacation = &Q.Vacation
	VacationGroup = &Q.VacationGroup
	VacationGroupEmployee = &Q.VacationGroupEmployee
	VacationGroupOvertimeRate = &Q.VacationGroupOvertimeRate
	VacationSchedule = &Q.VacationSchedule
	WorkSchedule = &Q.WorkSchedule
	WorkShift = &Q.WorkShift
}

func Use(db *gorm.DB, opts ...gen.DOOption) *Query {
	return &Query{
		db:                        db,
		Department:                newDepartment(db, opts...),
		Employee:                  newEmployee(db, opts...),
		Leave:                     newLeave(db, opts...),
		LeaveGroup:                newLeaveGroup(db, opts...),
		LeaveGroupCondition:       newLeaveGroupCondition(db, opts...),
		LeaveGroupEmployee:        newLeaveGroupEmployee(db, opts...),
		LoginInformation:          newLoginInformation(db, opts...),
		Menu:                      newMenu(db, opts...),
		Permission:                newPermission(db, opts...),
		PositionGrade:             newPositionGrade(db, opts...),
		PositionRank:              newPositionRank(db, opts...),
		Role:                      newRole(db, opts...),
		RoleMenu:                  newRoleMenu(db, opts...),
		RolePermission:            newRolePermission(db, opts...),
		Vacation:                  newVacation(db, opts...),
		VacationGroup:             newVacationGroup(db, opts...),
		VacationGroupEmployee:     newVacationGroupEmployee(db, opts...),
		VacationGroupOvertimeRate: newVacationGroupOvertimeRate(db, opts...),
		VacationSchedule:          newVacationSchedule(db, opts...),
		WorkSchedule:              newWorkSchedule(db, opts...),
		WorkShift:                 newWorkShift(db, opts...),
	}
}

type Query struct {
	db *gorm.DB

	Department                department
	Employee                  employee
	Leave                     leave
	LeaveGroup                leaveGroup
	LeaveGroupCondition       leaveGroupCondition
	LeaveGroupEmployee        leaveGroupEmployee
	LoginInformation          loginInformation
	Menu                      menu
	Permission                permission
	PositionGrade             positionGrade
	PositionRank              positionRank
	Role                      role
	RoleMenu                  roleMenu
	RolePermission            rolePermission
	Vacation                  vacation
	VacationGroup             vacationGroup
	VacationGroupEmployee     vacationGroupEmployee
	VacationGroupOvertimeRate vacationGroupOvertimeRate
	VacationSchedule          vacationSchedule
	WorkSchedule              workSchedule
	WorkShift                 workShift
}

func (q *Query) Available() bool { return q.db != nil }

func (q *Query) clone(db *gorm.DB) *Query {
	return &Query{
		db:                        db,
		Department:                q.Department.clone(db),
		Employee:                  q.Employee.clone(db),
		Leave:                     q.Leave.clone(db),
		LeaveGroup:                q.LeaveGroup.clone(db),
		LeaveGroupCondition:       q.LeaveGroupCondition.clone(db),
		LeaveGroupEmployee:        q.LeaveGroupEmployee.clone(db),
		LoginInformation:          q.LoginInformation.clone(db),
		Menu:                      q.Menu.clone(db),
		Permission:                q.Permission.clone(db),
		PositionGrade:             q.PositionGrade.clone(db),
		PositionRank:              q.PositionRank.clone(db),
		Role:                      q.Role.clone(db),
		RoleMenu:                  q.RoleMenu.clone(db),
		RolePermission:            q.RolePermission.clone(db),
		Vacation:                  q.Vacation.clone(db),
		VacationGroup:             q.VacationGroup.clone(db),
		VacationGroupEmployee:     q.VacationGroupEmployee.clone(db),
		VacationGroupOvertimeRate: q.VacationGroupOvertimeRate.clone(db),
		VacationSchedule:          q.VacationSchedule.clone(db),
		WorkSchedule:              q.WorkSchedule.clone(db),
		WorkShift:                 q.WorkShift.clone(db),
	}
}

func (q *Query) ReadDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Read))
}

func (q *Query) WriteDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Write))
}

func (q *Query) ReplaceDB(db *gorm.DB) *Query {
	return &Query{
		db:                        db,
		Department:                q.Department.replaceDB(db),
		Employee:                  q.Employee.replaceDB(db),
		Leave:                     q.Leave.replaceDB(db),
		LeaveGroup:                q.LeaveGroup.replaceDB(db),
		LeaveGroupCondition:       q.LeaveGroupCondition.replaceDB(db),
		LeaveGroupEmployee:        q.LeaveGroupEmployee.replaceDB(db),
		LoginInformation:          q.LoginInformation.replaceDB(db),
		Menu:                      q.Menu.replaceDB(db),
		Permission:                q.Permission.replaceDB(db),
		PositionGrade:             q.PositionGrade.replaceDB(db),
		PositionRank:              q.PositionRank.replaceDB(db),
		Role:                      q.Role.replaceDB(db),
		RoleMenu:                  q.RoleMenu.replaceDB(db),
		RolePermission:            q.RolePermission.replaceDB(db),
		Vacation:                  q.Vacation.replaceDB(db),
		VacationGroup:             q.VacationGroup.replaceDB(db),
		VacationGroupEmployee:     q.VacationGroupEmployee.replaceDB(db),
		VacationGroupOvertimeRate: q.VacationGroupOvertimeRate.replaceDB(db),
		VacationSchedule:          q.VacationSchedule.replaceDB(db),
		WorkSchedule:              q.WorkSchedule.replaceDB(db),
		WorkShift:                 q.WorkShift.replaceDB(db),
	}
}

type queryCtx struct {
	Department                IDepartmentDo
	Employee                  IEmployeeDo
	Leave                     ILeaveDo
	LeaveGroup                ILeaveGroupDo
	LeaveGroupCondition       ILeaveGroupConditionDo
	LeaveGroupEmployee        ILeaveGroupEmployeeDo
	LoginInformation          ILoginInformationDo
	Menu                      IMenuDo
	Permission                IPermissionDo
	PositionGrade             IPositionGradeDo
	PositionRank              IPositionRankDo
	Role                      IRoleDo
	RoleMenu                  IRoleMenuDo
	RolePermission            IRolePermissionDo
	Vacation                  IVacationDo
	VacationGroup             IVacationGroupDo
	VacationGroupEmployee     IVacationGroupEmployeeDo
	VacationGroupOvertimeRate IVacationGroupOvertimeRateDo
	VacationSchedule          IVacationScheduleDo
	WorkSchedule              IWorkScheduleDo
	WorkShift                 IWorkShiftDo
}

func (q *Query) WithContext(ctx context.Context) *queryCtx {
	return &queryCtx{
		Department:                q.Department.WithContext(ctx),
		Employee:                  q.Employee.WithContext(ctx),
		Leave:                     q.Leave.WithContext(ctx),
		LeaveGroup:                q.LeaveGroup.WithContext(ctx),
		LeaveGroupCondition:       q.LeaveGroupCondition.WithContext(ctx),
		LeaveGroupEmployee:        q.LeaveGroupEmployee.WithContext(ctx),
		LoginInformation:          q.LoginInformation.WithContext(ctx),
		Menu:                      q.Menu.WithContext(ctx),
		Permission:                q.Permission.WithContext(ctx),
		PositionGrade:             q.PositionGrade.WithContext(ctx),
		PositionRank:              q.PositionRank.WithContext(ctx),
		Role:                      q.Role.WithContext(ctx),
		RoleMenu:                  q.RoleMenu.WithContext(ctx),
		RolePermission:            q.RolePermission.WithContext(ctx),
		Vacation:                  q.Vacation.WithContext(ctx),
		VacationGroup:             q.VacationGroup.WithContext(ctx),
		VacationGroupEmployee:     q.VacationGroupEmployee.WithContext(ctx),
		VacationGroupOvertimeRate: q.VacationGroupOvertimeRate.WithContext(ctx),
		VacationSchedule:          q.VacationSchedule.WithContext(ctx),
		WorkSchedule:              q.WorkSchedule.WithContext(ctx),
		WorkShift:                 q.WorkShift.WithContext(ctx),
	}
}

func (q *Query) Transaction(fc func(tx *Query) error, opts ...*sql.TxOptions) error {
	return q.db.Transaction(func(tx *gorm.DB) error { return fc(q.clone(tx)) }, opts...)
}

func (q *Query) Begin(opts ...*sql.TxOptions) *QueryTx {
	tx := q.db.Begin(opts...)
	return &QueryTx{Query: q.clone(tx), Error: tx.Error}
}

type QueryTx struct {
	*Query
	Error error
}

func (q *QueryTx) Commit() error {
	return q.db.Commit().Error
}

func (q *QueryTx) Rollback() error {
	return q.db.Rollback().Error
}

func (q *QueryTx) SavePoint(name string) error {
	return q.db.SavePoint(name).Error
}

func (q *QueryTx) RollbackTo(name string) error {
	return q.db.RollbackTo(name).Error
}
