// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"hrapi/internal/types"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"
)

func newCheckInRequestFormDetail(db *gorm.DB, opts ...gen.DOOption) checkInRequestFormDetail {
	_checkInRequestFormDetail := checkInRequestFormDetail{}

	_checkInRequestFormDetail.checkInRequestFormDetailDo.UseDB(db, opts...)
	_checkInRequestFormDetail.checkInRequestFormDetailDo.UseModel(&types.CheckInRequestFormDetail{})

	tableName := _checkInRequestFormDetail.checkInRequestFormDetailDo.TableName()
	_checkInRequestFormDetail.ALL = field.NewAsterisk(tableName)
	_checkInRequestFormDetail.ID = field.NewUint(tableName, "id")
	_checkInRequestFormDetail.CreatedAt = field.NewTime(tableName, "created_at")
	_checkInRequestFormDetail.UpdatedAt = field.NewTime(tableName, "updated_at")
	_checkInRequestFormDetail.DeletedAt = field.NewField(tableName, "deleted_at")
	_checkInRequestFormDetail.CheckInRequestFormID = field.NewUint(tableName, "check_in_request_form_id")
	_checkInRequestFormDetail.CheckInType = field.NewField(tableName, "check_in_type")
	_checkInRequestFormDetail.Date = field.NewField(tableName, "date")
	_checkInRequestFormDetail.Time = field.NewField(tableName, "time")
	_checkInRequestFormDetail.Remark = field.NewString(tableName, "remark")
	_checkInRequestFormDetail.CheckInRequestForm = checkInRequestFormDetailBelongsToCheckInRequestForm{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("CheckInRequestForm", "types.CheckInRequestForm"),
		Employee: struct {
			field.RelationField
			Department struct {
				field.RelationField
				Manager struct {
					field.RelationField
				}
			}
			Rank struct {
				field.RelationField
				Grade struct {
					field.RelationField
					Rank struct {
						field.RelationField
					}
				}
			}
			Grade struct {
				field.RelationField
			}
			LoginInformation struct {
				field.RelationField
				Employee struct {
					field.RelationField
				}
			}
			Roles struct {
				field.RelationField
				Employees struct {
					field.RelationField
				}
				Permissions struct {
					field.RelationField
					Roles struct {
						field.RelationField
					}
				}
				Menus struct {
					field.RelationField
					Roles struct {
						field.RelationField
					}
				}
			}
		}{
			RelationField: field.NewRelation("CheckInRequestForm.Employee", "types.Employee"),
			Department: struct {
				field.RelationField
				Manager struct {
					field.RelationField
				}
			}{
				RelationField: field.NewRelation("CheckInRequestForm.Employee.Department", "types.Department"),
				Manager: struct {
					field.RelationField
				}{
					RelationField: field.NewRelation("CheckInRequestForm.Employee.Department.Manager", "types.Employee"),
				},
			},
			Rank: struct {
				field.RelationField
				Grade struct {
					field.RelationField
					Rank struct {
						field.RelationField
					}
				}
			}{
				RelationField: field.NewRelation("CheckInRequestForm.Employee.Rank", "types.PositionRank"),
				Grade: struct {
					field.RelationField
					Rank struct {
						field.RelationField
					}
				}{
					RelationField: field.NewRelation("CheckInRequestForm.Employee.Rank.Grade", "types.PositionGrade"),
					Rank: struct {
						field.RelationField
					}{
						RelationField: field.NewRelation("CheckInRequestForm.Employee.Rank.Grade.Rank", "types.PositionRank"),
					},
				},
			},
			Grade: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("CheckInRequestForm.Employee.Grade", "types.PositionGrade"),
			},
			LoginInformation: struct {
				field.RelationField
				Employee struct {
					field.RelationField
				}
			}{
				RelationField: field.NewRelation("CheckInRequestForm.Employee.LoginInformation", "types.LoginInformation"),
				Employee: struct {
					field.RelationField
				}{
					RelationField: field.NewRelation("CheckInRequestForm.Employee.LoginInformation.Employee", "types.Employee"),
				},
			},
			Roles: struct {
				field.RelationField
				Employees struct {
					field.RelationField
				}
				Permissions struct {
					field.RelationField
					Roles struct {
						field.RelationField
					}
				}
				Menus struct {
					field.RelationField
					Roles struct {
						field.RelationField
					}
				}
			}{
				RelationField: field.NewRelation("CheckInRequestForm.Employee.Roles", "types.Role"),
				Employees: struct {
					field.RelationField
				}{
					RelationField: field.NewRelation("CheckInRequestForm.Employee.Roles.Employees", "types.Employee"),
				},
				Permissions: struct {
					field.RelationField
					Roles struct {
						field.RelationField
					}
				}{
					RelationField: field.NewRelation("CheckInRequestForm.Employee.Roles.Permissions", "types.Permission"),
					Roles: struct {
						field.RelationField
					}{
						RelationField: field.NewRelation("CheckInRequestForm.Employee.Roles.Permissions.Roles", "types.Role"),
					},
				},
				Menus: struct {
					field.RelationField
					Roles struct {
						field.RelationField
					}
				}{
					RelationField: field.NewRelation("CheckInRequestForm.Employee.Roles.Menus", "types.Menu"),
					Roles: struct {
						field.RelationField
					}{
						RelationField: field.NewRelation("CheckInRequestForm.Employee.Roles.Menus.Roles", "types.Role"),
					},
				},
			},
		},
		Department: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("CheckInRequestForm.Department", "types.Department"),
		},
		SignOffFlow: struct {
			field.RelationField
			CheckInRequestForm struct {
				field.RelationField
			}
			SignOffEmployee struct {
				field.RelationField
			}
		}{
			RelationField: field.NewRelation("CheckInRequestForm.SignOffFlow", "types.CheckInSignOffFlow"),
			CheckInRequestForm: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("CheckInRequestForm.SignOffFlow.CheckInRequestForm", "types.CheckInRequestForm"),
			},
			SignOffEmployee: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("CheckInRequestForm.SignOffFlow.SignOffEmployee", "types.Employee"),
			},
		},
		Detail: struct {
			field.RelationField
			CheckInRequestForm struct {
				field.RelationField
			}
		}{
			RelationField: field.NewRelation("CheckInRequestForm.Detail", "types.CheckInRequestFormDetail"),
			CheckInRequestForm: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("CheckInRequestForm.Detail.CheckInRequestForm", "types.CheckInRequestForm"),
			},
		},
	}

	_checkInRequestFormDetail.fillFieldMap()

	return _checkInRequestFormDetail
}

type checkInRequestFormDetail struct {
	checkInRequestFormDetailDo checkInRequestFormDetailDo

	ALL                  field.Asterisk
	ID                   field.Uint
	CreatedAt            field.Time
	UpdatedAt            field.Time
	DeletedAt            field.Field
	CheckInRequestFormID field.Uint
	CheckInType          field.Field
	Date                 field.Field
	Time                 field.Field
	Remark               field.String
	CheckInRequestForm   checkInRequestFormDetailBelongsToCheckInRequestForm

	fieldMap map[string]field.Expr
}

func (c checkInRequestFormDetail) Table(newTableName string) *checkInRequestFormDetail {
	c.checkInRequestFormDetailDo.UseTable(newTableName)
	return c.updateTableName(newTableName)
}

func (c checkInRequestFormDetail) As(alias string) *checkInRequestFormDetail {
	c.checkInRequestFormDetailDo.DO = *(c.checkInRequestFormDetailDo.As(alias).(*gen.DO))
	return c.updateTableName(alias)
}

func (c *checkInRequestFormDetail) updateTableName(table string) *checkInRequestFormDetail {
	c.ALL = field.NewAsterisk(table)
	c.ID = field.NewUint(table, "id")
	c.CreatedAt = field.NewTime(table, "created_at")
	c.UpdatedAt = field.NewTime(table, "updated_at")
	c.DeletedAt = field.NewField(table, "deleted_at")
	c.CheckInRequestFormID = field.NewUint(table, "check_in_request_form_id")
	c.CheckInType = field.NewField(table, "check_in_type")
	c.Date = field.NewField(table, "date")
	c.Time = field.NewField(table, "time")
	c.Remark = field.NewString(table, "remark")

	c.fillFieldMap()

	return c
}

func (c *checkInRequestFormDetail) WithContext(ctx context.Context) ICheckInRequestFormDetailDo {
	return c.checkInRequestFormDetailDo.WithContext(ctx)
}

func (c checkInRequestFormDetail) TableName() string { return c.checkInRequestFormDetailDo.TableName() }

func (c checkInRequestFormDetail) Alias() string { return c.checkInRequestFormDetailDo.Alias() }

func (c checkInRequestFormDetail) Columns(cols ...field.Expr) gen.Columns {
	return c.checkInRequestFormDetailDo.Columns(cols...)
}

func (c *checkInRequestFormDetail) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := c.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (c *checkInRequestFormDetail) fillFieldMap() {
	c.fieldMap = make(map[string]field.Expr, 10)
	c.fieldMap["id"] = c.ID
	c.fieldMap["created_at"] = c.CreatedAt
	c.fieldMap["updated_at"] = c.UpdatedAt
	c.fieldMap["deleted_at"] = c.DeletedAt
	c.fieldMap["check_in_request_form_id"] = c.CheckInRequestFormID
	c.fieldMap["check_in_type"] = c.CheckInType
	c.fieldMap["date"] = c.Date
	c.fieldMap["time"] = c.Time
	c.fieldMap["remark"] = c.Remark

}

func (c checkInRequestFormDetail) clone(db *gorm.DB) checkInRequestFormDetail {
	c.checkInRequestFormDetailDo.ReplaceConnPool(db.Statement.ConnPool)
	return c
}

func (c checkInRequestFormDetail) replaceDB(db *gorm.DB) checkInRequestFormDetail {
	c.checkInRequestFormDetailDo.ReplaceDB(db)
	return c
}

type checkInRequestFormDetailBelongsToCheckInRequestForm struct {
	db *gorm.DB

	field.RelationField

	Employee struct {
		field.RelationField
		Department struct {
			field.RelationField
			Manager struct {
				field.RelationField
			}
		}
		Rank struct {
			field.RelationField
			Grade struct {
				field.RelationField
				Rank struct {
					field.RelationField
				}
			}
		}
		Grade struct {
			field.RelationField
		}
		LoginInformation struct {
			field.RelationField
			Employee struct {
				field.RelationField
			}
		}
		Roles struct {
			field.RelationField
			Employees struct {
				field.RelationField
			}
			Permissions struct {
				field.RelationField
				Roles struct {
					field.RelationField
				}
			}
			Menus struct {
				field.RelationField
				Roles struct {
					field.RelationField
				}
			}
		}
	}
	Department struct {
		field.RelationField
	}
	SignOffFlow struct {
		field.RelationField
		CheckInRequestForm struct {
			field.RelationField
		}
		SignOffEmployee struct {
			field.RelationField
		}
	}
	Detail struct {
		field.RelationField
		CheckInRequestForm struct {
			field.RelationField
		}
	}
}

func (a checkInRequestFormDetailBelongsToCheckInRequestForm) Where(conds ...field.Expr) *checkInRequestFormDetailBelongsToCheckInRequestForm {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a checkInRequestFormDetailBelongsToCheckInRequestForm) WithContext(ctx context.Context) *checkInRequestFormDetailBelongsToCheckInRequestForm {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a checkInRequestFormDetailBelongsToCheckInRequestForm) Session(session *gorm.Session) *checkInRequestFormDetailBelongsToCheckInRequestForm {
	a.db = a.db.Session(session)
	return &a
}

func (a checkInRequestFormDetailBelongsToCheckInRequestForm) Model(m *types.CheckInRequestFormDetail) *checkInRequestFormDetailBelongsToCheckInRequestFormTx {
	return &checkInRequestFormDetailBelongsToCheckInRequestFormTx{a.db.Model(m).Association(a.Name())}
}

type checkInRequestFormDetailBelongsToCheckInRequestFormTx struct{ tx *gorm.Association }

func (a checkInRequestFormDetailBelongsToCheckInRequestFormTx) Find() (result *types.CheckInRequestForm, err error) {
	return result, a.tx.Find(&result)
}

func (a checkInRequestFormDetailBelongsToCheckInRequestFormTx) Append(values ...*types.CheckInRequestForm) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a checkInRequestFormDetailBelongsToCheckInRequestFormTx) Replace(values ...*types.CheckInRequestForm) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a checkInRequestFormDetailBelongsToCheckInRequestFormTx) Delete(values ...*types.CheckInRequestForm) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a checkInRequestFormDetailBelongsToCheckInRequestFormTx) Clear() error {
	return a.tx.Clear()
}

func (a checkInRequestFormDetailBelongsToCheckInRequestFormTx) Count() int64 {
	return a.tx.Count()
}

type checkInRequestFormDetailDo struct{ gen.DO }

type ICheckInRequestFormDetailDo interface {
	gen.SubQuery
	Debug() ICheckInRequestFormDetailDo
	WithContext(ctx context.Context) ICheckInRequestFormDetailDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ICheckInRequestFormDetailDo
	WriteDB() ICheckInRequestFormDetailDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ICheckInRequestFormDetailDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ICheckInRequestFormDetailDo
	Not(conds ...gen.Condition) ICheckInRequestFormDetailDo
	Or(conds ...gen.Condition) ICheckInRequestFormDetailDo
	Select(conds ...field.Expr) ICheckInRequestFormDetailDo
	Where(conds ...gen.Condition) ICheckInRequestFormDetailDo
	Order(conds ...field.Expr) ICheckInRequestFormDetailDo
	Distinct(cols ...field.Expr) ICheckInRequestFormDetailDo
	Omit(cols ...field.Expr) ICheckInRequestFormDetailDo
	Join(table schema.Tabler, on ...field.Expr) ICheckInRequestFormDetailDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ICheckInRequestFormDetailDo
	RightJoin(table schema.Tabler, on ...field.Expr) ICheckInRequestFormDetailDo
	Group(cols ...field.Expr) ICheckInRequestFormDetailDo
	Having(conds ...gen.Condition) ICheckInRequestFormDetailDo
	Limit(limit int) ICheckInRequestFormDetailDo
	Offset(offset int) ICheckInRequestFormDetailDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ICheckInRequestFormDetailDo
	Unscoped() ICheckInRequestFormDetailDo
	Create(values ...*types.CheckInRequestFormDetail) error
	CreateInBatches(values []*types.CheckInRequestFormDetail, batchSize int) error
	Save(values ...*types.CheckInRequestFormDetail) error
	First() (*types.CheckInRequestFormDetail, error)
	Take() (*types.CheckInRequestFormDetail, error)
	Last() (*types.CheckInRequestFormDetail, error)
	Find() ([]*types.CheckInRequestFormDetail, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*types.CheckInRequestFormDetail, err error)
	FindInBatches(result *[]*types.CheckInRequestFormDetail, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*types.CheckInRequestFormDetail) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ICheckInRequestFormDetailDo
	Assign(attrs ...field.AssignExpr) ICheckInRequestFormDetailDo
	Joins(fields ...field.RelationField) ICheckInRequestFormDetailDo
	Preload(fields ...field.RelationField) ICheckInRequestFormDetailDo
	FirstOrInit() (*types.CheckInRequestFormDetail, error)
	FirstOrCreate() (*types.CheckInRequestFormDetail, error)
	FindByPage(offset int, limit int) (result []*types.CheckInRequestFormDetail, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ICheckInRequestFormDetailDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (c checkInRequestFormDetailDo) Debug() ICheckInRequestFormDetailDo {
	return c.withDO(c.DO.Debug())
}

func (c checkInRequestFormDetailDo) WithContext(ctx context.Context) ICheckInRequestFormDetailDo {
	return c.withDO(c.DO.WithContext(ctx))
}

func (c checkInRequestFormDetailDo) ReadDB() ICheckInRequestFormDetailDo {
	return c.Clauses(dbresolver.Read)
}

func (c checkInRequestFormDetailDo) WriteDB() ICheckInRequestFormDetailDo {
	return c.Clauses(dbresolver.Write)
}

func (c checkInRequestFormDetailDo) Session(config *gorm.Session) ICheckInRequestFormDetailDo {
	return c.withDO(c.DO.Session(config))
}

func (c checkInRequestFormDetailDo) Clauses(conds ...clause.Expression) ICheckInRequestFormDetailDo {
	return c.withDO(c.DO.Clauses(conds...))
}

func (c checkInRequestFormDetailDo) Returning(value interface{}, columns ...string) ICheckInRequestFormDetailDo {
	return c.withDO(c.DO.Returning(value, columns...))
}

func (c checkInRequestFormDetailDo) Not(conds ...gen.Condition) ICheckInRequestFormDetailDo {
	return c.withDO(c.DO.Not(conds...))
}

func (c checkInRequestFormDetailDo) Or(conds ...gen.Condition) ICheckInRequestFormDetailDo {
	return c.withDO(c.DO.Or(conds...))
}

func (c checkInRequestFormDetailDo) Select(conds ...field.Expr) ICheckInRequestFormDetailDo {
	return c.withDO(c.DO.Select(conds...))
}

func (c checkInRequestFormDetailDo) Where(conds ...gen.Condition) ICheckInRequestFormDetailDo {
	return c.withDO(c.DO.Where(conds...))
}

func (c checkInRequestFormDetailDo) Order(conds ...field.Expr) ICheckInRequestFormDetailDo {
	return c.withDO(c.DO.Order(conds...))
}

func (c checkInRequestFormDetailDo) Distinct(cols ...field.Expr) ICheckInRequestFormDetailDo {
	return c.withDO(c.DO.Distinct(cols...))
}

func (c checkInRequestFormDetailDo) Omit(cols ...field.Expr) ICheckInRequestFormDetailDo {
	return c.withDO(c.DO.Omit(cols...))
}

func (c checkInRequestFormDetailDo) Join(table schema.Tabler, on ...field.Expr) ICheckInRequestFormDetailDo {
	return c.withDO(c.DO.Join(table, on...))
}

func (c checkInRequestFormDetailDo) LeftJoin(table schema.Tabler, on ...field.Expr) ICheckInRequestFormDetailDo {
	return c.withDO(c.DO.LeftJoin(table, on...))
}

func (c checkInRequestFormDetailDo) RightJoin(table schema.Tabler, on ...field.Expr) ICheckInRequestFormDetailDo {
	return c.withDO(c.DO.RightJoin(table, on...))
}

func (c checkInRequestFormDetailDo) Group(cols ...field.Expr) ICheckInRequestFormDetailDo {
	return c.withDO(c.DO.Group(cols...))
}

func (c checkInRequestFormDetailDo) Having(conds ...gen.Condition) ICheckInRequestFormDetailDo {
	return c.withDO(c.DO.Having(conds...))
}

func (c checkInRequestFormDetailDo) Limit(limit int) ICheckInRequestFormDetailDo {
	return c.withDO(c.DO.Limit(limit))
}

func (c checkInRequestFormDetailDo) Offset(offset int) ICheckInRequestFormDetailDo {
	return c.withDO(c.DO.Offset(offset))
}

func (c checkInRequestFormDetailDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ICheckInRequestFormDetailDo {
	return c.withDO(c.DO.Scopes(funcs...))
}

func (c checkInRequestFormDetailDo) Unscoped() ICheckInRequestFormDetailDo {
	return c.withDO(c.DO.Unscoped())
}

func (c checkInRequestFormDetailDo) Create(values ...*types.CheckInRequestFormDetail) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Create(values)
}

func (c checkInRequestFormDetailDo) CreateInBatches(values []*types.CheckInRequestFormDetail, batchSize int) error {
	return c.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (c checkInRequestFormDetailDo) Save(values ...*types.CheckInRequestFormDetail) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Save(values)
}

func (c checkInRequestFormDetailDo) First() (*types.CheckInRequestFormDetail, error) {
	if result, err := c.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*types.CheckInRequestFormDetail), nil
	}
}

func (c checkInRequestFormDetailDo) Take() (*types.CheckInRequestFormDetail, error) {
	if result, err := c.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*types.CheckInRequestFormDetail), nil
	}
}

func (c checkInRequestFormDetailDo) Last() (*types.CheckInRequestFormDetail, error) {
	if result, err := c.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*types.CheckInRequestFormDetail), nil
	}
}

func (c checkInRequestFormDetailDo) Find() ([]*types.CheckInRequestFormDetail, error) {
	result, err := c.DO.Find()
	return result.([]*types.CheckInRequestFormDetail), err
}

func (c checkInRequestFormDetailDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*types.CheckInRequestFormDetail, err error) {
	buf := make([]*types.CheckInRequestFormDetail, 0, batchSize)
	err = c.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (c checkInRequestFormDetailDo) FindInBatches(result *[]*types.CheckInRequestFormDetail, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return c.DO.FindInBatches(result, batchSize, fc)
}

func (c checkInRequestFormDetailDo) Attrs(attrs ...field.AssignExpr) ICheckInRequestFormDetailDo {
	return c.withDO(c.DO.Attrs(attrs...))
}

func (c checkInRequestFormDetailDo) Assign(attrs ...field.AssignExpr) ICheckInRequestFormDetailDo {
	return c.withDO(c.DO.Assign(attrs...))
}

func (c checkInRequestFormDetailDo) Joins(fields ...field.RelationField) ICheckInRequestFormDetailDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Joins(_f))
	}
	return &c
}

func (c checkInRequestFormDetailDo) Preload(fields ...field.RelationField) ICheckInRequestFormDetailDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Preload(_f))
	}
	return &c
}

func (c checkInRequestFormDetailDo) FirstOrInit() (*types.CheckInRequestFormDetail, error) {
	if result, err := c.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*types.CheckInRequestFormDetail), nil
	}
}

func (c checkInRequestFormDetailDo) FirstOrCreate() (*types.CheckInRequestFormDetail, error) {
	if result, err := c.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*types.CheckInRequestFormDetail), nil
	}
}

func (c checkInRequestFormDetailDo) FindByPage(offset int, limit int) (result []*types.CheckInRequestFormDetail, count int64, err error) {
	result, err = c.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = c.Offset(-1).Limit(-1).Count()
	return
}

func (c checkInRequestFormDetailDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = c.Count()
	if err != nil {
		return
	}

	err = c.Offset(offset).Limit(limit).Scan(result)
	return
}

func (c checkInRequestFormDetailDo) Scan(result interface{}) (err error) {
	return c.DO.Scan(result)
}

func (c checkInRequestFormDetailDo) Delete(models ...*types.CheckInRequestFormDetail) (result gen.ResultInfo, err error) {
	return c.DO.Delete(models)
}

func (c *checkInRequestFormDetailDo) withDO(do gen.Dao) *checkInRequestFormDetailDo {
	c.DO = *do.(*gen.DO)
	return c
}
