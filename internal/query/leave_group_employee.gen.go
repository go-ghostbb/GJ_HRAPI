// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"hrapi/internal/types"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"
)

func newLeaveGroupEmployee(db *gorm.DB, opts ...gen.DOOption) leaveGroupEmployee {
	_leaveGroupEmployee := leaveGroupEmployee{}

	_leaveGroupEmployee.leaveGroupEmployeeDo.UseDB(db, opts...)
	_leaveGroupEmployee.leaveGroupEmployeeDo.UseModel(&types.LeaveGroupEmployee{})

	tableName := _leaveGroupEmployee.leaveGroupEmployeeDo.TableName()
	_leaveGroupEmployee.ALL = field.NewAsterisk(tableName)
	_leaveGroupEmployee.LeaveGroupID = field.NewUint(tableName, "leave_group_id")
	_leaveGroupEmployee.EmployeeID = field.NewUint(tableName, "employee_id")

	_leaveGroupEmployee.fillFieldMap()

	return _leaveGroupEmployee
}

type leaveGroupEmployee struct {
	leaveGroupEmployeeDo leaveGroupEmployeeDo

	ALL          field.Asterisk
	LeaveGroupID field.Uint
	EmployeeID   field.Uint

	fieldMap map[string]field.Expr
}

func (l leaveGroupEmployee) Table(newTableName string) *leaveGroupEmployee {
	l.leaveGroupEmployeeDo.UseTable(newTableName)
	return l.updateTableName(newTableName)
}

func (l leaveGroupEmployee) As(alias string) *leaveGroupEmployee {
	l.leaveGroupEmployeeDo.DO = *(l.leaveGroupEmployeeDo.As(alias).(*gen.DO))
	return l.updateTableName(alias)
}

func (l *leaveGroupEmployee) updateTableName(table string) *leaveGroupEmployee {
	l.ALL = field.NewAsterisk(table)
	l.LeaveGroupID = field.NewUint(table, "leave_group_id")
	l.EmployeeID = field.NewUint(table, "employee_id")

	l.fillFieldMap()

	return l
}

func (l *leaveGroupEmployee) WithContext(ctx context.Context) ILeaveGroupEmployeeDo {
	return l.leaveGroupEmployeeDo.WithContext(ctx)
}

func (l leaveGroupEmployee) TableName() string { return l.leaveGroupEmployeeDo.TableName() }

func (l leaveGroupEmployee) Alias() string { return l.leaveGroupEmployeeDo.Alias() }

func (l leaveGroupEmployee) Columns(cols ...field.Expr) gen.Columns {
	return l.leaveGroupEmployeeDo.Columns(cols...)
}

func (l *leaveGroupEmployee) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := l.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (l *leaveGroupEmployee) fillFieldMap() {
	l.fieldMap = make(map[string]field.Expr, 2)
	l.fieldMap["leave_group_id"] = l.LeaveGroupID
	l.fieldMap["employee_id"] = l.EmployeeID
}

func (l leaveGroupEmployee) clone(db *gorm.DB) leaveGroupEmployee {
	l.leaveGroupEmployeeDo.ReplaceConnPool(db.Statement.ConnPool)
	return l
}

func (l leaveGroupEmployee) replaceDB(db *gorm.DB) leaveGroupEmployee {
	l.leaveGroupEmployeeDo.ReplaceDB(db)
	return l
}

type leaveGroupEmployeeDo struct{ gen.DO }

type ILeaveGroupEmployeeDo interface {
	gen.SubQuery
	Debug() ILeaveGroupEmployeeDo
	WithContext(ctx context.Context) ILeaveGroupEmployeeDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ILeaveGroupEmployeeDo
	WriteDB() ILeaveGroupEmployeeDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ILeaveGroupEmployeeDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ILeaveGroupEmployeeDo
	Not(conds ...gen.Condition) ILeaveGroupEmployeeDo
	Or(conds ...gen.Condition) ILeaveGroupEmployeeDo
	Select(conds ...field.Expr) ILeaveGroupEmployeeDo
	Where(conds ...gen.Condition) ILeaveGroupEmployeeDo
	Order(conds ...field.Expr) ILeaveGroupEmployeeDo
	Distinct(cols ...field.Expr) ILeaveGroupEmployeeDo
	Omit(cols ...field.Expr) ILeaveGroupEmployeeDo
	Join(table schema.Tabler, on ...field.Expr) ILeaveGroupEmployeeDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ILeaveGroupEmployeeDo
	RightJoin(table schema.Tabler, on ...field.Expr) ILeaveGroupEmployeeDo
	Group(cols ...field.Expr) ILeaveGroupEmployeeDo
	Having(conds ...gen.Condition) ILeaveGroupEmployeeDo
	Limit(limit int) ILeaveGroupEmployeeDo
	Offset(offset int) ILeaveGroupEmployeeDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ILeaveGroupEmployeeDo
	Unscoped() ILeaveGroupEmployeeDo
	Create(values ...*types.LeaveGroupEmployee) error
	CreateInBatches(values []*types.LeaveGroupEmployee, batchSize int) error
	Save(values ...*types.LeaveGroupEmployee) error
	First() (*types.LeaveGroupEmployee, error)
	Take() (*types.LeaveGroupEmployee, error)
	Last() (*types.LeaveGroupEmployee, error)
	Find() ([]*types.LeaveGroupEmployee, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*types.LeaveGroupEmployee, err error)
	FindInBatches(result *[]*types.LeaveGroupEmployee, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*types.LeaveGroupEmployee) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ILeaveGroupEmployeeDo
	Assign(attrs ...field.AssignExpr) ILeaveGroupEmployeeDo
	Joins(fields ...field.RelationField) ILeaveGroupEmployeeDo
	Preload(fields ...field.RelationField) ILeaveGroupEmployeeDo
	FirstOrInit() (*types.LeaveGroupEmployee, error)
	FirstOrCreate() (*types.LeaveGroupEmployee, error)
	FindByPage(offset int, limit int) (result []*types.LeaveGroupEmployee, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ILeaveGroupEmployeeDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (l leaveGroupEmployeeDo) Debug() ILeaveGroupEmployeeDo {
	return l.withDO(l.DO.Debug())
}

func (l leaveGroupEmployeeDo) WithContext(ctx context.Context) ILeaveGroupEmployeeDo {
	return l.withDO(l.DO.WithContext(ctx))
}

func (l leaveGroupEmployeeDo) ReadDB() ILeaveGroupEmployeeDo {
	return l.Clauses(dbresolver.Read)
}

func (l leaveGroupEmployeeDo) WriteDB() ILeaveGroupEmployeeDo {
	return l.Clauses(dbresolver.Write)
}

func (l leaveGroupEmployeeDo) Session(config *gorm.Session) ILeaveGroupEmployeeDo {
	return l.withDO(l.DO.Session(config))
}

func (l leaveGroupEmployeeDo) Clauses(conds ...clause.Expression) ILeaveGroupEmployeeDo {
	return l.withDO(l.DO.Clauses(conds...))
}

func (l leaveGroupEmployeeDo) Returning(value interface{}, columns ...string) ILeaveGroupEmployeeDo {
	return l.withDO(l.DO.Returning(value, columns...))
}

func (l leaveGroupEmployeeDo) Not(conds ...gen.Condition) ILeaveGroupEmployeeDo {
	return l.withDO(l.DO.Not(conds...))
}

func (l leaveGroupEmployeeDo) Or(conds ...gen.Condition) ILeaveGroupEmployeeDo {
	return l.withDO(l.DO.Or(conds...))
}

func (l leaveGroupEmployeeDo) Select(conds ...field.Expr) ILeaveGroupEmployeeDo {
	return l.withDO(l.DO.Select(conds...))
}

func (l leaveGroupEmployeeDo) Where(conds ...gen.Condition) ILeaveGroupEmployeeDo {
	return l.withDO(l.DO.Where(conds...))
}

func (l leaveGroupEmployeeDo) Order(conds ...field.Expr) ILeaveGroupEmployeeDo {
	return l.withDO(l.DO.Order(conds...))
}

func (l leaveGroupEmployeeDo) Distinct(cols ...field.Expr) ILeaveGroupEmployeeDo {
	return l.withDO(l.DO.Distinct(cols...))
}

func (l leaveGroupEmployeeDo) Omit(cols ...field.Expr) ILeaveGroupEmployeeDo {
	return l.withDO(l.DO.Omit(cols...))
}

func (l leaveGroupEmployeeDo) Join(table schema.Tabler, on ...field.Expr) ILeaveGroupEmployeeDo {
	return l.withDO(l.DO.Join(table, on...))
}

func (l leaveGroupEmployeeDo) LeftJoin(table schema.Tabler, on ...field.Expr) ILeaveGroupEmployeeDo {
	return l.withDO(l.DO.LeftJoin(table, on...))
}

func (l leaveGroupEmployeeDo) RightJoin(table schema.Tabler, on ...field.Expr) ILeaveGroupEmployeeDo {
	return l.withDO(l.DO.RightJoin(table, on...))
}

func (l leaveGroupEmployeeDo) Group(cols ...field.Expr) ILeaveGroupEmployeeDo {
	return l.withDO(l.DO.Group(cols...))
}

func (l leaveGroupEmployeeDo) Having(conds ...gen.Condition) ILeaveGroupEmployeeDo {
	return l.withDO(l.DO.Having(conds...))
}

func (l leaveGroupEmployeeDo) Limit(limit int) ILeaveGroupEmployeeDo {
	return l.withDO(l.DO.Limit(limit))
}

func (l leaveGroupEmployeeDo) Offset(offset int) ILeaveGroupEmployeeDo {
	return l.withDO(l.DO.Offset(offset))
}

func (l leaveGroupEmployeeDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ILeaveGroupEmployeeDo {
	return l.withDO(l.DO.Scopes(funcs...))
}

func (l leaveGroupEmployeeDo) Unscoped() ILeaveGroupEmployeeDo {
	return l.withDO(l.DO.Unscoped())
}

func (l leaveGroupEmployeeDo) Create(values ...*types.LeaveGroupEmployee) error {
	if len(values) == 0 {
		return nil
	}
	return l.DO.Create(values)
}

func (l leaveGroupEmployeeDo) CreateInBatches(values []*types.LeaveGroupEmployee, batchSize int) error {
	return l.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (l leaveGroupEmployeeDo) Save(values ...*types.LeaveGroupEmployee) error {
	if len(values) == 0 {
		return nil
	}
	return l.DO.Save(values)
}

func (l leaveGroupEmployeeDo) First() (*types.LeaveGroupEmployee, error) {
	if result, err := l.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*types.LeaveGroupEmployee), nil
	}
}

func (l leaveGroupEmployeeDo) Take() (*types.LeaveGroupEmployee, error) {
	if result, err := l.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*types.LeaveGroupEmployee), nil
	}
}

func (l leaveGroupEmployeeDo) Last() (*types.LeaveGroupEmployee, error) {
	if result, err := l.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*types.LeaveGroupEmployee), nil
	}
}

func (l leaveGroupEmployeeDo) Find() ([]*types.LeaveGroupEmployee, error) {
	result, err := l.DO.Find()
	return result.([]*types.LeaveGroupEmployee), err
}

func (l leaveGroupEmployeeDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*types.LeaveGroupEmployee, err error) {
	buf := make([]*types.LeaveGroupEmployee, 0, batchSize)
	err = l.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (l leaveGroupEmployeeDo) FindInBatches(result *[]*types.LeaveGroupEmployee, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return l.DO.FindInBatches(result, batchSize, fc)
}

func (l leaveGroupEmployeeDo) Attrs(attrs ...field.AssignExpr) ILeaveGroupEmployeeDo {
	return l.withDO(l.DO.Attrs(attrs...))
}

func (l leaveGroupEmployeeDo) Assign(attrs ...field.AssignExpr) ILeaveGroupEmployeeDo {
	return l.withDO(l.DO.Assign(attrs...))
}

func (l leaveGroupEmployeeDo) Joins(fields ...field.RelationField) ILeaveGroupEmployeeDo {
	for _, _f := range fields {
		l = *l.withDO(l.DO.Joins(_f))
	}
	return &l
}

func (l leaveGroupEmployeeDo) Preload(fields ...field.RelationField) ILeaveGroupEmployeeDo {
	for _, _f := range fields {
		l = *l.withDO(l.DO.Preload(_f))
	}
	return &l
}

func (l leaveGroupEmployeeDo) FirstOrInit() (*types.LeaveGroupEmployee, error) {
	if result, err := l.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*types.LeaveGroupEmployee), nil
	}
}

func (l leaveGroupEmployeeDo) FirstOrCreate() (*types.LeaveGroupEmployee, error) {
	if result, err := l.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*types.LeaveGroupEmployee), nil
	}
}

func (l leaveGroupEmployeeDo) FindByPage(offset int, limit int) (result []*types.LeaveGroupEmployee, count int64, err error) {
	result, err = l.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = l.Offset(-1).Limit(-1).Count()
	return
}

func (l leaveGroupEmployeeDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = l.Count()
	if err != nil {
		return
	}

	err = l.Offset(offset).Limit(limit).Scan(result)
	return
}

func (l leaveGroupEmployeeDo) Scan(result interface{}) (err error) {
	return l.DO.Scan(result)
}

func (l leaveGroupEmployeeDo) Delete(models ...*types.LeaveGroupEmployee) (result gen.ResultInfo, err error) {
	return l.DO.Delete(models)
}

func (l *leaveGroupEmployeeDo) withDO(do gen.Dao) *leaveGroupEmployeeDo {
	l.DO = *do.(*gen.DO)
	return l
}
