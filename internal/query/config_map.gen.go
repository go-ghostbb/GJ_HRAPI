// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"hrapi/internal/types"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"
)

func newConfigMap(db *gorm.DB, opts ...gen.DOOption) configMap {
	_configMap := configMap{}

	_configMap.configMapDo.UseDB(db, opts...)
	_configMap.configMapDo.UseModel(&types.ConfigMap{})

	tableName := _configMap.configMapDo.TableName()
	_configMap.ALL = field.NewAsterisk(tableName)
	_configMap.ID = field.NewUint(tableName, "id")
	_configMap.CreatedAt = field.NewTime(tableName, "created_at")
	_configMap.UpdatedAt = field.NewTime(tableName, "updated_at")
	_configMap.DeletedAt = field.NewField(tableName, "deleted_at")
	_configMap.Key = field.NewString(tableName, "key")
	_configMap.Value = field.NewString(tableName, "value")
	_configMap.Remark = field.NewString(tableName, "remark")

	_configMap.fillFieldMap()

	return _configMap
}

type configMap struct {
	configMapDo configMapDo

	ALL       field.Asterisk
	ID        field.Uint
	CreatedAt field.Time
	UpdatedAt field.Time
	DeletedAt field.Field
	Key       field.String
	Value     field.String
	Remark    field.String

	fieldMap map[string]field.Expr
}

func (c configMap) Table(newTableName string) *configMap {
	c.configMapDo.UseTable(newTableName)
	return c.updateTableName(newTableName)
}

func (c configMap) As(alias string) *configMap {
	c.configMapDo.DO = *(c.configMapDo.As(alias).(*gen.DO))
	return c.updateTableName(alias)
}

func (c *configMap) updateTableName(table string) *configMap {
	c.ALL = field.NewAsterisk(table)
	c.ID = field.NewUint(table, "id")
	c.CreatedAt = field.NewTime(table, "created_at")
	c.UpdatedAt = field.NewTime(table, "updated_at")
	c.DeletedAt = field.NewField(table, "deleted_at")
	c.Key = field.NewString(table, "key")
	c.Value = field.NewString(table, "value")
	c.Remark = field.NewString(table, "remark")

	c.fillFieldMap()

	return c
}

func (c *configMap) WithContext(ctx context.Context) IConfigMapDo {
	return c.configMapDo.WithContext(ctx)
}

func (c configMap) TableName() string { return c.configMapDo.TableName() }

func (c configMap) Alias() string { return c.configMapDo.Alias() }

func (c configMap) Columns(cols ...field.Expr) gen.Columns { return c.configMapDo.Columns(cols...) }

func (c *configMap) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := c.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (c *configMap) fillFieldMap() {
	c.fieldMap = make(map[string]field.Expr, 7)
	c.fieldMap["id"] = c.ID
	c.fieldMap["created_at"] = c.CreatedAt
	c.fieldMap["updated_at"] = c.UpdatedAt
	c.fieldMap["deleted_at"] = c.DeletedAt
	c.fieldMap["key"] = c.Key
	c.fieldMap["value"] = c.Value
	c.fieldMap["remark"] = c.Remark
}

func (c configMap) clone(db *gorm.DB) configMap {
	c.configMapDo.ReplaceConnPool(db.Statement.ConnPool)
	return c
}

func (c configMap) replaceDB(db *gorm.DB) configMap {
	c.configMapDo.ReplaceDB(db)
	return c
}

type configMapDo struct{ gen.DO }

type IConfigMapDo interface {
	gen.SubQuery
	Debug() IConfigMapDo
	WithContext(ctx context.Context) IConfigMapDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IConfigMapDo
	WriteDB() IConfigMapDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IConfigMapDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IConfigMapDo
	Not(conds ...gen.Condition) IConfigMapDo
	Or(conds ...gen.Condition) IConfigMapDo
	Select(conds ...field.Expr) IConfigMapDo
	Where(conds ...gen.Condition) IConfigMapDo
	Order(conds ...field.Expr) IConfigMapDo
	Distinct(cols ...field.Expr) IConfigMapDo
	Omit(cols ...field.Expr) IConfigMapDo
	Join(table schema.Tabler, on ...field.Expr) IConfigMapDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IConfigMapDo
	RightJoin(table schema.Tabler, on ...field.Expr) IConfigMapDo
	Group(cols ...field.Expr) IConfigMapDo
	Having(conds ...gen.Condition) IConfigMapDo
	Limit(limit int) IConfigMapDo
	Offset(offset int) IConfigMapDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IConfigMapDo
	Unscoped() IConfigMapDo
	Create(values ...*types.ConfigMap) error
	CreateInBatches(values []*types.ConfigMap, batchSize int) error
	Save(values ...*types.ConfigMap) error
	First() (*types.ConfigMap, error)
	Take() (*types.ConfigMap, error)
	Last() (*types.ConfigMap, error)
	Find() ([]*types.ConfigMap, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*types.ConfigMap, err error)
	FindInBatches(result *[]*types.ConfigMap, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*types.ConfigMap) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IConfigMapDo
	Assign(attrs ...field.AssignExpr) IConfigMapDo
	Joins(fields ...field.RelationField) IConfigMapDo
	Preload(fields ...field.RelationField) IConfigMapDo
	FirstOrInit() (*types.ConfigMap, error)
	FirstOrCreate() (*types.ConfigMap, error)
	FindByPage(offset int, limit int) (result []*types.ConfigMap, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IConfigMapDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (c configMapDo) Debug() IConfigMapDo {
	return c.withDO(c.DO.Debug())
}

func (c configMapDo) WithContext(ctx context.Context) IConfigMapDo {
	return c.withDO(c.DO.WithContext(ctx))
}

func (c configMapDo) ReadDB() IConfigMapDo {
	return c.Clauses(dbresolver.Read)
}

func (c configMapDo) WriteDB() IConfigMapDo {
	return c.Clauses(dbresolver.Write)
}

func (c configMapDo) Session(config *gorm.Session) IConfigMapDo {
	return c.withDO(c.DO.Session(config))
}

func (c configMapDo) Clauses(conds ...clause.Expression) IConfigMapDo {
	return c.withDO(c.DO.Clauses(conds...))
}

func (c configMapDo) Returning(value interface{}, columns ...string) IConfigMapDo {
	return c.withDO(c.DO.Returning(value, columns...))
}

func (c configMapDo) Not(conds ...gen.Condition) IConfigMapDo {
	return c.withDO(c.DO.Not(conds...))
}

func (c configMapDo) Or(conds ...gen.Condition) IConfigMapDo {
	return c.withDO(c.DO.Or(conds...))
}

func (c configMapDo) Select(conds ...field.Expr) IConfigMapDo {
	return c.withDO(c.DO.Select(conds...))
}

func (c configMapDo) Where(conds ...gen.Condition) IConfigMapDo {
	return c.withDO(c.DO.Where(conds...))
}

func (c configMapDo) Order(conds ...field.Expr) IConfigMapDo {
	return c.withDO(c.DO.Order(conds...))
}

func (c configMapDo) Distinct(cols ...field.Expr) IConfigMapDo {
	return c.withDO(c.DO.Distinct(cols...))
}

func (c configMapDo) Omit(cols ...field.Expr) IConfigMapDo {
	return c.withDO(c.DO.Omit(cols...))
}

func (c configMapDo) Join(table schema.Tabler, on ...field.Expr) IConfigMapDo {
	return c.withDO(c.DO.Join(table, on...))
}

func (c configMapDo) LeftJoin(table schema.Tabler, on ...field.Expr) IConfigMapDo {
	return c.withDO(c.DO.LeftJoin(table, on...))
}

func (c configMapDo) RightJoin(table schema.Tabler, on ...field.Expr) IConfigMapDo {
	return c.withDO(c.DO.RightJoin(table, on...))
}

func (c configMapDo) Group(cols ...field.Expr) IConfigMapDo {
	return c.withDO(c.DO.Group(cols...))
}

func (c configMapDo) Having(conds ...gen.Condition) IConfigMapDo {
	return c.withDO(c.DO.Having(conds...))
}

func (c configMapDo) Limit(limit int) IConfigMapDo {
	return c.withDO(c.DO.Limit(limit))
}

func (c configMapDo) Offset(offset int) IConfigMapDo {
	return c.withDO(c.DO.Offset(offset))
}

func (c configMapDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IConfigMapDo {
	return c.withDO(c.DO.Scopes(funcs...))
}

func (c configMapDo) Unscoped() IConfigMapDo {
	return c.withDO(c.DO.Unscoped())
}

func (c configMapDo) Create(values ...*types.ConfigMap) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Create(values)
}

func (c configMapDo) CreateInBatches(values []*types.ConfigMap, batchSize int) error {
	return c.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (c configMapDo) Save(values ...*types.ConfigMap) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Save(values)
}

func (c configMapDo) First() (*types.ConfigMap, error) {
	if result, err := c.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*types.ConfigMap), nil
	}
}

func (c configMapDo) Take() (*types.ConfigMap, error) {
	if result, err := c.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*types.ConfigMap), nil
	}
}

func (c configMapDo) Last() (*types.ConfigMap, error) {
	if result, err := c.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*types.ConfigMap), nil
	}
}

func (c configMapDo) Find() ([]*types.ConfigMap, error) {
	result, err := c.DO.Find()
	return result.([]*types.ConfigMap), err
}

func (c configMapDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*types.ConfigMap, err error) {
	buf := make([]*types.ConfigMap, 0, batchSize)
	err = c.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (c configMapDo) FindInBatches(result *[]*types.ConfigMap, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return c.DO.FindInBatches(result, batchSize, fc)
}

func (c configMapDo) Attrs(attrs ...field.AssignExpr) IConfigMapDo {
	return c.withDO(c.DO.Attrs(attrs...))
}

func (c configMapDo) Assign(attrs ...field.AssignExpr) IConfigMapDo {
	return c.withDO(c.DO.Assign(attrs...))
}

func (c configMapDo) Joins(fields ...field.RelationField) IConfigMapDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Joins(_f))
	}
	return &c
}

func (c configMapDo) Preload(fields ...field.RelationField) IConfigMapDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Preload(_f))
	}
	return &c
}

func (c configMapDo) FirstOrInit() (*types.ConfigMap, error) {
	if result, err := c.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*types.ConfigMap), nil
	}
}

func (c configMapDo) FirstOrCreate() (*types.ConfigMap, error) {
	if result, err := c.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*types.ConfigMap), nil
	}
}

func (c configMapDo) FindByPage(offset int, limit int) (result []*types.ConfigMap, count int64, err error) {
	result, err = c.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = c.Offset(-1).Limit(-1).Count()
	return
}

func (c configMapDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = c.Count()
	if err != nil {
		return
	}

	err = c.Offset(offset).Limit(limit).Scan(result)
	return
}

func (c configMapDo) Scan(result interface{}) (err error) {
	return c.DO.Scan(result)
}

func (c configMapDo) Delete(models ...*types.ConfigMap) (result gen.ResultInfo, err error) {
	return c.DO.Delete(models)
}

func (c *configMapDo) withDO(do gen.Dao) *configMapDo {
	c.DO = *do.(*gen.DO)
	return c
}
