// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"hrapi/internal/types"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"
)

func newLeaveGroupCondition(db *gorm.DB, opts ...gen.DOOption) leaveGroupCondition {
	_leaveGroupCondition := leaveGroupCondition{}

	_leaveGroupCondition.leaveGroupConditionDo.UseDB(db, opts...)
	_leaveGroupCondition.leaveGroupConditionDo.UseModel(&types.LeaveGroupCondition{})

	tableName := _leaveGroupCondition.leaveGroupConditionDo.TableName()
	_leaveGroupCondition.ALL = field.NewAsterisk(tableName)
	_leaveGroupCondition.ID = field.NewUint(tableName, "id")
	_leaveGroupCondition.CreatedAt = field.NewTime(tableName, "created_at")
	_leaveGroupCondition.UpdatedAt = field.NewTime(tableName, "updated_at")
	_leaveGroupCondition.DeletedAt = field.NewField(tableName, "deleted_at")
	_leaveGroupCondition.LeaveGroupID = field.NewUint(tableName, "leave_group_id")
	_leaveGroupCondition.ConditionType = field.NewField(tableName, "condition_type")
	_leaveGroupCondition.ConditionNum = field.NewUint(tableName, "condition_num")
	_leaveGroupCondition.Result = field.NewUint(tableName, "result")
	_leaveGroupCondition.Level = field.NewUint(tableName, "level")
	_leaveGroupCondition.LeaveGroup = leaveGroupConditionBelongsToLeaveGroup{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("LeaveGroup", "types.LeaveGroup"),
		Leave: struct {
			field.RelationField
			LeaveGroup struct {
				field.RelationField
			}
		}{
			RelationField: field.NewRelation("LeaveGroup.Leave", "types.Leave"),
			LeaveGroup: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("LeaveGroup.Leave.LeaveGroup", "types.LeaveGroup"),
			},
		},
		LeaveGroupCondition: struct {
			field.RelationField
			LeaveGroup struct {
				field.RelationField
			}
		}{
			RelationField: field.NewRelation("LeaveGroup.LeaveGroupCondition", "types.LeaveGroupCondition"),
			LeaveGroup: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("LeaveGroup.LeaveGroupCondition.LeaveGroup", "types.LeaveGroup"),
			},
		},
		Employee: struct {
			field.RelationField
			Department struct {
				field.RelationField
				Manager struct {
					field.RelationField
				}
			}
			Rank struct {
				field.RelationField
				Grade struct {
					field.RelationField
					Rank struct {
						field.RelationField
					}
				}
			}
			Grade struct {
				field.RelationField
			}
			LoginInformation struct {
				field.RelationField
				Employee struct {
					field.RelationField
				}
			}
			Roles struct {
				field.RelationField
				Employees struct {
					field.RelationField
				}
				Permissions struct {
					field.RelationField
					Roles struct {
						field.RelationField
					}
				}
				Menus struct {
					field.RelationField
					Roles struct {
						field.RelationField
					}
				}
			}
		}{
			RelationField: field.NewRelation("LeaveGroup.Employee", "types.Employee"),
			Department: struct {
				field.RelationField
				Manager struct {
					field.RelationField
				}
			}{
				RelationField: field.NewRelation("LeaveGroup.Employee.Department", "types.Department"),
				Manager: struct {
					field.RelationField
				}{
					RelationField: field.NewRelation("LeaveGroup.Employee.Department.Manager", "types.Employee"),
				},
			},
			Rank: struct {
				field.RelationField
				Grade struct {
					field.RelationField
					Rank struct {
						field.RelationField
					}
				}
			}{
				RelationField: field.NewRelation("LeaveGroup.Employee.Rank", "types.PositionRank"),
				Grade: struct {
					field.RelationField
					Rank struct {
						field.RelationField
					}
				}{
					RelationField: field.NewRelation("LeaveGroup.Employee.Rank.Grade", "types.PositionGrade"),
					Rank: struct {
						field.RelationField
					}{
						RelationField: field.NewRelation("LeaveGroup.Employee.Rank.Grade.Rank", "types.PositionRank"),
					},
				},
			},
			Grade: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("LeaveGroup.Employee.Grade", "types.PositionGrade"),
			},
			LoginInformation: struct {
				field.RelationField
				Employee struct {
					field.RelationField
				}
			}{
				RelationField: field.NewRelation("LeaveGroup.Employee.LoginInformation", "types.LoginInformation"),
				Employee: struct {
					field.RelationField
				}{
					RelationField: field.NewRelation("LeaveGroup.Employee.LoginInformation.Employee", "types.Employee"),
				},
			},
			Roles: struct {
				field.RelationField
				Employees struct {
					field.RelationField
				}
				Permissions struct {
					field.RelationField
					Roles struct {
						field.RelationField
					}
				}
				Menus struct {
					field.RelationField
					Roles struct {
						field.RelationField
					}
				}
			}{
				RelationField: field.NewRelation("LeaveGroup.Employee.Roles", "types.Role"),
				Employees: struct {
					field.RelationField
				}{
					RelationField: field.NewRelation("LeaveGroup.Employee.Roles.Employees", "types.Employee"),
				},
				Permissions: struct {
					field.RelationField
					Roles struct {
						field.RelationField
					}
				}{
					RelationField: field.NewRelation("LeaveGroup.Employee.Roles.Permissions", "types.Permission"),
					Roles: struct {
						field.RelationField
					}{
						RelationField: field.NewRelation("LeaveGroup.Employee.Roles.Permissions.Roles", "types.Role"),
					},
				},
				Menus: struct {
					field.RelationField
					Roles struct {
						field.RelationField
					}
				}{
					RelationField: field.NewRelation("LeaveGroup.Employee.Roles.Menus", "types.Menu"),
					Roles: struct {
						field.RelationField
					}{
						RelationField: field.NewRelation("LeaveGroup.Employee.Roles.Menus.Roles", "types.Role"),
					},
				},
			},
		},
	}

	_leaveGroupCondition.fillFieldMap()

	return _leaveGroupCondition
}

type leaveGroupCondition struct {
	leaveGroupConditionDo leaveGroupConditionDo

	ALL           field.Asterisk
	ID            field.Uint
	CreatedAt     field.Time
	UpdatedAt     field.Time
	DeletedAt     field.Field
	LeaveGroupID  field.Uint
	ConditionType field.Field
	ConditionNum  field.Uint
	Result        field.Uint
	Level         field.Uint
	LeaveGroup    leaveGroupConditionBelongsToLeaveGroup

	fieldMap map[string]field.Expr
}

func (l leaveGroupCondition) Table(newTableName string) *leaveGroupCondition {
	l.leaveGroupConditionDo.UseTable(newTableName)
	return l.updateTableName(newTableName)
}

func (l leaveGroupCondition) As(alias string) *leaveGroupCondition {
	l.leaveGroupConditionDo.DO = *(l.leaveGroupConditionDo.As(alias).(*gen.DO))
	return l.updateTableName(alias)
}

func (l *leaveGroupCondition) updateTableName(table string) *leaveGroupCondition {
	l.ALL = field.NewAsterisk(table)
	l.ID = field.NewUint(table, "id")
	l.CreatedAt = field.NewTime(table, "created_at")
	l.UpdatedAt = field.NewTime(table, "updated_at")
	l.DeletedAt = field.NewField(table, "deleted_at")
	l.LeaveGroupID = field.NewUint(table, "leave_group_id")
	l.ConditionType = field.NewField(table, "condition_type")
	l.ConditionNum = field.NewUint(table, "condition_num")
	l.Result = field.NewUint(table, "result")
	l.Level = field.NewUint(table, "level")

	l.fillFieldMap()

	return l
}

func (l *leaveGroupCondition) WithContext(ctx context.Context) ILeaveGroupConditionDo {
	return l.leaveGroupConditionDo.WithContext(ctx)
}

func (l leaveGroupCondition) TableName() string { return l.leaveGroupConditionDo.TableName() }

func (l leaveGroupCondition) Alias() string { return l.leaveGroupConditionDo.Alias() }

func (l leaveGroupCondition) Columns(cols ...field.Expr) gen.Columns {
	return l.leaveGroupConditionDo.Columns(cols...)
}

func (l *leaveGroupCondition) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := l.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (l *leaveGroupCondition) fillFieldMap() {
	l.fieldMap = make(map[string]field.Expr, 10)
	l.fieldMap["id"] = l.ID
	l.fieldMap["created_at"] = l.CreatedAt
	l.fieldMap["updated_at"] = l.UpdatedAt
	l.fieldMap["deleted_at"] = l.DeletedAt
	l.fieldMap["leave_group_id"] = l.LeaveGroupID
	l.fieldMap["condition_type"] = l.ConditionType
	l.fieldMap["condition_num"] = l.ConditionNum
	l.fieldMap["result"] = l.Result
	l.fieldMap["level"] = l.Level

}

func (l leaveGroupCondition) clone(db *gorm.DB) leaveGroupCondition {
	l.leaveGroupConditionDo.ReplaceConnPool(db.Statement.ConnPool)
	return l
}

func (l leaveGroupCondition) replaceDB(db *gorm.DB) leaveGroupCondition {
	l.leaveGroupConditionDo.ReplaceDB(db)
	return l
}

type leaveGroupConditionBelongsToLeaveGroup struct {
	db *gorm.DB

	field.RelationField

	Leave struct {
		field.RelationField
		LeaveGroup struct {
			field.RelationField
		}
	}
	LeaveGroupCondition struct {
		field.RelationField
		LeaveGroup struct {
			field.RelationField
		}
	}
	Employee struct {
		field.RelationField
		Department struct {
			field.RelationField
			Manager struct {
				field.RelationField
			}
		}
		Rank struct {
			field.RelationField
			Grade struct {
				field.RelationField
				Rank struct {
					field.RelationField
				}
			}
		}
		Grade struct {
			field.RelationField
		}
		LoginInformation struct {
			field.RelationField
			Employee struct {
				field.RelationField
			}
		}
		Roles struct {
			field.RelationField
			Employees struct {
				field.RelationField
			}
			Permissions struct {
				field.RelationField
				Roles struct {
					field.RelationField
				}
			}
			Menus struct {
				field.RelationField
				Roles struct {
					field.RelationField
				}
			}
		}
	}
}

func (a leaveGroupConditionBelongsToLeaveGroup) Where(conds ...field.Expr) *leaveGroupConditionBelongsToLeaveGroup {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a leaveGroupConditionBelongsToLeaveGroup) WithContext(ctx context.Context) *leaveGroupConditionBelongsToLeaveGroup {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a leaveGroupConditionBelongsToLeaveGroup) Session(session *gorm.Session) *leaveGroupConditionBelongsToLeaveGroup {
	a.db = a.db.Session(session)
	return &a
}

func (a leaveGroupConditionBelongsToLeaveGroup) Model(m *types.LeaveGroupCondition) *leaveGroupConditionBelongsToLeaveGroupTx {
	return &leaveGroupConditionBelongsToLeaveGroupTx{a.db.Model(m).Association(a.Name())}
}

type leaveGroupConditionBelongsToLeaveGroupTx struct{ tx *gorm.Association }

func (a leaveGroupConditionBelongsToLeaveGroupTx) Find() (result *types.LeaveGroup, err error) {
	return result, a.tx.Find(&result)
}

func (a leaveGroupConditionBelongsToLeaveGroupTx) Append(values ...*types.LeaveGroup) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a leaveGroupConditionBelongsToLeaveGroupTx) Replace(values ...*types.LeaveGroup) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a leaveGroupConditionBelongsToLeaveGroupTx) Delete(values ...*types.LeaveGroup) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a leaveGroupConditionBelongsToLeaveGroupTx) Clear() error {
	return a.tx.Clear()
}

func (a leaveGroupConditionBelongsToLeaveGroupTx) Count() int64 {
	return a.tx.Count()
}

type leaveGroupConditionDo struct{ gen.DO }

type ILeaveGroupConditionDo interface {
	gen.SubQuery
	Debug() ILeaveGroupConditionDo
	WithContext(ctx context.Context) ILeaveGroupConditionDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ILeaveGroupConditionDo
	WriteDB() ILeaveGroupConditionDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ILeaveGroupConditionDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ILeaveGroupConditionDo
	Not(conds ...gen.Condition) ILeaveGroupConditionDo
	Or(conds ...gen.Condition) ILeaveGroupConditionDo
	Select(conds ...field.Expr) ILeaveGroupConditionDo
	Where(conds ...gen.Condition) ILeaveGroupConditionDo
	Order(conds ...field.Expr) ILeaveGroupConditionDo
	Distinct(cols ...field.Expr) ILeaveGroupConditionDo
	Omit(cols ...field.Expr) ILeaveGroupConditionDo
	Join(table schema.Tabler, on ...field.Expr) ILeaveGroupConditionDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ILeaveGroupConditionDo
	RightJoin(table schema.Tabler, on ...field.Expr) ILeaveGroupConditionDo
	Group(cols ...field.Expr) ILeaveGroupConditionDo
	Having(conds ...gen.Condition) ILeaveGroupConditionDo
	Limit(limit int) ILeaveGroupConditionDo
	Offset(offset int) ILeaveGroupConditionDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ILeaveGroupConditionDo
	Unscoped() ILeaveGroupConditionDo
	Create(values ...*types.LeaveGroupCondition) error
	CreateInBatches(values []*types.LeaveGroupCondition, batchSize int) error
	Save(values ...*types.LeaveGroupCondition) error
	First() (*types.LeaveGroupCondition, error)
	Take() (*types.LeaveGroupCondition, error)
	Last() (*types.LeaveGroupCondition, error)
	Find() ([]*types.LeaveGroupCondition, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*types.LeaveGroupCondition, err error)
	FindInBatches(result *[]*types.LeaveGroupCondition, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*types.LeaveGroupCondition) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ILeaveGroupConditionDo
	Assign(attrs ...field.AssignExpr) ILeaveGroupConditionDo
	Joins(fields ...field.RelationField) ILeaveGroupConditionDo
	Preload(fields ...field.RelationField) ILeaveGroupConditionDo
	FirstOrInit() (*types.LeaveGroupCondition, error)
	FirstOrCreate() (*types.LeaveGroupCondition, error)
	FindByPage(offset int, limit int) (result []*types.LeaveGroupCondition, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ILeaveGroupConditionDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (l leaveGroupConditionDo) Debug() ILeaveGroupConditionDo {
	return l.withDO(l.DO.Debug())
}

func (l leaveGroupConditionDo) WithContext(ctx context.Context) ILeaveGroupConditionDo {
	return l.withDO(l.DO.WithContext(ctx))
}

func (l leaveGroupConditionDo) ReadDB() ILeaveGroupConditionDo {
	return l.Clauses(dbresolver.Read)
}

func (l leaveGroupConditionDo) WriteDB() ILeaveGroupConditionDo {
	return l.Clauses(dbresolver.Write)
}

func (l leaveGroupConditionDo) Session(config *gorm.Session) ILeaveGroupConditionDo {
	return l.withDO(l.DO.Session(config))
}

func (l leaveGroupConditionDo) Clauses(conds ...clause.Expression) ILeaveGroupConditionDo {
	return l.withDO(l.DO.Clauses(conds...))
}

func (l leaveGroupConditionDo) Returning(value interface{}, columns ...string) ILeaveGroupConditionDo {
	return l.withDO(l.DO.Returning(value, columns...))
}

func (l leaveGroupConditionDo) Not(conds ...gen.Condition) ILeaveGroupConditionDo {
	return l.withDO(l.DO.Not(conds...))
}

func (l leaveGroupConditionDo) Or(conds ...gen.Condition) ILeaveGroupConditionDo {
	return l.withDO(l.DO.Or(conds...))
}

func (l leaveGroupConditionDo) Select(conds ...field.Expr) ILeaveGroupConditionDo {
	return l.withDO(l.DO.Select(conds...))
}

func (l leaveGroupConditionDo) Where(conds ...gen.Condition) ILeaveGroupConditionDo {
	return l.withDO(l.DO.Where(conds...))
}

func (l leaveGroupConditionDo) Order(conds ...field.Expr) ILeaveGroupConditionDo {
	return l.withDO(l.DO.Order(conds...))
}

func (l leaveGroupConditionDo) Distinct(cols ...field.Expr) ILeaveGroupConditionDo {
	return l.withDO(l.DO.Distinct(cols...))
}

func (l leaveGroupConditionDo) Omit(cols ...field.Expr) ILeaveGroupConditionDo {
	return l.withDO(l.DO.Omit(cols...))
}

func (l leaveGroupConditionDo) Join(table schema.Tabler, on ...field.Expr) ILeaveGroupConditionDo {
	return l.withDO(l.DO.Join(table, on...))
}

func (l leaveGroupConditionDo) LeftJoin(table schema.Tabler, on ...field.Expr) ILeaveGroupConditionDo {
	return l.withDO(l.DO.LeftJoin(table, on...))
}

func (l leaveGroupConditionDo) RightJoin(table schema.Tabler, on ...field.Expr) ILeaveGroupConditionDo {
	return l.withDO(l.DO.RightJoin(table, on...))
}

func (l leaveGroupConditionDo) Group(cols ...field.Expr) ILeaveGroupConditionDo {
	return l.withDO(l.DO.Group(cols...))
}

func (l leaveGroupConditionDo) Having(conds ...gen.Condition) ILeaveGroupConditionDo {
	return l.withDO(l.DO.Having(conds...))
}

func (l leaveGroupConditionDo) Limit(limit int) ILeaveGroupConditionDo {
	return l.withDO(l.DO.Limit(limit))
}

func (l leaveGroupConditionDo) Offset(offset int) ILeaveGroupConditionDo {
	return l.withDO(l.DO.Offset(offset))
}

func (l leaveGroupConditionDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ILeaveGroupConditionDo {
	return l.withDO(l.DO.Scopes(funcs...))
}

func (l leaveGroupConditionDo) Unscoped() ILeaveGroupConditionDo {
	return l.withDO(l.DO.Unscoped())
}

func (l leaveGroupConditionDo) Create(values ...*types.LeaveGroupCondition) error {
	if len(values) == 0 {
		return nil
	}
	return l.DO.Create(values)
}

func (l leaveGroupConditionDo) CreateInBatches(values []*types.LeaveGroupCondition, batchSize int) error {
	return l.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (l leaveGroupConditionDo) Save(values ...*types.LeaveGroupCondition) error {
	if len(values) == 0 {
		return nil
	}
	return l.DO.Save(values)
}

func (l leaveGroupConditionDo) First() (*types.LeaveGroupCondition, error) {
	if result, err := l.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*types.LeaveGroupCondition), nil
	}
}

func (l leaveGroupConditionDo) Take() (*types.LeaveGroupCondition, error) {
	if result, err := l.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*types.LeaveGroupCondition), nil
	}
}

func (l leaveGroupConditionDo) Last() (*types.LeaveGroupCondition, error) {
	if result, err := l.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*types.LeaveGroupCondition), nil
	}
}

func (l leaveGroupConditionDo) Find() ([]*types.LeaveGroupCondition, error) {
	result, err := l.DO.Find()
	return result.([]*types.LeaveGroupCondition), err
}

func (l leaveGroupConditionDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*types.LeaveGroupCondition, err error) {
	buf := make([]*types.LeaveGroupCondition, 0, batchSize)
	err = l.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (l leaveGroupConditionDo) FindInBatches(result *[]*types.LeaveGroupCondition, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return l.DO.FindInBatches(result, batchSize, fc)
}

func (l leaveGroupConditionDo) Attrs(attrs ...field.AssignExpr) ILeaveGroupConditionDo {
	return l.withDO(l.DO.Attrs(attrs...))
}

func (l leaveGroupConditionDo) Assign(attrs ...field.AssignExpr) ILeaveGroupConditionDo {
	return l.withDO(l.DO.Assign(attrs...))
}

func (l leaveGroupConditionDo) Joins(fields ...field.RelationField) ILeaveGroupConditionDo {
	for _, _f := range fields {
		l = *l.withDO(l.DO.Joins(_f))
	}
	return &l
}

func (l leaveGroupConditionDo) Preload(fields ...field.RelationField) ILeaveGroupConditionDo {
	for _, _f := range fields {
		l = *l.withDO(l.DO.Preload(_f))
	}
	return &l
}

func (l leaveGroupConditionDo) FirstOrInit() (*types.LeaveGroupCondition, error) {
	if result, err := l.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*types.LeaveGroupCondition), nil
	}
}

func (l leaveGroupConditionDo) FirstOrCreate() (*types.LeaveGroupCondition, error) {
	if result, err := l.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*types.LeaveGroupCondition), nil
	}
}

func (l leaveGroupConditionDo) FindByPage(offset int, limit int) (result []*types.LeaveGroupCondition, count int64, err error) {
	result, err = l.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = l.Offset(-1).Limit(-1).Count()
	return
}

func (l leaveGroupConditionDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = l.Count()
	if err != nil {
		return
	}

	err = l.Offset(offset).Limit(limit).Scan(result)
	return
}

func (l leaveGroupConditionDo) Scan(result interface{}) (err error) {
	return l.DO.Scan(result)
}

func (l leaveGroupConditionDo) Delete(models ...*types.LeaveGroupCondition) (result gen.ResultInfo, err error) {
	return l.DO.Delete(models)
}

func (l *leaveGroupConditionDo) withDO(do gen.Dao) *leaveGroupConditionDo {
	l.DO = *do.(*gen.DO)
	return l
}
