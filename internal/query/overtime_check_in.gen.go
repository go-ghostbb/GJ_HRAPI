// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"hrapi/internal/types"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"
)

func newOvertimeCheckIn(db *gorm.DB, opts ...gen.DOOption) overtimeCheckIn {
	_overtimeCheckIn := overtimeCheckIn{}

	_overtimeCheckIn.overtimeCheckInDo.UseDB(db, opts...)
	_overtimeCheckIn.overtimeCheckInDo.UseModel(&types.OvertimeCheckIn{})

	tableName := _overtimeCheckIn.overtimeCheckInDo.TableName()
	_overtimeCheckIn.ALL = field.NewAsterisk(tableName)
	_overtimeCheckIn.ID = field.NewUint(tableName, "id")
	_overtimeCheckIn.CreatedAt = field.NewTime(tableName, "created_at")
	_overtimeCheckIn.UpdatedAt = field.NewTime(tableName, "updated_at")
	_overtimeCheckIn.DeletedAt = field.NewField(tableName, "deleted_at")
	_overtimeCheckIn.EmployeeID = field.NewUint(tableName, "employee_id")
	_overtimeCheckIn.Datetime = field.NewField(tableName, "datetime")
	_overtimeCheckIn.CheckInType = field.NewField(tableName, "check_in_type")
	_overtimeCheckIn.Employee = overtimeCheckInBelongsToEmployee{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Employee", "types.Employee"),
		Department: struct {
			field.RelationField
			Manager struct {
				field.RelationField
			}
		}{
			RelationField: field.NewRelation("Employee.Department", "types.Department"),
			Manager: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("Employee.Department.Manager", "types.Employee"),
			},
		},
		Rank: struct {
			field.RelationField
			Grade struct {
				field.RelationField
				Rank struct {
					field.RelationField
				}
			}
		}{
			RelationField: field.NewRelation("Employee.Rank", "types.PositionRank"),
			Grade: struct {
				field.RelationField
				Rank struct {
					field.RelationField
				}
			}{
				RelationField: field.NewRelation("Employee.Rank.Grade", "types.PositionGrade"),
				Rank: struct {
					field.RelationField
				}{
					RelationField: field.NewRelation("Employee.Rank.Grade.Rank", "types.PositionRank"),
				},
			},
		},
		Grade: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("Employee.Grade", "types.PositionGrade"),
		},
		LoginInformation: struct {
			field.RelationField
			Employee struct {
				field.RelationField
			}
		}{
			RelationField: field.NewRelation("Employee.LoginInformation", "types.LoginInformation"),
			Employee: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("Employee.LoginInformation.Employee", "types.Employee"),
			},
		},
		Roles: struct {
			field.RelationField
			Employees struct {
				field.RelationField
			}
			Permissions struct {
				field.RelationField
				Roles struct {
					field.RelationField
				}
			}
			Menus struct {
				field.RelationField
				Roles struct {
					field.RelationField
				}
			}
		}{
			RelationField: field.NewRelation("Employee.Roles", "types.Role"),
			Employees: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("Employee.Roles.Employees", "types.Employee"),
			},
			Permissions: struct {
				field.RelationField
				Roles struct {
					field.RelationField
				}
			}{
				RelationField: field.NewRelation("Employee.Roles.Permissions", "types.Permission"),
				Roles: struct {
					field.RelationField
				}{
					RelationField: field.NewRelation("Employee.Roles.Permissions.Roles", "types.Role"),
				},
			},
			Menus: struct {
				field.RelationField
				Roles struct {
					field.RelationField
				}
			}{
				RelationField: field.NewRelation("Employee.Roles.Menus", "types.Menu"),
				Roles: struct {
					field.RelationField
				}{
					RelationField: field.NewRelation("Employee.Roles.Menus.Roles", "types.Role"),
				},
			},
		},
	}

	_overtimeCheckIn.fillFieldMap()

	return _overtimeCheckIn
}

type overtimeCheckIn struct {
	overtimeCheckInDo overtimeCheckInDo

	ALL         field.Asterisk
	ID          field.Uint
	CreatedAt   field.Time
	UpdatedAt   field.Time
	DeletedAt   field.Field
	EmployeeID  field.Uint
	Datetime    field.Field
	CheckInType field.Field
	Employee    overtimeCheckInBelongsToEmployee

	fieldMap map[string]field.Expr
}

func (o overtimeCheckIn) Table(newTableName string) *overtimeCheckIn {
	o.overtimeCheckInDo.UseTable(newTableName)
	return o.updateTableName(newTableName)
}

func (o overtimeCheckIn) As(alias string) *overtimeCheckIn {
	o.overtimeCheckInDo.DO = *(o.overtimeCheckInDo.As(alias).(*gen.DO))
	return o.updateTableName(alias)
}

func (o *overtimeCheckIn) updateTableName(table string) *overtimeCheckIn {
	o.ALL = field.NewAsterisk(table)
	o.ID = field.NewUint(table, "id")
	o.CreatedAt = field.NewTime(table, "created_at")
	o.UpdatedAt = field.NewTime(table, "updated_at")
	o.DeletedAt = field.NewField(table, "deleted_at")
	o.EmployeeID = field.NewUint(table, "employee_id")
	o.Datetime = field.NewField(table, "datetime")
	o.CheckInType = field.NewField(table, "check_in_type")

	o.fillFieldMap()

	return o
}

func (o *overtimeCheckIn) WithContext(ctx context.Context) IOvertimeCheckInDo {
	return o.overtimeCheckInDo.WithContext(ctx)
}

func (o overtimeCheckIn) TableName() string { return o.overtimeCheckInDo.TableName() }

func (o overtimeCheckIn) Alias() string { return o.overtimeCheckInDo.Alias() }

func (o overtimeCheckIn) Columns(cols ...field.Expr) gen.Columns {
	return o.overtimeCheckInDo.Columns(cols...)
}

func (o *overtimeCheckIn) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := o.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (o *overtimeCheckIn) fillFieldMap() {
	o.fieldMap = make(map[string]field.Expr, 8)
	o.fieldMap["id"] = o.ID
	o.fieldMap["created_at"] = o.CreatedAt
	o.fieldMap["updated_at"] = o.UpdatedAt
	o.fieldMap["deleted_at"] = o.DeletedAt
	o.fieldMap["employee_id"] = o.EmployeeID
	o.fieldMap["datetime"] = o.Datetime
	o.fieldMap["check_in_type"] = o.CheckInType

}

func (o overtimeCheckIn) clone(db *gorm.DB) overtimeCheckIn {
	o.overtimeCheckInDo.ReplaceConnPool(db.Statement.ConnPool)
	return o
}

func (o overtimeCheckIn) replaceDB(db *gorm.DB) overtimeCheckIn {
	o.overtimeCheckInDo.ReplaceDB(db)
	return o
}

type overtimeCheckInBelongsToEmployee struct {
	db *gorm.DB

	field.RelationField

	Department struct {
		field.RelationField
		Manager struct {
			field.RelationField
		}
	}
	Rank struct {
		field.RelationField
		Grade struct {
			field.RelationField
			Rank struct {
				field.RelationField
			}
		}
	}
	Grade struct {
		field.RelationField
	}
	LoginInformation struct {
		field.RelationField
		Employee struct {
			field.RelationField
		}
	}
	Roles struct {
		field.RelationField
		Employees struct {
			field.RelationField
		}
		Permissions struct {
			field.RelationField
			Roles struct {
				field.RelationField
			}
		}
		Menus struct {
			field.RelationField
			Roles struct {
				field.RelationField
			}
		}
	}
}

func (a overtimeCheckInBelongsToEmployee) Where(conds ...field.Expr) *overtimeCheckInBelongsToEmployee {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a overtimeCheckInBelongsToEmployee) WithContext(ctx context.Context) *overtimeCheckInBelongsToEmployee {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a overtimeCheckInBelongsToEmployee) Session(session *gorm.Session) *overtimeCheckInBelongsToEmployee {
	a.db = a.db.Session(session)
	return &a
}

func (a overtimeCheckInBelongsToEmployee) Model(m *types.OvertimeCheckIn) *overtimeCheckInBelongsToEmployeeTx {
	return &overtimeCheckInBelongsToEmployeeTx{a.db.Model(m).Association(a.Name())}
}

type overtimeCheckInBelongsToEmployeeTx struct{ tx *gorm.Association }

func (a overtimeCheckInBelongsToEmployeeTx) Find() (result *types.Employee, err error) {
	return result, a.tx.Find(&result)
}

func (a overtimeCheckInBelongsToEmployeeTx) Append(values ...*types.Employee) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a overtimeCheckInBelongsToEmployeeTx) Replace(values ...*types.Employee) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a overtimeCheckInBelongsToEmployeeTx) Delete(values ...*types.Employee) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a overtimeCheckInBelongsToEmployeeTx) Clear() error {
	return a.tx.Clear()
}

func (a overtimeCheckInBelongsToEmployeeTx) Count() int64 {
	return a.tx.Count()
}

type overtimeCheckInDo struct{ gen.DO }

type IOvertimeCheckInDo interface {
	gen.SubQuery
	Debug() IOvertimeCheckInDo
	WithContext(ctx context.Context) IOvertimeCheckInDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IOvertimeCheckInDo
	WriteDB() IOvertimeCheckInDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IOvertimeCheckInDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IOvertimeCheckInDo
	Not(conds ...gen.Condition) IOvertimeCheckInDo
	Or(conds ...gen.Condition) IOvertimeCheckInDo
	Select(conds ...field.Expr) IOvertimeCheckInDo
	Where(conds ...gen.Condition) IOvertimeCheckInDo
	Order(conds ...field.Expr) IOvertimeCheckInDo
	Distinct(cols ...field.Expr) IOvertimeCheckInDo
	Omit(cols ...field.Expr) IOvertimeCheckInDo
	Join(table schema.Tabler, on ...field.Expr) IOvertimeCheckInDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IOvertimeCheckInDo
	RightJoin(table schema.Tabler, on ...field.Expr) IOvertimeCheckInDo
	Group(cols ...field.Expr) IOvertimeCheckInDo
	Having(conds ...gen.Condition) IOvertimeCheckInDo
	Limit(limit int) IOvertimeCheckInDo
	Offset(offset int) IOvertimeCheckInDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IOvertimeCheckInDo
	Unscoped() IOvertimeCheckInDo
	Create(values ...*types.OvertimeCheckIn) error
	CreateInBatches(values []*types.OvertimeCheckIn, batchSize int) error
	Save(values ...*types.OvertimeCheckIn) error
	First() (*types.OvertimeCheckIn, error)
	Take() (*types.OvertimeCheckIn, error)
	Last() (*types.OvertimeCheckIn, error)
	Find() ([]*types.OvertimeCheckIn, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*types.OvertimeCheckIn, err error)
	FindInBatches(result *[]*types.OvertimeCheckIn, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*types.OvertimeCheckIn) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IOvertimeCheckInDo
	Assign(attrs ...field.AssignExpr) IOvertimeCheckInDo
	Joins(fields ...field.RelationField) IOvertimeCheckInDo
	Preload(fields ...field.RelationField) IOvertimeCheckInDo
	FirstOrInit() (*types.OvertimeCheckIn, error)
	FirstOrCreate() (*types.OvertimeCheckIn, error)
	FindByPage(offset int, limit int) (result []*types.OvertimeCheckIn, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IOvertimeCheckInDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (o overtimeCheckInDo) Debug() IOvertimeCheckInDo {
	return o.withDO(o.DO.Debug())
}

func (o overtimeCheckInDo) WithContext(ctx context.Context) IOvertimeCheckInDo {
	return o.withDO(o.DO.WithContext(ctx))
}

func (o overtimeCheckInDo) ReadDB() IOvertimeCheckInDo {
	return o.Clauses(dbresolver.Read)
}

func (o overtimeCheckInDo) WriteDB() IOvertimeCheckInDo {
	return o.Clauses(dbresolver.Write)
}

func (o overtimeCheckInDo) Session(config *gorm.Session) IOvertimeCheckInDo {
	return o.withDO(o.DO.Session(config))
}

func (o overtimeCheckInDo) Clauses(conds ...clause.Expression) IOvertimeCheckInDo {
	return o.withDO(o.DO.Clauses(conds...))
}

func (o overtimeCheckInDo) Returning(value interface{}, columns ...string) IOvertimeCheckInDo {
	return o.withDO(o.DO.Returning(value, columns...))
}

func (o overtimeCheckInDo) Not(conds ...gen.Condition) IOvertimeCheckInDo {
	return o.withDO(o.DO.Not(conds...))
}

func (o overtimeCheckInDo) Or(conds ...gen.Condition) IOvertimeCheckInDo {
	return o.withDO(o.DO.Or(conds...))
}

func (o overtimeCheckInDo) Select(conds ...field.Expr) IOvertimeCheckInDo {
	return o.withDO(o.DO.Select(conds...))
}

func (o overtimeCheckInDo) Where(conds ...gen.Condition) IOvertimeCheckInDo {
	return o.withDO(o.DO.Where(conds...))
}

func (o overtimeCheckInDo) Order(conds ...field.Expr) IOvertimeCheckInDo {
	return o.withDO(o.DO.Order(conds...))
}

func (o overtimeCheckInDo) Distinct(cols ...field.Expr) IOvertimeCheckInDo {
	return o.withDO(o.DO.Distinct(cols...))
}

func (o overtimeCheckInDo) Omit(cols ...field.Expr) IOvertimeCheckInDo {
	return o.withDO(o.DO.Omit(cols...))
}

func (o overtimeCheckInDo) Join(table schema.Tabler, on ...field.Expr) IOvertimeCheckInDo {
	return o.withDO(o.DO.Join(table, on...))
}

func (o overtimeCheckInDo) LeftJoin(table schema.Tabler, on ...field.Expr) IOvertimeCheckInDo {
	return o.withDO(o.DO.LeftJoin(table, on...))
}

func (o overtimeCheckInDo) RightJoin(table schema.Tabler, on ...field.Expr) IOvertimeCheckInDo {
	return o.withDO(o.DO.RightJoin(table, on...))
}

func (o overtimeCheckInDo) Group(cols ...field.Expr) IOvertimeCheckInDo {
	return o.withDO(o.DO.Group(cols...))
}

func (o overtimeCheckInDo) Having(conds ...gen.Condition) IOvertimeCheckInDo {
	return o.withDO(o.DO.Having(conds...))
}

func (o overtimeCheckInDo) Limit(limit int) IOvertimeCheckInDo {
	return o.withDO(o.DO.Limit(limit))
}

func (o overtimeCheckInDo) Offset(offset int) IOvertimeCheckInDo {
	return o.withDO(o.DO.Offset(offset))
}

func (o overtimeCheckInDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IOvertimeCheckInDo {
	return o.withDO(o.DO.Scopes(funcs...))
}

func (o overtimeCheckInDo) Unscoped() IOvertimeCheckInDo {
	return o.withDO(o.DO.Unscoped())
}

func (o overtimeCheckInDo) Create(values ...*types.OvertimeCheckIn) error {
	if len(values) == 0 {
		return nil
	}
	return o.DO.Create(values)
}

func (o overtimeCheckInDo) CreateInBatches(values []*types.OvertimeCheckIn, batchSize int) error {
	return o.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (o overtimeCheckInDo) Save(values ...*types.OvertimeCheckIn) error {
	if len(values) == 0 {
		return nil
	}
	return o.DO.Save(values)
}

func (o overtimeCheckInDo) First() (*types.OvertimeCheckIn, error) {
	if result, err := o.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*types.OvertimeCheckIn), nil
	}
}

func (o overtimeCheckInDo) Take() (*types.OvertimeCheckIn, error) {
	if result, err := o.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*types.OvertimeCheckIn), nil
	}
}

func (o overtimeCheckInDo) Last() (*types.OvertimeCheckIn, error) {
	if result, err := o.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*types.OvertimeCheckIn), nil
	}
}

func (o overtimeCheckInDo) Find() ([]*types.OvertimeCheckIn, error) {
	result, err := o.DO.Find()
	return result.([]*types.OvertimeCheckIn), err
}

func (o overtimeCheckInDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*types.OvertimeCheckIn, err error) {
	buf := make([]*types.OvertimeCheckIn, 0, batchSize)
	err = o.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (o overtimeCheckInDo) FindInBatches(result *[]*types.OvertimeCheckIn, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return o.DO.FindInBatches(result, batchSize, fc)
}

func (o overtimeCheckInDo) Attrs(attrs ...field.AssignExpr) IOvertimeCheckInDo {
	return o.withDO(o.DO.Attrs(attrs...))
}

func (o overtimeCheckInDo) Assign(attrs ...field.AssignExpr) IOvertimeCheckInDo {
	return o.withDO(o.DO.Assign(attrs...))
}

func (o overtimeCheckInDo) Joins(fields ...field.RelationField) IOvertimeCheckInDo {
	for _, _f := range fields {
		o = *o.withDO(o.DO.Joins(_f))
	}
	return &o
}

func (o overtimeCheckInDo) Preload(fields ...field.RelationField) IOvertimeCheckInDo {
	for _, _f := range fields {
		o = *o.withDO(o.DO.Preload(_f))
	}
	return &o
}

func (o overtimeCheckInDo) FirstOrInit() (*types.OvertimeCheckIn, error) {
	if result, err := o.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*types.OvertimeCheckIn), nil
	}
}

func (o overtimeCheckInDo) FirstOrCreate() (*types.OvertimeCheckIn, error) {
	if result, err := o.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*types.OvertimeCheckIn), nil
	}
}

func (o overtimeCheckInDo) FindByPage(offset int, limit int) (result []*types.OvertimeCheckIn, count int64, err error) {
	result, err = o.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = o.Offset(-1).Limit(-1).Count()
	return
}

func (o overtimeCheckInDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = o.Count()
	if err != nil {
		return
	}

	err = o.Offset(offset).Limit(limit).Scan(result)
	return
}

func (o overtimeCheckInDo) Scan(result interface{}) (err error) {
	return o.DO.Scan(result)
}

func (o overtimeCheckInDo) Delete(models ...*types.OvertimeCheckIn) (result gen.ResultInfo, err error) {
	return o.DO.Delete(models)
}

func (o *overtimeCheckInDo) withDO(do gen.Dao) *overtimeCheckInDo {
	o.DO = *do.(*gen.DO)
	return o
}
