// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"hrapi/internal/types"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"
)

func newLeaveDefer(db *gorm.DB, opts ...gen.DOOption) leaveDefer {
	_leaveDefer := leaveDefer{}

	_leaveDefer.leaveDeferDo.UseDB(db, opts...)
	_leaveDefer.leaveDeferDo.UseModel(&types.LeaveDefer{})

	tableName := _leaveDefer.leaveDeferDo.TableName()
	_leaveDefer.ALL = field.NewAsterisk(tableName)
	_leaveDefer.ID = field.NewUint(tableName, "id")
	_leaveDefer.CreatedAt = field.NewTime(tableName, "created_at")
	_leaveDefer.UpdatedAt = field.NewTime(tableName, "updated_at")
	_leaveDefer.DeletedAt = field.NewField(tableName, "deleted_at")
	_leaveDefer.EmployeeID = field.NewUint(tableName, "employee_id")
	_leaveDefer.LeaveID = field.NewUint(tableName, "leave_id")
	_leaveDefer.Effective = field.NewField(tableName, "effective")
	_leaveDefer.Expired = field.NewField(tableName, "expired")
	_leaveDefer.Available = field.NewFloat64(tableName, "available")
	_leaveDefer.Used = field.NewFloat64(tableName, "used")
	_leaveDefer.Signing = field.NewFloat64(tableName, "signing")
	_leaveDefer.ThisTime = field.NewFloat64(tableName, "this_time")
	_leaveDefer.Extra = field.NewFloat64(tableName, "extra")
	_leaveDefer.PreviousID = field.NewUint(tableName, "previous_id")
	_leaveDefer.NextID = field.NewUint(tableName, "next_id")
	_leaveDefer.Employee = leaveDeferBelongsToEmployee{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Employee", "types.Employee"),
		Department: struct {
			field.RelationField
			Manager struct {
				field.RelationField
			}
		}{
			RelationField: field.NewRelation("Employee.Department", "types.Department"),
			Manager: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("Employee.Department.Manager", "types.Employee"),
			},
		},
		Rank: struct {
			field.RelationField
			Grade struct {
				field.RelationField
				Rank struct {
					field.RelationField
				}
			}
		}{
			RelationField: field.NewRelation("Employee.Rank", "types.PositionRank"),
			Grade: struct {
				field.RelationField
				Rank struct {
					field.RelationField
				}
			}{
				RelationField: field.NewRelation("Employee.Rank.Grade", "types.PositionGrade"),
				Rank: struct {
					field.RelationField
				}{
					RelationField: field.NewRelation("Employee.Rank.Grade.Rank", "types.PositionRank"),
				},
			},
		},
		Grade: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("Employee.Grade", "types.PositionGrade"),
		},
		LoginInformation: struct {
			field.RelationField
			Employee struct {
				field.RelationField
			}
		}{
			RelationField: field.NewRelation("Employee.LoginInformation", "types.LoginInformation"),
			Employee: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("Employee.LoginInformation.Employee", "types.Employee"),
			},
		},
		Roles: struct {
			field.RelationField
			Employees struct {
				field.RelationField
			}
			Permissions struct {
				field.RelationField
				Roles struct {
					field.RelationField
				}
			}
			Menus struct {
				field.RelationField
				Roles struct {
					field.RelationField
				}
			}
		}{
			RelationField: field.NewRelation("Employee.Roles", "types.Role"),
			Employees: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("Employee.Roles.Employees", "types.Employee"),
			},
			Permissions: struct {
				field.RelationField
				Roles struct {
					field.RelationField
				}
			}{
				RelationField: field.NewRelation("Employee.Roles.Permissions", "types.Permission"),
				Roles: struct {
					field.RelationField
				}{
					RelationField: field.NewRelation("Employee.Roles.Permissions.Roles", "types.Role"),
				},
			},
			Menus: struct {
				field.RelationField
				Roles struct {
					field.RelationField
				}
			}{
				RelationField: field.NewRelation("Employee.Roles.Menus", "types.Menu"),
				Roles: struct {
					field.RelationField
				}{
					RelationField: field.NewRelation("Employee.Roles.Menus.Roles", "types.Role"),
				},
			},
		},
	}

	_leaveDefer.Leave = leaveDeferBelongsToLeave{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Leave", "types.Leave"),
		LeaveGroup: struct {
			field.RelationField
			Leave struct {
				field.RelationField
			}
			LeaveGroupCondition struct {
				field.RelationField
				LeaveGroup struct {
					field.RelationField
				}
			}
			Employee struct {
				field.RelationField
			}
		}{
			RelationField: field.NewRelation("Leave.LeaveGroup", "types.LeaveGroup"),
			Leave: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("Leave.LeaveGroup.Leave", "types.Leave"),
			},
			LeaveGroupCondition: struct {
				field.RelationField
				LeaveGroup struct {
					field.RelationField
				}
			}{
				RelationField: field.NewRelation("Leave.LeaveGroup.LeaveGroupCondition", "types.LeaveGroupCondition"),
				LeaveGroup: struct {
					field.RelationField
				}{
					RelationField: field.NewRelation("Leave.LeaveGroup.LeaveGroupCondition.LeaveGroup", "types.LeaveGroup"),
				},
			},
			Employee: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("Leave.LeaveGroup.Employee", "types.Employee"),
			},
		},
	}

	_leaveDefer.fillFieldMap()

	return _leaveDefer
}

type leaveDefer struct {
	leaveDeferDo leaveDeferDo

	ALL        field.Asterisk
	ID         field.Uint
	CreatedAt  field.Time
	UpdatedAt  field.Time
	DeletedAt  field.Field
	EmployeeID field.Uint
	LeaveID    field.Uint
	Effective  field.Field
	Expired    field.Field
	Available  field.Float64
	Used       field.Float64
	Signing    field.Float64
	ThisTime   field.Float64
	Extra      field.Float64
	PreviousID field.Uint
	NextID     field.Uint
	Employee   leaveDeferBelongsToEmployee

	Leave leaveDeferBelongsToLeave

	fieldMap map[string]field.Expr
}

func (l leaveDefer) Table(newTableName string) *leaveDefer {
	l.leaveDeferDo.UseTable(newTableName)
	return l.updateTableName(newTableName)
}

func (l leaveDefer) As(alias string) *leaveDefer {
	l.leaveDeferDo.DO = *(l.leaveDeferDo.As(alias).(*gen.DO))
	return l.updateTableName(alias)
}

func (l *leaveDefer) updateTableName(table string) *leaveDefer {
	l.ALL = field.NewAsterisk(table)
	l.ID = field.NewUint(table, "id")
	l.CreatedAt = field.NewTime(table, "created_at")
	l.UpdatedAt = field.NewTime(table, "updated_at")
	l.DeletedAt = field.NewField(table, "deleted_at")
	l.EmployeeID = field.NewUint(table, "employee_id")
	l.LeaveID = field.NewUint(table, "leave_id")
	l.Effective = field.NewField(table, "effective")
	l.Expired = field.NewField(table, "expired")
	l.Available = field.NewFloat64(table, "available")
	l.Used = field.NewFloat64(table, "used")
	l.Signing = field.NewFloat64(table, "signing")
	l.ThisTime = field.NewFloat64(table, "this_time")
	l.Extra = field.NewFloat64(table, "extra")
	l.PreviousID = field.NewUint(table, "previous_id")
	l.NextID = field.NewUint(table, "next_id")

	l.fillFieldMap()

	return l
}

func (l *leaveDefer) WithContext(ctx context.Context) ILeaveDeferDo {
	return l.leaveDeferDo.WithContext(ctx)
}

func (l leaveDefer) TableName() string { return l.leaveDeferDo.TableName() }

func (l leaveDefer) Alias() string { return l.leaveDeferDo.Alias() }

func (l leaveDefer) Columns(cols ...field.Expr) gen.Columns { return l.leaveDeferDo.Columns(cols...) }

func (l *leaveDefer) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := l.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (l *leaveDefer) fillFieldMap() {
	l.fieldMap = make(map[string]field.Expr, 17)
	l.fieldMap["id"] = l.ID
	l.fieldMap["created_at"] = l.CreatedAt
	l.fieldMap["updated_at"] = l.UpdatedAt
	l.fieldMap["deleted_at"] = l.DeletedAt
	l.fieldMap["employee_id"] = l.EmployeeID
	l.fieldMap["leave_id"] = l.LeaveID
	l.fieldMap["effective"] = l.Effective
	l.fieldMap["expired"] = l.Expired
	l.fieldMap["available"] = l.Available
	l.fieldMap["used"] = l.Used
	l.fieldMap["signing"] = l.Signing
	l.fieldMap["this_time"] = l.ThisTime
	l.fieldMap["extra"] = l.Extra
	l.fieldMap["previous_id"] = l.PreviousID
	l.fieldMap["next_id"] = l.NextID

}

func (l leaveDefer) clone(db *gorm.DB) leaveDefer {
	l.leaveDeferDo.ReplaceConnPool(db.Statement.ConnPool)
	return l
}

func (l leaveDefer) replaceDB(db *gorm.DB) leaveDefer {
	l.leaveDeferDo.ReplaceDB(db)
	return l
}

type leaveDeferBelongsToEmployee struct {
	db *gorm.DB

	field.RelationField

	Department struct {
		field.RelationField
		Manager struct {
			field.RelationField
		}
	}
	Rank struct {
		field.RelationField
		Grade struct {
			field.RelationField
			Rank struct {
				field.RelationField
			}
		}
	}
	Grade struct {
		field.RelationField
	}
	LoginInformation struct {
		field.RelationField
		Employee struct {
			field.RelationField
		}
	}
	Roles struct {
		field.RelationField
		Employees struct {
			field.RelationField
		}
		Permissions struct {
			field.RelationField
			Roles struct {
				field.RelationField
			}
		}
		Menus struct {
			field.RelationField
			Roles struct {
				field.RelationField
			}
		}
	}
}

func (a leaveDeferBelongsToEmployee) Where(conds ...field.Expr) *leaveDeferBelongsToEmployee {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a leaveDeferBelongsToEmployee) WithContext(ctx context.Context) *leaveDeferBelongsToEmployee {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a leaveDeferBelongsToEmployee) Session(session *gorm.Session) *leaveDeferBelongsToEmployee {
	a.db = a.db.Session(session)
	return &a
}

func (a leaveDeferBelongsToEmployee) Model(m *types.LeaveDefer) *leaveDeferBelongsToEmployeeTx {
	return &leaveDeferBelongsToEmployeeTx{a.db.Model(m).Association(a.Name())}
}

type leaveDeferBelongsToEmployeeTx struct{ tx *gorm.Association }

func (a leaveDeferBelongsToEmployeeTx) Find() (result *types.Employee, err error) {
	return result, a.tx.Find(&result)
}

func (a leaveDeferBelongsToEmployeeTx) Append(values ...*types.Employee) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a leaveDeferBelongsToEmployeeTx) Replace(values ...*types.Employee) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a leaveDeferBelongsToEmployeeTx) Delete(values ...*types.Employee) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a leaveDeferBelongsToEmployeeTx) Clear() error {
	return a.tx.Clear()
}

func (a leaveDeferBelongsToEmployeeTx) Count() int64 {
	return a.tx.Count()
}

type leaveDeferBelongsToLeave struct {
	db *gorm.DB

	field.RelationField

	LeaveGroup struct {
		field.RelationField
		Leave struct {
			field.RelationField
		}
		LeaveGroupCondition struct {
			field.RelationField
			LeaveGroup struct {
				field.RelationField
			}
		}
		Employee struct {
			field.RelationField
		}
	}
}

func (a leaveDeferBelongsToLeave) Where(conds ...field.Expr) *leaveDeferBelongsToLeave {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a leaveDeferBelongsToLeave) WithContext(ctx context.Context) *leaveDeferBelongsToLeave {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a leaveDeferBelongsToLeave) Session(session *gorm.Session) *leaveDeferBelongsToLeave {
	a.db = a.db.Session(session)
	return &a
}

func (a leaveDeferBelongsToLeave) Model(m *types.LeaveDefer) *leaveDeferBelongsToLeaveTx {
	return &leaveDeferBelongsToLeaveTx{a.db.Model(m).Association(a.Name())}
}

type leaveDeferBelongsToLeaveTx struct{ tx *gorm.Association }

func (a leaveDeferBelongsToLeaveTx) Find() (result *types.Leave, err error) {
	return result, a.tx.Find(&result)
}

func (a leaveDeferBelongsToLeaveTx) Append(values ...*types.Leave) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a leaveDeferBelongsToLeaveTx) Replace(values ...*types.Leave) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a leaveDeferBelongsToLeaveTx) Delete(values ...*types.Leave) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a leaveDeferBelongsToLeaveTx) Clear() error {
	return a.tx.Clear()
}

func (a leaveDeferBelongsToLeaveTx) Count() int64 {
	return a.tx.Count()
}

type leaveDeferDo struct{ gen.DO }

type ILeaveDeferDo interface {
	gen.SubQuery
	Debug() ILeaveDeferDo
	WithContext(ctx context.Context) ILeaveDeferDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ILeaveDeferDo
	WriteDB() ILeaveDeferDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ILeaveDeferDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ILeaveDeferDo
	Not(conds ...gen.Condition) ILeaveDeferDo
	Or(conds ...gen.Condition) ILeaveDeferDo
	Select(conds ...field.Expr) ILeaveDeferDo
	Where(conds ...gen.Condition) ILeaveDeferDo
	Order(conds ...field.Expr) ILeaveDeferDo
	Distinct(cols ...field.Expr) ILeaveDeferDo
	Omit(cols ...field.Expr) ILeaveDeferDo
	Join(table schema.Tabler, on ...field.Expr) ILeaveDeferDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ILeaveDeferDo
	RightJoin(table schema.Tabler, on ...field.Expr) ILeaveDeferDo
	Group(cols ...field.Expr) ILeaveDeferDo
	Having(conds ...gen.Condition) ILeaveDeferDo
	Limit(limit int) ILeaveDeferDo
	Offset(offset int) ILeaveDeferDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ILeaveDeferDo
	Unscoped() ILeaveDeferDo
	Create(values ...*types.LeaveDefer) error
	CreateInBatches(values []*types.LeaveDefer, batchSize int) error
	Save(values ...*types.LeaveDefer) error
	First() (*types.LeaveDefer, error)
	Take() (*types.LeaveDefer, error)
	Last() (*types.LeaveDefer, error)
	Find() ([]*types.LeaveDefer, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*types.LeaveDefer, err error)
	FindInBatches(result *[]*types.LeaveDefer, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*types.LeaveDefer) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ILeaveDeferDo
	Assign(attrs ...field.AssignExpr) ILeaveDeferDo
	Joins(fields ...field.RelationField) ILeaveDeferDo
	Preload(fields ...field.RelationField) ILeaveDeferDo
	FirstOrInit() (*types.LeaveDefer, error)
	FirstOrCreate() (*types.LeaveDefer, error)
	FindByPage(offset int, limit int) (result []*types.LeaveDefer, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ILeaveDeferDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (l leaveDeferDo) Debug() ILeaveDeferDo {
	return l.withDO(l.DO.Debug())
}

func (l leaveDeferDo) WithContext(ctx context.Context) ILeaveDeferDo {
	return l.withDO(l.DO.WithContext(ctx))
}

func (l leaveDeferDo) ReadDB() ILeaveDeferDo {
	return l.Clauses(dbresolver.Read)
}

func (l leaveDeferDo) WriteDB() ILeaveDeferDo {
	return l.Clauses(dbresolver.Write)
}

func (l leaveDeferDo) Session(config *gorm.Session) ILeaveDeferDo {
	return l.withDO(l.DO.Session(config))
}

func (l leaveDeferDo) Clauses(conds ...clause.Expression) ILeaveDeferDo {
	return l.withDO(l.DO.Clauses(conds...))
}

func (l leaveDeferDo) Returning(value interface{}, columns ...string) ILeaveDeferDo {
	return l.withDO(l.DO.Returning(value, columns...))
}

func (l leaveDeferDo) Not(conds ...gen.Condition) ILeaveDeferDo {
	return l.withDO(l.DO.Not(conds...))
}

func (l leaveDeferDo) Or(conds ...gen.Condition) ILeaveDeferDo {
	return l.withDO(l.DO.Or(conds...))
}

func (l leaveDeferDo) Select(conds ...field.Expr) ILeaveDeferDo {
	return l.withDO(l.DO.Select(conds...))
}

func (l leaveDeferDo) Where(conds ...gen.Condition) ILeaveDeferDo {
	return l.withDO(l.DO.Where(conds...))
}

func (l leaveDeferDo) Order(conds ...field.Expr) ILeaveDeferDo {
	return l.withDO(l.DO.Order(conds...))
}

func (l leaveDeferDo) Distinct(cols ...field.Expr) ILeaveDeferDo {
	return l.withDO(l.DO.Distinct(cols...))
}

func (l leaveDeferDo) Omit(cols ...field.Expr) ILeaveDeferDo {
	return l.withDO(l.DO.Omit(cols...))
}

func (l leaveDeferDo) Join(table schema.Tabler, on ...field.Expr) ILeaveDeferDo {
	return l.withDO(l.DO.Join(table, on...))
}

func (l leaveDeferDo) LeftJoin(table schema.Tabler, on ...field.Expr) ILeaveDeferDo {
	return l.withDO(l.DO.LeftJoin(table, on...))
}

func (l leaveDeferDo) RightJoin(table schema.Tabler, on ...field.Expr) ILeaveDeferDo {
	return l.withDO(l.DO.RightJoin(table, on...))
}

func (l leaveDeferDo) Group(cols ...field.Expr) ILeaveDeferDo {
	return l.withDO(l.DO.Group(cols...))
}

func (l leaveDeferDo) Having(conds ...gen.Condition) ILeaveDeferDo {
	return l.withDO(l.DO.Having(conds...))
}

func (l leaveDeferDo) Limit(limit int) ILeaveDeferDo {
	return l.withDO(l.DO.Limit(limit))
}

func (l leaveDeferDo) Offset(offset int) ILeaveDeferDo {
	return l.withDO(l.DO.Offset(offset))
}

func (l leaveDeferDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ILeaveDeferDo {
	return l.withDO(l.DO.Scopes(funcs...))
}

func (l leaveDeferDo) Unscoped() ILeaveDeferDo {
	return l.withDO(l.DO.Unscoped())
}

func (l leaveDeferDo) Create(values ...*types.LeaveDefer) error {
	if len(values) == 0 {
		return nil
	}
	return l.DO.Create(values)
}

func (l leaveDeferDo) CreateInBatches(values []*types.LeaveDefer, batchSize int) error {
	return l.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (l leaveDeferDo) Save(values ...*types.LeaveDefer) error {
	if len(values) == 0 {
		return nil
	}
	return l.DO.Save(values)
}

func (l leaveDeferDo) First() (*types.LeaveDefer, error) {
	if result, err := l.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*types.LeaveDefer), nil
	}
}

func (l leaveDeferDo) Take() (*types.LeaveDefer, error) {
	if result, err := l.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*types.LeaveDefer), nil
	}
}

func (l leaveDeferDo) Last() (*types.LeaveDefer, error) {
	if result, err := l.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*types.LeaveDefer), nil
	}
}

func (l leaveDeferDo) Find() ([]*types.LeaveDefer, error) {
	result, err := l.DO.Find()
	return result.([]*types.LeaveDefer), err
}

func (l leaveDeferDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*types.LeaveDefer, err error) {
	buf := make([]*types.LeaveDefer, 0, batchSize)
	err = l.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (l leaveDeferDo) FindInBatches(result *[]*types.LeaveDefer, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return l.DO.FindInBatches(result, batchSize, fc)
}

func (l leaveDeferDo) Attrs(attrs ...field.AssignExpr) ILeaveDeferDo {
	return l.withDO(l.DO.Attrs(attrs...))
}

func (l leaveDeferDo) Assign(attrs ...field.AssignExpr) ILeaveDeferDo {
	return l.withDO(l.DO.Assign(attrs...))
}

func (l leaveDeferDo) Joins(fields ...field.RelationField) ILeaveDeferDo {
	for _, _f := range fields {
		l = *l.withDO(l.DO.Joins(_f))
	}
	return &l
}

func (l leaveDeferDo) Preload(fields ...field.RelationField) ILeaveDeferDo {
	for _, _f := range fields {
		l = *l.withDO(l.DO.Preload(_f))
	}
	return &l
}

func (l leaveDeferDo) FirstOrInit() (*types.LeaveDefer, error) {
	if result, err := l.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*types.LeaveDefer), nil
	}
}

func (l leaveDeferDo) FirstOrCreate() (*types.LeaveDefer, error) {
	if result, err := l.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*types.LeaveDefer), nil
	}
}

func (l leaveDeferDo) FindByPage(offset int, limit int) (result []*types.LeaveDefer, count int64, err error) {
	result, err = l.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = l.Offset(-1).Limit(-1).Count()
	return
}

func (l leaveDeferDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = l.Count()
	if err != nil {
		return
	}

	err = l.Offset(offset).Limit(limit).Scan(result)
	return
}

func (l leaveDeferDo) Scan(result interface{}) (err error) {
	return l.DO.Scan(result)
}

func (l leaveDeferDo) Delete(models ...*types.LeaveDefer) (result gen.ResultInfo, err error) {
	return l.DO.Delete(models)
}

func (l *leaveDeferDo) withDO(do gen.Dao) *leaveDeferDo {
	l.DO = *do.(*gen.DO)
	return l
}
