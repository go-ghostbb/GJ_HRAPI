// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"hrapi/internal/types"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"
)

func newSalaryReduceItemEmployee(db *gorm.DB, opts ...gen.DOOption) salaryReduceItemEmployee {
	_salaryReduceItemEmployee := salaryReduceItemEmployee{}

	_salaryReduceItemEmployee.salaryReduceItemEmployeeDo.UseDB(db, opts...)
	_salaryReduceItemEmployee.salaryReduceItemEmployeeDo.UseModel(&types.SalaryReduceItemEmployee{})

	tableName := _salaryReduceItemEmployee.salaryReduceItemEmployeeDo.TableName()
	_salaryReduceItemEmployee.ALL = field.NewAsterisk(tableName)
	_salaryReduceItemEmployee.SalaryReduceItemID = field.NewUint(tableName, "salary_reduce_item_id")
	_salaryReduceItemEmployee.EmployeeID = field.NewUint(tableName, "employee_id")

	_salaryReduceItemEmployee.fillFieldMap()

	return _salaryReduceItemEmployee
}

type salaryReduceItemEmployee struct {
	salaryReduceItemEmployeeDo salaryReduceItemEmployeeDo

	ALL                field.Asterisk
	SalaryReduceItemID field.Uint
	EmployeeID         field.Uint

	fieldMap map[string]field.Expr
}

func (s salaryReduceItemEmployee) Table(newTableName string) *salaryReduceItemEmployee {
	s.salaryReduceItemEmployeeDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s salaryReduceItemEmployee) As(alias string) *salaryReduceItemEmployee {
	s.salaryReduceItemEmployeeDo.DO = *(s.salaryReduceItemEmployeeDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *salaryReduceItemEmployee) updateTableName(table string) *salaryReduceItemEmployee {
	s.ALL = field.NewAsterisk(table)
	s.SalaryReduceItemID = field.NewUint(table, "salary_reduce_item_id")
	s.EmployeeID = field.NewUint(table, "employee_id")

	s.fillFieldMap()

	return s
}

func (s *salaryReduceItemEmployee) WithContext(ctx context.Context) ISalaryReduceItemEmployeeDo {
	return s.salaryReduceItemEmployeeDo.WithContext(ctx)
}

func (s salaryReduceItemEmployee) TableName() string { return s.salaryReduceItemEmployeeDo.TableName() }

func (s salaryReduceItemEmployee) Alias() string { return s.salaryReduceItemEmployeeDo.Alias() }

func (s salaryReduceItemEmployee) Columns(cols ...field.Expr) gen.Columns {
	return s.salaryReduceItemEmployeeDo.Columns(cols...)
}

func (s *salaryReduceItemEmployee) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *salaryReduceItemEmployee) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 2)
	s.fieldMap["salary_reduce_item_id"] = s.SalaryReduceItemID
	s.fieldMap["employee_id"] = s.EmployeeID
}

func (s salaryReduceItemEmployee) clone(db *gorm.DB) salaryReduceItemEmployee {
	s.salaryReduceItemEmployeeDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s salaryReduceItemEmployee) replaceDB(db *gorm.DB) salaryReduceItemEmployee {
	s.salaryReduceItemEmployeeDo.ReplaceDB(db)
	return s
}

type salaryReduceItemEmployeeDo struct{ gen.DO }

type ISalaryReduceItemEmployeeDo interface {
	gen.SubQuery
	Debug() ISalaryReduceItemEmployeeDo
	WithContext(ctx context.Context) ISalaryReduceItemEmployeeDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ISalaryReduceItemEmployeeDo
	WriteDB() ISalaryReduceItemEmployeeDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ISalaryReduceItemEmployeeDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ISalaryReduceItemEmployeeDo
	Not(conds ...gen.Condition) ISalaryReduceItemEmployeeDo
	Or(conds ...gen.Condition) ISalaryReduceItemEmployeeDo
	Select(conds ...field.Expr) ISalaryReduceItemEmployeeDo
	Where(conds ...gen.Condition) ISalaryReduceItemEmployeeDo
	Order(conds ...field.Expr) ISalaryReduceItemEmployeeDo
	Distinct(cols ...field.Expr) ISalaryReduceItemEmployeeDo
	Omit(cols ...field.Expr) ISalaryReduceItemEmployeeDo
	Join(table schema.Tabler, on ...field.Expr) ISalaryReduceItemEmployeeDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ISalaryReduceItemEmployeeDo
	RightJoin(table schema.Tabler, on ...field.Expr) ISalaryReduceItemEmployeeDo
	Group(cols ...field.Expr) ISalaryReduceItemEmployeeDo
	Having(conds ...gen.Condition) ISalaryReduceItemEmployeeDo
	Limit(limit int) ISalaryReduceItemEmployeeDo
	Offset(offset int) ISalaryReduceItemEmployeeDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ISalaryReduceItemEmployeeDo
	Unscoped() ISalaryReduceItemEmployeeDo
	Create(values ...*types.SalaryReduceItemEmployee) error
	CreateInBatches(values []*types.SalaryReduceItemEmployee, batchSize int) error
	Save(values ...*types.SalaryReduceItemEmployee) error
	First() (*types.SalaryReduceItemEmployee, error)
	Take() (*types.SalaryReduceItemEmployee, error)
	Last() (*types.SalaryReduceItemEmployee, error)
	Find() ([]*types.SalaryReduceItemEmployee, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*types.SalaryReduceItemEmployee, err error)
	FindInBatches(result *[]*types.SalaryReduceItemEmployee, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*types.SalaryReduceItemEmployee) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ISalaryReduceItemEmployeeDo
	Assign(attrs ...field.AssignExpr) ISalaryReduceItemEmployeeDo
	Joins(fields ...field.RelationField) ISalaryReduceItemEmployeeDo
	Preload(fields ...field.RelationField) ISalaryReduceItemEmployeeDo
	FirstOrInit() (*types.SalaryReduceItemEmployee, error)
	FirstOrCreate() (*types.SalaryReduceItemEmployee, error)
	FindByPage(offset int, limit int) (result []*types.SalaryReduceItemEmployee, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ISalaryReduceItemEmployeeDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s salaryReduceItemEmployeeDo) Debug() ISalaryReduceItemEmployeeDo {
	return s.withDO(s.DO.Debug())
}

func (s salaryReduceItemEmployeeDo) WithContext(ctx context.Context) ISalaryReduceItemEmployeeDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s salaryReduceItemEmployeeDo) ReadDB() ISalaryReduceItemEmployeeDo {
	return s.Clauses(dbresolver.Read)
}

func (s salaryReduceItemEmployeeDo) WriteDB() ISalaryReduceItemEmployeeDo {
	return s.Clauses(dbresolver.Write)
}

func (s salaryReduceItemEmployeeDo) Session(config *gorm.Session) ISalaryReduceItemEmployeeDo {
	return s.withDO(s.DO.Session(config))
}

func (s salaryReduceItemEmployeeDo) Clauses(conds ...clause.Expression) ISalaryReduceItemEmployeeDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s salaryReduceItemEmployeeDo) Returning(value interface{}, columns ...string) ISalaryReduceItemEmployeeDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s salaryReduceItemEmployeeDo) Not(conds ...gen.Condition) ISalaryReduceItemEmployeeDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s salaryReduceItemEmployeeDo) Or(conds ...gen.Condition) ISalaryReduceItemEmployeeDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s salaryReduceItemEmployeeDo) Select(conds ...field.Expr) ISalaryReduceItemEmployeeDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s salaryReduceItemEmployeeDo) Where(conds ...gen.Condition) ISalaryReduceItemEmployeeDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s salaryReduceItemEmployeeDo) Order(conds ...field.Expr) ISalaryReduceItemEmployeeDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s salaryReduceItemEmployeeDo) Distinct(cols ...field.Expr) ISalaryReduceItemEmployeeDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s salaryReduceItemEmployeeDo) Omit(cols ...field.Expr) ISalaryReduceItemEmployeeDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s salaryReduceItemEmployeeDo) Join(table schema.Tabler, on ...field.Expr) ISalaryReduceItemEmployeeDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s salaryReduceItemEmployeeDo) LeftJoin(table schema.Tabler, on ...field.Expr) ISalaryReduceItemEmployeeDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s salaryReduceItemEmployeeDo) RightJoin(table schema.Tabler, on ...field.Expr) ISalaryReduceItemEmployeeDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s salaryReduceItemEmployeeDo) Group(cols ...field.Expr) ISalaryReduceItemEmployeeDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s salaryReduceItemEmployeeDo) Having(conds ...gen.Condition) ISalaryReduceItemEmployeeDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s salaryReduceItemEmployeeDo) Limit(limit int) ISalaryReduceItemEmployeeDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s salaryReduceItemEmployeeDo) Offset(offset int) ISalaryReduceItemEmployeeDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s salaryReduceItemEmployeeDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ISalaryReduceItemEmployeeDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s salaryReduceItemEmployeeDo) Unscoped() ISalaryReduceItemEmployeeDo {
	return s.withDO(s.DO.Unscoped())
}

func (s salaryReduceItemEmployeeDo) Create(values ...*types.SalaryReduceItemEmployee) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s salaryReduceItemEmployeeDo) CreateInBatches(values []*types.SalaryReduceItemEmployee, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s salaryReduceItemEmployeeDo) Save(values ...*types.SalaryReduceItemEmployee) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s salaryReduceItemEmployeeDo) First() (*types.SalaryReduceItemEmployee, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*types.SalaryReduceItemEmployee), nil
	}
}

func (s salaryReduceItemEmployeeDo) Take() (*types.SalaryReduceItemEmployee, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*types.SalaryReduceItemEmployee), nil
	}
}

func (s salaryReduceItemEmployeeDo) Last() (*types.SalaryReduceItemEmployee, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*types.SalaryReduceItemEmployee), nil
	}
}

func (s salaryReduceItemEmployeeDo) Find() ([]*types.SalaryReduceItemEmployee, error) {
	result, err := s.DO.Find()
	return result.([]*types.SalaryReduceItemEmployee), err
}

func (s salaryReduceItemEmployeeDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*types.SalaryReduceItemEmployee, err error) {
	buf := make([]*types.SalaryReduceItemEmployee, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s salaryReduceItemEmployeeDo) FindInBatches(result *[]*types.SalaryReduceItemEmployee, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s salaryReduceItemEmployeeDo) Attrs(attrs ...field.AssignExpr) ISalaryReduceItemEmployeeDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s salaryReduceItemEmployeeDo) Assign(attrs ...field.AssignExpr) ISalaryReduceItemEmployeeDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s salaryReduceItemEmployeeDo) Joins(fields ...field.RelationField) ISalaryReduceItemEmployeeDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s salaryReduceItemEmployeeDo) Preload(fields ...field.RelationField) ISalaryReduceItemEmployeeDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s salaryReduceItemEmployeeDo) FirstOrInit() (*types.SalaryReduceItemEmployee, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*types.SalaryReduceItemEmployee), nil
	}
}

func (s salaryReduceItemEmployeeDo) FirstOrCreate() (*types.SalaryReduceItemEmployee, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*types.SalaryReduceItemEmployee), nil
	}
}

func (s salaryReduceItemEmployeeDo) FindByPage(offset int, limit int) (result []*types.SalaryReduceItemEmployee, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s salaryReduceItemEmployeeDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s salaryReduceItemEmployeeDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s salaryReduceItemEmployeeDo) Delete(models ...*types.SalaryReduceItemEmployee) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *salaryReduceItemEmployeeDo) withDO(do gen.Dao) *salaryReduceItemEmployeeDo {
	s.DO = *do.(*gen.DO)
	return s
}
