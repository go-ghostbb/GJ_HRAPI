// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"hrapi/internal/types"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"
)

func newSalaryReduceItem(db *gorm.DB, opts ...gen.DOOption) salaryReduceItem {
	_salaryReduceItem := salaryReduceItem{}

	_salaryReduceItem.salaryReduceItemDo.UseDB(db, opts...)
	_salaryReduceItem.salaryReduceItemDo.UseModel(&types.SalaryReduceItem{})

	tableName := _salaryReduceItem.salaryReduceItemDo.TableName()
	_salaryReduceItem.ALL = field.NewAsterisk(tableName)
	_salaryReduceItem.ID = field.NewUint(tableName, "id")
	_salaryReduceItem.CreatedAt = field.NewTime(tableName, "created_at")
	_salaryReduceItem.UpdatedAt = field.NewTime(tableName, "updated_at")
	_salaryReduceItem.DeletedAt = field.NewField(tableName, "deleted_at")
	_salaryReduceItem.Name = field.NewString(tableName, "name")
	_salaryReduceItem.IncomeTax = field.NewBool(tableName, "income_tax")
	_salaryReduceItem.Amount = field.NewFloat32(tableName, "amount")
	_salaryReduceItem.CalcType = field.NewField(tableName, "calc_type")
	_salaryReduceItem.MonthCalc = field.NewBool(tableName, "month_calc")
	_salaryReduceItem.Unit = field.NewField(tableName, "unit")
	_salaryReduceItem.Operator = field.NewField(tableName, "operator")
	_salaryReduceItem.Argument = field.NewFloat32(tableName, "argument")

	_salaryReduceItem.fillFieldMap()

	return _salaryReduceItem
}

type salaryReduceItem struct {
	salaryReduceItemDo salaryReduceItemDo

	ALL       field.Asterisk
	ID        field.Uint
	CreatedAt field.Time
	UpdatedAt field.Time
	DeletedAt field.Field
	Name      field.String
	IncomeTax field.Bool
	Amount    field.Float32
	CalcType  field.Field
	MonthCalc field.Bool
	Unit      field.Field
	Operator  field.Field
	Argument  field.Float32

	fieldMap map[string]field.Expr
}

func (s salaryReduceItem) Table(newTableName string) *salaryReduceItem {
	s.salaryReduceItemDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s salaryReduceItem) As(alias string) *salaryReduceItem {
	s.salaryReduceItemDo.DO = *(s.salaryReduceItemDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *salaryReduceItem) updateTableName(table string) *salaryReduceItem {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewUint(table, "id")
	s.CreatedAt = field.NewTime(table, "created_at")
	s.UpdatedAt = field.NewTime(table, "updated_at")
	s.DeletedAt = field.NewField(table, "deleted_at")
	s.Name = field.NewString(table, "name")
	s.IncomeTax = field.NewBool(table, "income_tax")
	s.Amount = field.NewFloat32(table, "amount")
	s.CalcType = field.NewField(table, "calc_type")
	s.MonthCalc = field.NewBool(table, "month_calc")
	s.Unit = field.NewField(table, "unit")
	s.Operator = field.NewField(table, "operator")
	s.Argument = field.NewFloat32(table, "argument")

	s.fillFieldMap()

	return s
}

func (s *salaryReduceItem) WithContext(ctx context.Context) ISalaryReduceItemDo {
	return s.salaryReduceItemDo.WithContext(ctx)
}

func (s salaryReduceItem) TableName() string { return s.salaryReduceItemDo.TableName() }

func (s salaryReduceItem) Alias() string { return s.salaryReduceItemDo.Alias() }

func (s salaryReduceItem) Columns(cols ...field.Expr) gen.Columns {
	return s.salaryReduceItemDo.Columns(cols...)
}

func (s *salaryReduceItem) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *salaryReduceItem) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 12)
	s.fieldMap["id"] = s.ID
	s.fieldMap["created_at"] = s.CreatedAt
	s.fieldMap["updated_at"] = s.UpdatedAt
	s.fieldMap["deleted_at"] = s.DeletedAt
	s.fieldMap["name"] = s.Name
	s.fieldMap["income_tax"] = s.IncomeTax
	s.fieldMap["amount"] = s.Amount
	s.fieldMap["calc_type"] = s.CalcType
	s.fieldMap["month_calc"] = s.MonthCalc
	s.fieldMap["unit"] = s.Unit
	s.fieldMap["operator"] = s.Operator
	s.fieldMap["argument"] = s.Argument
}

func (s salaryReduceItem) clone(db *gorm.DB) salaryReduceItem {
	s.salaryReduceItemDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s salaryReduceItem) replaceDB(db *gorm.DB) salaryReduceItem {
	s.salaryReduceItemDo.ReplaceDB(db)
	return s
}

type salaryReduceItemDo struct{ gen.DO }

type ISalaryReduceItemDo interface {
	gen.SubQuery
	Debug() ISalaryReduceItemDo
	WithContext(ctx context.Context) ISalaryReduceItemDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ISalaryReduceItemDo
	WriteDB() ISalaryReduceItemDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ISalaryReduceItemDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ISalaryReduceItemDo
	Not(conds ...gen.Condition) ISalaryReduceItemDo
	Or(conds ...gen.Condition) ISalaryReduceItemDo
	Select(conds ...field.Expr) ISalaryReduceItemDo
	Where(conds ...gen.Condition) ISalaryReduceItemDo
	Order(conds ...field.Expr) ISalaryReduceItemDo
	Distinct(cols ...field.Expr) ISalaryReduceItemDo
	Omit(cols ...field.Expr) ISalaryReduceItemDo
	Join(table schema.Tabler, on ...field.Expr) ISalaryReduceItemDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ISalaryReduceItemDo
	RightJoin(table schema.Tabler, on ...field.Expr) ISalaryReduceItemDo
	Group(cols ...field.Expr) ISalaryReduceItemDo
	Having(conds ...gen.Condition) ISalaryReduceItemDo
	Limit(limit int) ISalaryReduceItemDo
	Offset(offset int) ISalaryReduceItemDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ISalaryReduceItemDo
	Unscoped() ISalaryReduceItemDo
	Create(values ...*types.SalaryReduceItem) error
	CreateInBatches(values []*types.SalaryReduceItem, batchSize int) error
	Save(values ...*types.SalaryReduceItem) error
	First() (*types.SalaryReduceItem, error)
	Take() (*types.SalaryReduceItem, error)
	Last() (*types.SalaryReduceItem, error)
	Find() ([]*types.SalaryReduceItem, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*types.SalaryReduceItem, err error)
	FindInBatches(result *[]*types.SalaryReduceItem, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*types.SalaryReduceItem) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ISalaryReduceItemDo
	Assign(attrs ...field.AssignExpr) ISalaryReduceItemDo
	Joins(fields ...field.RelationField) ISalaryReduceItemDo
	Preload(fields ...field.RelationField) ISalaryReduceItemDo
	FirstOrInit() (*types.SalaryReduceItem, error)
	FirstOrCreate() (*types.SalaryReduceItem, error)
	FindByPage(offset int, limit int) (result []*types.SalaryReduceItem, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ISalaryReduceItemDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s salaryReduceItemDo) Debug() ISalaryReduceItemDo {
	return s.withDO(s.DO.Debug())
}

func (s salaryReduceItemDo) WithContext(ctx context.Context) ISalaryReduceItemDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s salaryReduceItemDo) ReadDB() ISalaryReduceItemDo {
	return s.Clauses(dbresolver.Read)
}

func (s salaryReduceItemDo) WriteDB() ISalaryReduceItemDo {
	return s.Clauses(dbresolver.Write)
}

func (s salaryReduceItemDo) Session(config *gorm.Session) ISalaryReduceItemDo {
	return s.withDO(s.DO.Session(config))
}

func (s salaryReduceItemDo) Clauses(conds ...clause.Expression) ISalaryReduceItemDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s salaryReduceItemDo) Returning(value interface{}, columns ...string) ISalaryReduceItemDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s salaryReduceItemDo) Not(conds ...gen.Condition) ISalaryReduceItemDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s salaryReduceItemDo) Or(conds ...gen.Condition) ISalaryReduceItemDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s salaryReduceItemDo) Select(conds ...field.Expr) ISalaryReduceItemDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s salaryReduceItemDo) Where(conds ...gen.Condition) ISalaryReduceItemDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s salaryReduceItemDo) Order(conds ...field.Expr) ISalaryReduceItemDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s salaryReduceItemDo) Distinct(cols ...field.Expr) ISalaryReduceItemDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s salaryReduceItemDo) Omit(cols ...field.Expr) ISalaryReduceItemDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s salaryReduceItemDo) Join(table schema.Tabler, on ...field.Expr) ISalaryReduceItemDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s salaryReduceItemDo) LeftJoin(table schema.Tabler, on ...field.Expr) ISalaryReduceItemDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s salaryReduceItemDo) RightJoin(table schema.Tabler, on ...field.Expr) ISalaryReduceItemDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s salaryReduceItemDo) Group(cols ...field.Expr) ISalaryReduceItemDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s salaryReduceItemDo) Having(conds ...gen.Condition) ISalaryReduceItemDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s salaryReduceItemDo) Limit(limit int) ISalaryReduceItemDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s salaryReduceItemDo) Offset(offset int) ISalaryReduceItemDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s salaryReduceItemDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ISalaryReduceItemDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s salaryReduceItemDo) Unscoped() ISalaryReduceItemDo {
	return s.withDO(s.DO.Unscoped())
}

func (s salaryReduceItemDo) Create(values ...*types.SalaryReduceItem) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s salaryReduceItemDo) CreateInBatches(values []*types.SalaryReduceItem, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s salaryReduceItemDo) Save(values ...*types.SalaryReduceItem) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s salaryReduceItemDo) First() (*types.SalaryReduceItem, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*types.SalaryReduceItem), nil
	}
}

func (s salaryReduceItemDo) Take() (*types.SalaryReduceItem, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*types.SalaryReduceItem), nil
	}
}

func (s salaryReduceItemDo) Last() (*types.SalaryReduceItem, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*types.SalaryReduceItem), nil
	}
}

func (s salaryReduceItemDo) Find() ([]*types.SalaryReduceItem, error) {
	result, err := s.DO.Find()
	return result.([]*types.SalaryReduceItem), err
}

func (s salaryReduceItemDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*types.SalaryReduceItem, err error) {
	buf := make([]*types.SalaryReduceItem, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s salaryReduceItemDo) FindInBatches(result *[]*types.SalaryReduceItem, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s salaryReduceItemDo) Attrs(attrs ...field.AssignExpr) ISalaryReduceItemDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s salaryReduceItemDo) Assign(attrs ...field.AssignExpr) ISalaryReduceItemDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s salaryReduceItemDo) Joins(fields ...field.RelationField) ISalaryReduceItemDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s salaryReduceItemDo) Preload(fields ...field.RelationField) ISalaryReduceItemDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s salaryReduceItemDo) FirstOrInit() (*types.SalaryReduceItem, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*types.SalaryReduceItem), nil
	}
}

func (s salaryReduceItemDo) FirstOrCreate() (*types.SalaryReduceItem, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*types.SalaryReduceItem), nil
	}
}

func (s salaryReduceItemDo) FindByPage(offset int, limit int) (result []*types.SalaryReduceItem, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s salaryReduceItemDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s salaryReduceItemDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s salaryReduceItemDo) Delete(models ...*types.SalaryReduceItem) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *salaryReduceItemDo) withDO(do gen.Dao) *salaryReduceItemDo {
	s.DO = *do.(*gen.DO)
	return s
}
