// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"hrapi/internal/types"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"
)

func newCalcSalaryAdd(db *gorm.DB, opts ...gen.DOOption) calcSalaryAdd {
	_calcSalaryAdd := calcSalaryAdd{}

	_calcSalaryAdd.calcSalaryAddDo.UseDB(db, opts...)
	_calcSalaryAdd.calcSalaryAddDo.UseModel(&types.CalcSalaryAdd{})

	tableName := _calcSalaryAdd.calcSalaryAddDo.TableName()
	_calcSalaryAdd.ALL = field.NewAsterisk(tableName)
	_calcSalaryAdd.ID = field.NewUint(tableName, "id")
	_calcSalaryAdd.CreatedAt = field.NewTime(tableName, "created_at")
	_calcSalaryAdd.UpdatedAt = field.NewTime(tableName, "updated_at")
	_calcSalaryAdd.DeletedAt = field.NewField(tableName, "deleted_at")
	_calcSalaryAdd.CalcSalaryID = field.NewUint(tableName, "calc_salary_id")
	_calcSalaryAdd.Name = field.NewString(tableName, "name")
	_calcSalaryAdd.Amount = field.NewFloat32(tableName, "amount")
	_calcSalaryAdd.CalcSalary = calcSalaryAddBelongsToCalcSalary{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("CalcSalary", "types.CalcSalary"),
		SalaryAdd: struct {
			field.RelationField
			CalcSalary struct {
				field.RelationField
			}
		}{
			RelationField: field.NewRelation("CalcSalary.SalaryAdd", "types.CalcSalaryAdd"),
			CalcSalary: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("CalcSalary.SalaryAdd.CalcSalary", "types.CalcSalary"),
			},
		},
		SalaryReduce: struct {
			field.RelationField
			CalcSalary struct {
				field.RelationField
			}
		}{
			RelationField: field.NewRelation("CalcSalary.SalaryReduce", "types.CalcSalaryReduce"),
			CalcSalary: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("CalcSalary.SalaryReduce.CalcSalary", "types.CalcSalary"),
			},
		},
	}

	_calcSalaryAdd.fillFieldMap()

	return _calcSalaryAdd
}

type calcSalaryAdd struct {
	calcSalaryAddDo calcSalaryAddDo

	ALL          field.Asterisk
	ID           field.Uint
	CreatedAt    field.Time
	UpdatedAt    field.Time
	DeletedAt    field.Field
	CalcSalaryID field.Uint
	Name         field.String
	Amount       field.Float32
	CalcSalary   calcSalaryAddBelongsToCalcSalary

	fieldMap map[string]field.Expr
}

func (c calcSalaryAdd) Table(newTableName string) *calcSalaryAdd {
	c.calcSalaryAddDo.UseTable(newTableName)
	return c.updateTableName(newTableName)
}

func (c calcSalaryAdd) As(alias string) *calcSalaryAdd {
	c.calcSalaryAddDo.DO = *(c.calcSalaryAddDo.As(alias).(*gen.DO))
	return c.updateTableName(alias)
}

func (c *calcSalaryAdd) updateTableName(table string) *calcSalaryAdd {
	c.ALL = field.NewAsterisk(table)
	c.ID = field.NewUint(table, "id")
	c.CreatedAt = field.NewTime(table, "created_at")
	c.UpdatedAt = field.NewTime(table, "updated_at")
	c.DeletedAt = field.NewField(table, "deleted_at")
	c.CalcSalaryID = field.NewUint(table, "calc_salary_id")
	c.Name = field.NewString(table, "name")
	c.Amount = field.NewFloat32(table, "amount")

	c.fillFieldMap()

	return c
}

func (c *calcSalaryAdd) WithContext(ctx context.Context) ICalcSalaryAddDo {
	return c.calcSalaryAddDo.WithContext(ctx)
}

func (c calcSalaryAdd) TableName() string { return c.calcSalaryAddDo.TableName() }

func (c calcSalaryAdd) Alias() string { return c.calcSalaryAddDo.Alias() }

func (c calcSalaryAdd) Columns(cols ...field.Expr) gen.Columns {
	return c.calcSalaryAddDo.Columns(cols...)
}

func (c *calcSalaryAdd) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := c.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (c *calcSalaryAdd) fillFieldMap() {
	c.fieldMap = make(map[string]field.Expr, 8)
	c.fieldMap["id"] = c.ID
	c.fieldMap["created_at"] = c.CreatedAt
	c.fieldMap["updated_at"] = c.UpdatedAt
	c.fieldMap["deleted_at"] = c.DeletedAt
	c.fieldMap["calc_salary_id"] = c.CalcSalaryID
	c.fieldMap["name"] = c.Name
	c.fieldMap["amount"] = c.Amount

}

func (c calcSalaryAdd) clone(db *gorm.DB) calcSalaryAdd {
	c.calcSalaryAddDo.ReplaceConnPool(db.Statement.ConnPool)
	return c
}

func (c calcSalaryAdd) replaceDB(db *gorm.DB) calcSalaryAdd {
	c.calcSalaryAddDo.ReplaceDB(db)
	return c
}

type calcSalaryAddBelongsToCalcSalary struct {
	db *gorm.DB

	field.RelationField

	SalaryAdd struct {
		field.RelationField
		CalcSalary struct {
			field.RelationField
		}
	}
	SalaryReduce struct {
		field.RelationField
		CalcSalary struct {
			field.RelationField
		}
	}
}

func (a calcSalaryAddBelongsToCalcSalary) Where(conds ...field.Expr) *calcSalaryAddBelongsToCalcSalary {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a calcSalaryAddBelongsToCalcSalary) WithContext(ctx context.Context) *calcSalaryAddBelongsToCalcSalary {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a calcSalaryAddBelongsToCalcSalary) Session(session *gorm.Session) *calcSalaryAddBelongsToCalcSalary {
	a.db = a.db.Session(session)
	return &a
}

func (a calcSalaryAddBelongsToCalcSalary) Model(m *types.CalcSalaryAdd) *calcSalaryAddBelongsToCalcSalaryTx {
	return &calcSalaryAddBelongsToCalcSalaryTx{a.db.Model(m).Association(a.Name())}
}

type calcSalaryAddBelongsToCalcSalaryTx struct{ tx *gorm.Association }

func (a calcSalaryAddBelongsToCalcSalaryTx) Find() (result *types.CalcSalary, err error) {
	return result, a.tx.Find(&result)
}

func (a calcSalaryAddBelongsToCalcSalaryTx) Append(values ...*types.CalcSalary) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a calcSalaryAddBelongsToCalcSalaryTx) Replace(values ...*types.CalcSalary) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a calcSalaryAddBelongsToCalcSalaryTx) Delete(values ...*types.CalcSalary) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a calcSalaryAddBelongsToCalcSalaryTx) Clear() error {
	return a.tx.Clear()
}

func (a calcSalaryAddBelongsToCalcSalaryTx) Count() int64 {
	return a.tx.Count()
}

type calcSalaryAddDo struct{ gen.DO }

type ICalcSalaryAddDo interface {
	gen.SubQuery
	Debug() ICalcSalaryAddDo
	WithContext(ctx context.Context) ICalcSalaryAddDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ICalcSalaryAddDo
	WriteDB() ICalcSalaryAddDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ICalcSalaryAddDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ICalcSalaryAddDo
	Not(conds ...gen.Condition) ICalcSalaryAddDo
	Or(conds ...gen.Condition) ICalcSalaryAddDo
	Select(conds ...field.Expr) ICalcSalaryAddDo
	Where(conds ...gen.Condition) ICalcSalaryAddDo
	Order(conds ...field.Expr) ICalcSalaryAddDo
	Distinct(cols ...field.Expr) ICalcSalaryAddDo
	Omit(cols ...field.Expr) ICalcSalaryAddDo
	Join(table schema.Tabler, on ...field.Expr) ICalcSalaryAddDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ICalcSalaryAddDo
	RightJoin(table schema.Tabler, on ...field.Expr) ICalcSalaryAddDo
	Group(cols ...field.Expr) ICalcSalaryAddDo
	Having(conds ...gen.Condition) ICalcSalaryAddDo
	Limit(limit int) ICalcSalaryAddDo
	Offset(offset int) ICalcSalaryAddDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ICalcSalaryAddDo
	Unscoped() ICalcSalaryAddDo
	Create(values ...*types.CalcSalaryAdd) error
	CreateInBatches(values []*types.CalcSalaryAdd, batchSize int) error
	Save(values ...*types.CalcSalaryAdd) error
	First() (*types.CalcSalaryAdd, error)
	Take() (*types.CalcSalaryAdd, error)
	Last() (*types.CalcSalaryAdd, error)
	Find() ([]*types.CalcSalaryAdd, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*types.CalcSalaryAdd, err error)
	FindInBatches(result *[]*types.CalcSalaryAdd, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*types.CalcSalaryAdd) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ICalcSalaryAddDo
	Assign(attrs ...field.AssignExpr) ICalcSalaryAddDo
	Joins(fields ...field.RelationField) ICalcSalaryAddDo
	Preload(fields ...field.RelationField) ICalcSalaryAddDo
	FirstOrInit() (*types.CalcSalaryAdd, error)
	FirstOrCreate() (*types.CalcSalaryAdd, error)
	FindByPage(offset int, limit int) (result []*types.CalcSalaryAdd, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ICalcSalaryAddDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (c calcSalaryAddDo) Debug() ICalcSalaryAddDo {
	return c.withDO(c.DO.Debug())
}

func (c calcSalaryAddDo) WithContext(ctx context.Context) ICalcSalaryAddDo {
	return c.withDO(c.DO.WithContext(ctx))
}

func (c calcSalaryAddDo) ReadDB() ICalcSalaryAddDo {
	return c.Clauses(dbresolver.Read)
}

func (c calcSalaryAddDo) WriteDB() ICalcSalaryAddDo {
	return c.Clauses(dbresolver.Write)
}

func (c calcSalaryAddDo) Session(config *gorm.Session) ICalcSalaryAddDo {
	return c.withDO(c.DO.Session(config))
}

func (c calcSalaryAddDo) Clauses(conds ...clause.Expression) ICalcSalaryAddDo {
	return c.withDO(c.DO.Clauses(conds...))
}

func (c calcSalaryAddDo) Returning(value interface{}, columns ...string) ICalcSalaryAddDo {
	return c.withDO(c.DO.Returning(value, columns...))
}

func (c calcSalaryAddDo) Not(conds ...gen.Condition) ICalcSalaryAddDo {
	return c.withDO(c.DO.Not(conds...))
}

func (c calcSalaryAddDo) Or(conds ...gen.Condition) ICalcSalaryAddDo {
	return c.withDO(c.DO.Or(conds...))
}

func (c calcSalaryAddDo) Select(conds ...field.Expr) ICalcSalaryAddDo {
	return c.withDO(c.DO.Select(conds...))
}

func (c calcSalaryAddDo) Where(conds ...gen.Condition) ICalcSalaryAddDo {
	return c.withDO(c.DO.Where(conds...))
}

func (c calcSalaryAddDo) Order(conds ...field.Expr) ICalcSalaryAddDo {
	return c.withDO(c.DO.Order(conds...))
}

func (c calcSalaryAddDo) Distinct(cols ...field.Expr) ICalcSalaryAddDo {
	return c.withDO(c.DO.Distinct(cols...))
}

func (c calcSalaryAddDo) Omit(cols ...field.Expr) ICalcSalaryAddDo {
	return c.withDO(c.DO.Omit(cols...))
}

func (c calcSalaryAddDo) Join(table schema.Tabler, on ...field.Expr) ICalcSalaryAddDo {
	return c.withDO(c.DO.Join(table, on...))
}

func (c calcSalaryAddDo) LeftJoin(table schema.Tabler, on ...field.Expr) ICalcSalaryAddDo {
	return c.withDO(c.DO.LeftJoin(table, on...))
}

func (c calcSalaryAddDo) RightJoin(table schema.Tabler, on ...field.Expr) ICalcSalaryAddDo {
	return c.withDO(c.DO.RightJoin(table, on...))
}

func (c calcSalaryAddDo) Group(cols ...field.Expr) ICalcSalaryAddDo {
	return c.withDO(c.DO.Group(cols...))
}

func (c calcSalaryAddDo) Having(conds ...gen.Condition) ICalcSalaryAddDo {
	return c.withDO(c.DO.Having(conds...))
}

func (c calcSalaryAddDo) Limit(limit int) ICalcSalaryAddDo {
	return c.withDO(c.DO.Limit(limit))
}

func (c calcSalaryAddDo) Offset(offset int) ICalcSalaryAddDo {
	return c.withDO(c.DO.Offset(offset))
}

func (c calcSalaryAddDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ICalcSalaryAddDo {
	return c.withDO(c.DO.Scopes(funcs...))
}

func (c calcSalaryAddDo) Unscoped() ICalcSalaryAddDo {
	return c.withDO(c.DO.Unscoped())
}

func (c calcSalaryAddDo) Create(values ...*types.CalcSalaryAdd) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Create(values)
}

func (c calcSalaryAddDo) CreateInBatches(values []*types.CalcSalaryAdd, batchSize int) error {
	return c.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (c calcSalaryAddDo) Save(values ...*types.CalcSalaryAdd) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Save(values)
}

func (c calcSalaryAddDo) First() (*types.CalcSalaryAdd, error) {
	if result, err := c.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*types.CalcSalaryAdd), nil
	}
}

func (c calcSalaryAddDo) Take() (*types.CalcSalaryAdd, error) {
	if result, err := c.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*types.CalcSalaryAdd), nil
	}
}

func (c calcSalaryAddDo) Last() (*types.CalcSalaryAdd, error) {
	if result, err := c.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*types.CalcSalaryAdd), nil
	}
}

func (c calcSalaryAddDo) Find() ([]*types.CalcSalaryAdd, error) {
	result, err := c.DO.Find()
	return result.([]*types.CalcSalaryAdd), err
}

func (c calcSalaryAddDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*types.CalcSalaryAdd, err error) {
	buf := make([]*types.CalcSalaryAdd, 0, batchSize)
	err = c.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (c calcSalaryAddDo) FindInBatches(result *[]*types.CalcSalaryAdd, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return c.DO.FindInBatches(result, batchSize, fc)
}

func (c calcSalaryAddDo) Attrs(attrs ...field.AssignExpr) ICalcSalaryAddDo {
	return c.withDO(c.DO.Attrs(attrs...))
}

func (c calcSalaryAddDo) Assign(attrs ...field.AssignExpr) ICalcSalaryAddDo {
	return c.withDO(c.DO.Assign(attrs...))
}

func (c calcSalaryAddDo) Joins(fields ...field.RelationField) ICalcSalaryAddDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Joins(_f))
	}
	return &c
}

func (c calcSalaryAddDo) Preload(fields ...field.RelationField) ICalcSalaryAddDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Preload(_f))
	}
	return &c
}

func (c calcSalaryAddDo) FirstOrInit() (*types.CalcSalaryAdd, error) {
	if result, err := c.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*types.CalcSalaryAdd), nil
	}
}

func (c calcSalaryAddDo) FirstOrCreate() (*types.CalcSalaryAdd, error) {
	if result, err := c.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*types.CalcSalaryAdd), nil
	}
}

func (c calcSalaryAddDo) FindByPage(offset int, limit int) (result []*types.CalcSalaryAdd, count int64, err error) {
	result, err = c.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = c.Offset(-1).Limit(-1).Count()
	return
}

func (c calcSalaryAddDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = c.Count()
	if err != nil {
		return
	}

	err = c.Offset(offset).Limit(limit).Scan(result)
	return
}

func (c calcSalaryAddDo) Scan(result interface{}) (err error) {
	return c.DO.Scan(result)
}

func (c calcSalaryAddDo) Delete(models ...*types.CalcSalaryAdd) (result gen.ResultInfo, err error) {
	return c.DO.Delete(models)
}

func (c *calcSalaryAddDo) withDO(do gen.Dao) *calcSalaryAddDo {
	c.DO = *do.(*gen.DO)
	return c
}
