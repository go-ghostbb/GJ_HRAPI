// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"hrapi/internal/types"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"
)

func newLeaveSignOffFlow(db *gorm.DB, opts ...gen.DOOption) leaveSignOffFlow {
	_leaveSignOffFlow := leaveSignOffFlow{}

	_leaveSignOffFlow.leaveSignOffFlowDo.UseDB(db, opts...)
	_leaveSignOffFlow.leaveSignOffFlowDo.UseModel(&types.LeaveSignOffFlow{})

	tableName := _leaveSignOffFlow.leaveSignOffFlowDo.TableName()
	_leaveSignOffFlow.ALL = field.NewAsterisk(tableName)
	_leaveSignOffFlow.ID = field.NewUint(tableName, "id")
	_leaveSignOffFlow.CreatedAt = field.NewTime(tableName, "created_at")
	_leaveSignOffFlow.UpdatedAt = field.NewTime(tableName, "updated_at")
	_leaveSignOffFlow.DeletedAt = field.NewField(tableName, "deleted_at")
	_leaveSignOffFlow.LeaveRequestFormID = field.NewUint(tableName, "leave_request_form_id")
	_leaveSignOffFlow.SignOffEmployeeID = field.NewUint(tableName, "sign_off_employee_id")
	_leaveSignOffFlow.Level = field.NewUint(tableName, "level")
	_leaveSignOffFlow.SignType = field.NewField(tableName, "sign_type")
	_leaveSignOffFlow.Notify = field.NewField(tableName, "notify")
	_leaveSignOffFlow.Remark = field.NewString(tableName, "remark")
	_leaveSignOffFlow.Comment = field.NewString(tableName, "comment")
	_leaveSignOffFlow.Status = field.NewField(tableName, "status")
	_leaveSignOffFlow.SignDate = field.NewTime(tableName, "sign_date")
	_leaveSignOffFlow.UUID = field.NewString(tableName, "uuid")
	_leaveSignOffFlow.Locale = field.NewField(tableName, "locale")
	_leaveSignOffFlow.LeaveRequestForm = leaveSignOffFlowBelongsToLeaveRequestForm{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("LeaveRequestForm", "types.LeaveRequestForm"),
		Leave: struct {
			field.RelationField
			LeaveGroup struct {
				field.RelationField
				Leave struct {
					field.RelationField
				}
				LeaveGroupCondition struct {
					field.RelationField
					LeaveGroup struct {
						field.RelationField
					}
				}
				Employee struct {
					field.RelationField
					Department struct {
						field.RelationField
						Manager struct {
							field.RelationField
						}
					}
					Rank struct {
						field.RelationField
						Grade struct {
							field.RelationField
							Rank struct {
								field.RelationField
							}
						}
					}
					Grade struct {
						field.RelationField
					}
					LoginInformation struct {
						field.RelationField
						Employee struct {
							field.RelationField
						}
					}
					Roles struct {
						field.RelationField
						Employees struct {
							field.RelationField
						}
						Permissions struct {
							field.RelationField
							Roles struct {
								field.RelationField
							}
						}
						Menus struct {
							field.RelationField
							Roles struct {
								field.RelationField
							}
						}
					}
				}
			}
		}{
			RelationField: field.NewRelation("LeaveRequestForm.Leave", "types.Leave"),
			LeaveGroup: struct {
				field.RelationField
				Leave struct {
					field.RelationField
				}
				LeaveGroupCondition struct {
					field.RelationField
					LeaveGroup struct {
						field.RelationField
					}
				}
				Employee struct {
					field.RelationField
					Department struct {
						field.RelationField
						Manager struct {
							field.RelationField
						}
					}
					Rank struct {
						field.RelationField
						Grade struct {
							field.RelationField
							Rank struct {
								field.RelationField
							}
						}
					}
					Grade struct {
						field.RelationField
					}
					LoginInformation struct {
						field.RelationField
						Employee struct {
							field.RelationField
						}
					}
					Roles struct {
						field.RelationField
						Employees struct {
							field.RelationField
						}
						Permissions struct {
							field.RelationField
							Roles struct {
								field.RelationField
							}
						}
						Menus struct {
							field.RelationField
							Roles struct {
								field.RelationField
							}
						}
					}
				}
			}{
				RelationField: field.NewRelation("LeaveRequestForm.Leave.LeaveGroup", "types.LeaveGroup"),
				Leave: struct {
					field.RelationField
				}{
					RelationField: field.NewRelation("LeaveRequestForm.Leave.LeaveGroup.Leave", "types.Leave"),
				},
				LeaveGroupCondition: struct {
					field.RelationField
					LeaveGroup struct {
						field.RelationField
					}
				}{
					RelationField: field.NewRelation("LeaveRequestForm.Leave.LeaveGroup.LeaveGroupCondition", "types.LeaveGroupCondition"),
					LeaveGroup: struct {
						field.RelationField
					}{
						RelationField: field.NewRelation("LeaveRequestForm.Leave.LeaveGroup.LeaveGroupCondition.LeaveGroup", "types.LeaveGroup"),
					},
				},
				Employee: struct {
					field.RelationField
					Department struct {
						field.RelationField
						Manager struct {
							field.RelationField
						}
					}
					Rank struct {
						field.RelationField
						Grade struct {
							field.RelationField
							Rank struct {
								field.RelationField
							}
						}
					}
					Grade struct {
						field.RelationField
					}
					LoginInformation struct {
						field.RelationField
						Employee struct {
							field.RelationField
						}
					}
					Roles struct {
						field.RelationField
						Employees struct {
							field.RelationField
						}
						Permissions struct {
							field.RelationField
							Roles struct {
								field.RelationField
							}
						}
						Menus struct {
							field.RelationField
							Roles struct {
								field.RelationField
							}
						}
					}
				}{
					RelationField: field.NewRelation("LeaveRequestForm.Leave.LeaveGroup.Employee", "types.Employee"),
					Department: struct {
						field.RelationField
						Manager struct {
							field.RelationField
						}
					}{
						RelationField: field.NewRelation("LeaveRequestForm.Leave.LeaveGroup.Employee.Department", "types.Department"),
						Manager: struct {
							field.RelationField
						}{
							RelationField: field.NewRelation("LeaveRequestForm.Leave.LeaveGroup.Employee.Department.Manager", "types.Employee"),
						},
					},
					Rank: struct {
						field.RelationField
						Grade struct {
							field.RelationField
							Rank struct {
								field.RelationField
							}
						}
					}{
						RelationField: field.NewRelation("LeaveRequestForm.Leave.LeaveGroup.Employee.Rank", "types.PositionRank"),
						Grade: struct {
							field.RelationField
							Rank struct {
								field.RelationField
							}
						}{
							RelationField: field.NewRelation("LeaveRequestForm.Leave.LeaveGroup.Employee.Rank.Grade", "types.PositionGrade"),
							Rank: struct {
								field.RelationField
							}{
								RelationField: field.NewRelation("LeaveRequestForm.Leave.LeaveGroup.Employee.Rank.Grade.Rank", "types.PositionRank"),
							},
						},
					},
					Grade: struct {
						field.RelationField
					}{
						RelationField: field.NewRelation("LeaveRequestForm.Leave.LeaveGroup.Employee.Grade", "types.PositionGrade"),
					},
					LoginInformation: struct {
						field.RelationField
						Employee struct {
							field.RelationField
						}
					}{
						RelationField: field.NewRelation("LeaveRequestForm.Leave.LeaveGroup.Employee.LoginInformation", "types.LoginInformation"),
						Employee: struct {
							field.RelationField
						}{
							RelationField: field.NewRelation("LeaveRequestForm.Leave.LeaveGroup.Employee.LoginInformation.Employee", "types.Employee"),
						},
					},
					Roles: struct {
						field.RelationField
						Employees struct {
							field.RelationField
						}
						Permissions struct {
							field.RelationField
							Roles struct {
								field.RelationField
							}
						}
						Menus struct {
							field.RelationField
							Roles struct {
								field.RelationField
							}
						}
					}{
						RelationField: field.NewRelation("LeaveRequestForm.Leave.LeaveGroup.Employee.Roles", "types.Role"),
						Employees: struct {
							field.RelationField
						}{
							RelationField: field.NewRelation("LeaveRequestForm.Leave.LeaveGroup.Employee.Roles.Employees", "types.Employee"),
						},
						Permissions: struct {
							field.RelationField
							Roles struct {
								field.RelationField
							}
						}{
							RelationField: field.NewRelation("LeaveRequestForm.Leave.LeaveGroup.Employee.Roles.Permissions", "types.Permission"),
							Roles: struct {
								field.RelationField
							}{
								RelationField: field.NewRelation("LeaveRequestForm.Leave.LeaveGroup.Employee.Roles.Permissions.Roles", "types.Role"),
							},
						},
						Menus: struct {
							field.RelationField
							Roles struct {
								field.RelationField
							}
						}{
							RelationField: field.NewRelation("LeaveRequestForm.Leave.LeaveGroup.Employee.Roles.Menus", "types.Menu"),
							Roles: struct {
								field.RelationField
							}{
								RelationField: field.NewRelation("LeaveRequestForm.Leave.LeaveGroup.Employee.Roles.Menus.Roles", "types.Role"),
							},
						},
					},
				},
			},
		},
		Employee: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("LeaveRequestForm.Employee", "types.Employee"),
		},
		Department: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("LeaveRequestForm.Department", "types.Department"),
		},
		ProxyEmployee: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("LeaveRequestForm.ProxyEmployee", "types.Employee"),
		},
		ProxyDepartment: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("LeaveRequestForm.ProxyDepartment", "types.Department"),
		},
		SignOffFlow: struct {
			field.RelationField
			LeaveRequestForm struct {
				field.RelationField
			}
			SignOffEmployee struct {
				field.RelationField
			}
		}{
			RelationField: field.NewRelation("LeaveRequestForm.SignOffFlow", "types.LeaveSignOffFlow"),
			LeaveRequestForm: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("LeaveRequestForm.SignOffFlow.LeaveRequestForm", "types.LeaveRequestForm"),
			},
			SignOffEmployee: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("LeaveRequestForm.SignOffFlow.SignOffEmployee", "types.Employee"),
			},
		},
	}

	_leaveSignOffFlow.SignOffEmployee = leaveSignOffFlowBelongsToSignOffEmployee{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("SignOffEmployee", "types.Employee"),
	}

	_leaveSignOffFlow.fillFieldMap()

	return _leaveSignOffFlow
}

type leaveSignOffFlow struct {
	leaveSignOffFlowDo leaveSignOffFlowDo

	ALL                field.Asterisk
	ID                 field.Uint
	CreatedAt          field.Time
	UpdatedAt          field.Time
	DeletedAt          field.Field
	LeaveRequestFormID field.Uint
	SignOffEmployeeID  field.Uint
	Level              field.Uint
	SignType           field.Field
	Notify             field.Field
	Remark             field.String
	Comment            field.String
	Status             field.Field
	SignDate           field.Time
	UUID               field.String
	Locale             field.Field
	LeaveRequestForm   leaveSignOffFlowBelongsToLeaveRequestForm

	SignOffEmployee leaveSignOffFlowBelongsToSignOffEmployee

	fieldMap map[string]field.Expr
}

func (l leaveSignOffFlow) Table(newTableName string) *leaveSignOffFlow {
	l.leaveSignOffFlowDo.UseTable(newTableName)
	return l.updateTableName(newTableName)
}

func (l leaveSignOffFlow) As(alias string) *leaveSignOffFlow {
	l.leaveSignOffFlowDo.DO = *(l.leaveSignOffFlowDo.As(alias).(*gen.DO))
	return l.updateTableName(alias)
}

func (l *leaveSignOffFlow) updateTableName(table string) *leaveSignOffFlow {
	l.ALL = field.NewAsterisk(table)
	l.ID = field.NewUint(table, "id")
	l.CreatedAt = field.NewTime(table, "created_at")
	l.UpdatedAt = field.NewTime(table, "updated_at")
	l.DeletedAt = field.NewField(table, "deleted_at")
	l.LeaveRequestFormID = field.NewUint(table, "leave_request_form_id")
	l.SignOffEmployeeID = field.NewUint(table, "sign_off_employee_id")
	l.Level = field.NewUint(table, "level")
	l.SignType = field.NewField(table, "sign_type")
	l.Notify = field.NewField(table, "notify")
	l.Remark = field.NewString(table, "remark")
	l.Comment = field.NewString(table, "comment")
	l.Status = field.NewField(table, "status")
	l.SignDate = field.NewTime(table, "sign_date")
	l.UUID = field.NewString(table, "uuid")
	l.Locale = field.NewField(table, "locale")

	l.fillFieldMap()

	return l
}

func (l *leaveSignOffFlow) WithContext(ctx context.Context) ILeaveSignOffFlowDo {
	return l.leaveSignOffFlowDo.WithContext(ctx)
}

func (l leaveSignOffFlow) TableName() string { return l.leaveSignOffFlowDo.TableName() }

func (l leaveSignOffFlow) Alias() string { return l.leaveSignOffFlowDo.Alias() }

func (l leaveSignOffFlow) Columns(cols ...field.Expr) gen.Columns {
	return l.leaveSignOffFlowDo.Columns(cols...)
}

func (l *leaveSignOffFlow) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := l.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (l *leaveSignOffFlow) fillFieldMap() {
	l.fieldMap = make(map[string]field.Expr, 17)
	l.fieldMap["id"] = l.ID
	l.fieldMap["created_at"] = l.CreatedAt
	l.fieldMap["updated_at"] = l.UpdatedAt
	l.fieldMap["deleted_at"] = l.DeletedAt
	l.fieldMap["leave_request_form_id"] = l.LeaveRequestFormID
	l.fieldMap["sign_off_employee_id"] = l.SignOffEmployeeID
	l.fieldMap["level"] = l.Level
	l.fieldMap["sign_type"] = l.SignType
	l.fieldMap["notify"] = l.Notify
	l.fieldMap["remark"] = l.Remark
	l.fieldMap["comment"] = l.Comment
	l.fieldMap["status"] = l.Status
	l.fieldMap["sign_date"] = l.SignDate
	l.fieldMap["uuid"] = l.UUID
	l.fieldMap["locale"] = l.Locale

}

func (l leaveSignOffFlow) clone(db *gorm.DB) leaveSignOffFlow {
	l.leaveSignOffFlowDo.ReplaceConnPool(db.Statement.ConnPool)
	return l
}

func (l leaveSignOffFlow) replaceDB(db *gorm.DB) leaveSignOffFlow {
	l.leaveSignOffFlowDo.ReplaceDB(db)
	return l
}

type leaveSignOffFlowBelongsToLeaveRequestForm struct {
	db *gorm.DB

	field.RelationField

	Leave struct {
		field.RelationField
		LeaveGroup struct {
			field.RelationField
			Leave struct {
				field.RelationField
			}
			LeaveGroupCondition struct {
				field.RelationField
				LeaveGroup struct {
					field.RelationField
				}
			}
			Employee struct {
				field.RelationField
				Department struct {
					field.RelationField
					Manager struct {
						field.RelationField
					}
				}
				Rank struct {
					field.RelationField
					Grade struct {
						field.RelationField
						Rank struct {
							field.RelationField
						}
					}
				}
				Grade struct {
					field.RelationField
				}
				LoginInformation struct {
					field.RelationField
					Employee struct {
						field.RelationField
					}
				}
				Roles struct {
					field.RelationField
					Employees struct {
						field.RelationField
					}
					Permissions struct {
						field.RelationField
						Roles struct {
							field.RelationField
						}
					}
					Menus struct {
						field.RelationField
						Roles struct {
							field.RelationField
						}
					}
				}
			}
		}
	}
	Employee struct {
		field.RelationField
	}
	Department struct {
		field.RelationField
	}
	ProxyEmployee struct {
		field.RelationField
	}
	ProxyDepartment struct {
		field.RelationField
	}
	SignOffFlow struct {
		field.RelationField
		LeaveRequestForm struct {
			field.RelationField
		}
		SignOffEmployee struct {
			field.RelationField
		}
	}
}

func (a leaveSignOffFlowBelongsToLeaveRequestForm) Where(conds ...field.Expr) *leaveSignOffFlowBelongsToLeaveRequestForm {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a leaveSignOffFlowBelongsToLeaveRequestForm) WithContext(ctx context.Context) *leaveSignOffFlowBelongsToLeaveRequestForm {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a leaveSignOffFlowBelongsToLeaveRequestForm) Session(session *gorm.Session) *leaveSignOffFlowBelongsToLeaveRequestForm {
	a.db = a.db.Session(session)
	return &a
}

func (a leaveSignOffFlowBelongsToLeaveRequestForm) Model(m *types.LeaveSignOffFlow) *leaveSignOffFlowBelongsToLeaveRequestFormTx {
	return &leaveSignOffFlowBelongsToLeaveRequestFormTx{a.db.Model(m).Association(a.Name())}
}

type leaveSignOffFlowBelongsToLeaveRequestFormTx struct{ tx *gorm.Association }

func (a leaveSignOffFlowBelongsToLeaveRequestFormTx) Find() (result *types.LeaveRequestForm, err error) {
	return result, a.tx.Find(&result)
}

func (a leaveSignOffFlowBelongsToLeaveRequestFormTx) Append(values ...*types.LeaveRequestForm) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a leaveSignOffFlowBelongsToLeaveRequestFormTx) Replace(values ...*types.LeaveRequestForm) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a leaveSignOffFlowBelongsToLeaveRequestFormTx) Delete(values ...*types.LeaveRequestForm) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a leaveSignOffFlowBelongsToLeaveRequestFormTx) Clear() error {
	return a.tx.Clear()
}

func (a leaveSignOffFlowBelongsToLeaveRequestFormTx) Count() int64 {
	return a.tx.Count()
}

type leaveSignOffFlowBelongsToSignOffEmployee struct {
	db *gorm.DB

	field.RelationField
}

func (a leaveSignOffFlowBelongsToSignOffEmployee) Where(conds ...field.Expr) *leaveSignOffFlowBelongsToSignOffEmployee {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a leaveSignOffFlowBelongsToSignOffEmployee) WithContext(ctx context.Context) *leaveSignOffFlowBelongsToSignOffEmployee {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a leaveSignOffFlowBelongsToSignOffEmployee) Session(session *gorm.Session) *leaveSignOffFlowBelongsToSignOffEmployee {
	a.db = a.db.Session(session)
	return &a
}

func (a leaveSignOffFlowBelongsToSignOffEmployee) Model(m *types.LeaveSignOffFlow) *leaveSignOffFlowBelongsToSignOffEmployeeTx {
	return &leaveSignOffFlowBelongsToSignOffEmployeeTx{a.db.Model(m).Association(a.Name())}
}

type leaveSignOffFlowBelongsToSignOffEmployeeTx struct{ tx *gorm.Association }

func (a leaveSignOffFlowBelongsToSignOffEmployeeTx) Find() (result *types.Employee, err error) {
	return result, a.tx.Find(&result)
}

func (a leaveSignOffFlowBelongsToSignOffEmployeeTx) Append(values ...*types.Employee) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a leaveSignOffFlowBelongsToSignOffEmployeeTx) Replace(values ...*types.Employee) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a leaveSignOffFlowBelongsToSignOffEmployeeTx) Delete(values ...*types.Employee) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a leaveSignOffFlowBelongsToSignOffEmployeeTx) Clear() error {
	return a.tx.Clear()
}

func (a leaveSignOffFlowBelongsToSignOffEmployeeTx) Count() int64 {
	return a.tx.Count()
}

type leaveSignOffFlowDo struct{ gen.DO }

type ILeaveSignOffFlowDo interface {
	gen.SubQuery
	Debug() ILeaveSignOffFlowDo
	WithContext(ctx context.Context) ILeaveSignOffFlowDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ILeaveSignOffFlowDo
	WriteDB() ILeaveSignOffFlowDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ILeaveSignOffFlowDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ILeaveSignOffFlowDo
	Not(conds ...gen.Condition) ILeaveSignOffFlowDo
	Or(conds ...gen.Condition) ILeaveSignOffFlowDo
	Select(conds ...field.Expr) ILeaveSignOffFlowDo
	Where(conds ...gen.Condition) ILeaveSignOffFlowDo
	Order(conds ...field.Expr) ILeaveSignOffFlowDo
	Distinct(cols ...field.Expr) ILeaveSignOffFlowDo
	Omit(cols ...field.Expr) ILeaveSignOffFlowDo
	Join(table schema.Tabler, on ...field.Expr) ILeaveSignOffFlowDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ILeaveSignOffFlowDo
	RightJoin(table schema.Tabler, on ...field.Expr) ILeaveSignOffFlowDo
	Group(cols ...field.Expr) ILeaveSignOffFlowDo
	Having(conds ...gen.Condition) ILeaveSignOffFlowDo
	Limit(limit int) ILeaveSignOffFlowDo
	Offset(offset int) ILeaveSignOffFlowDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ILeaveSignOffFlowDo
	Unscoped() ILeaveSignOffFlowDo
	Create(values ...*types.LeaveSignOffFlow) error
	CreateInBatches(values []*types.LeaveSignOffFlow, batchSize int) error
	Save(values ...*types.LeaveSignOffFlow) error
	First() (*types.LeaveSignOffFlow, error)
	Take() (*types.LeaveSignOffFlow, error)
	Last() (*types.LeaveSignOffFlow, error)
	Find() ([]*types.LeaveSignOffFlow, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*types.LeaveSignOffFlow, err error)
	FindInBatches(result *[]*types.LeaveSignOffFlow, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*types.LeaveSignOffFlow) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ILeaveSignOffFlowDo
	Assign(attrs ...field.AssignExpr) ILeaveSignOffFlowDo
	Joins(fields ...field.RelationField) ILeaveSignOffFlowDo
	Preload(fields ...field.RelationField) ILeaveSignOffFlowDo
	FirstOrInit() (*types.LeaveSignOffFlow, error)
	FirstOrCreate() (*types.LeaveSignOffFlow, error)
	FindByPage(offset int, limit int) (result []*types.LeaveSignOffFlow, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ILeaveSignOffFlowDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (l leaveSignOffFlowDo) Debug() ILeaveSignOffFlowDo {
	return l.withDO(l.DO.Debug())
}

func (l leaveSignOffFlowDo) WithContext(ctx context.Context) ILeaveSignOffFlowDo {
	return l.withDO(l.DO.WithContext(ctx))
}

func (l leaveSignOffFlowDo) ReadDB() ILeaveSignOffFlowDo {
	return l.Clauses(dbresolver.Read)
}

func (l leaveSignOffFlowDo) WriteDB() ILeaveSignOffFlowDo {
	return l.Clauses(dbresolver.Write)
}

func (l leaveSignOffFlowDo) Session(config *gorm.Session) ILeaveSignOffFlowDo {
	return l.withDO(l.DO.Session(config))
}

func (l leaveSignOffFlowDo) Clauses(conds ...clause.Expression) ILeaveSignOffFlowDo {
	return l.withDO(l.DO.Clauses(conds...))
}

func (l leaveSignOffFlowDo) Returning(value interface{}, columns ...string) ILeaveSignOffFlowDo {
	return l.withDO(l.DO.Returning(value, columns...))
}

func (l leaveSignOffFlowDo) Not(conds ...gen.Condition) ILeaveSignOffFlowDo {
	return l.withDO(l.DO.Not(conds...))
}

func (l leaveSignOffFlowDo) Or(conds ...gen.Condition) ILeaveSignOffFlowDo {
	return l.withDO(l.DO.Or(conds...))
}

func (l leaveSignOffFlowDo) Select(conds ...field.Expr) ILeaveSignOffFlowDo {
	return l.withDO(l.DO.Select(conds...))
}

func (l leaveSignOffFlowDo) Where(conds ...gen.Condition) ILeaveSignOffFlowDo {
	return l.withDO(l.DO.Where(conds...))
}

func (l leaveSignOffFlowDo) Order(conds ...field.Expr) ILeaveSignOffFlowDo {
	return l.withDO(l.DO.Order(conds...))
}

func (l leaveSignOffFlowDo) Distinct(cols ...field.Expr) ILeaveSignOffFlowDo {
	return l.withDO(l.DO.Distinct(cols...))
}

func (l leaveSignOffFlowDo) Omit(cols ...field.Expr) ILeaveSignOffFlowDo {
	return l.withDO(l.DO.Omit(cols...))
}

func (l leaveSignOffFlowDo) Join(table schema.Tabler, on ...field.Expr) ILeaveSignOffFlowDo {
	return l.withDO(l.DO.Join(table, on...))
}

func (l leaveSignOffFlowDo) LeftJoin(table schema.Tabler, on ...field.Expr) ILeaveSignOffFlowDo {
	return l.withDO(l.DO.LeftJoin(table, on...))
}

func (l leaveSignOffFlowDo) RightJoin(table schema.Tabler, on ...field.Expr) ILeaveSignOffFlowDo {
	return l.withDO(l.DO.RightJoin(table, on...))
}

func (l leaveSignOffFlowDo) Group(cols ...field.Expr) ILeaveSignOffFlowDo {
	return l.withDO(l.DO.Group(cols...))
}

func (l leaveSignOffFlowDo) Having(conds ...gen.Condition) ILeaveSignOffFlowDo {
	return l.withDO(l.DO.Having(conds...))
}

func (l leaveSignOffFlowDo) Limit(limit int) ILeaveSignOffFlowDo {
	return l.withDO(l.DO.Limit(limit))
}

func (l leaveSignOffFlowDo) Offset(offset int) ILeaveSignOffFlowDo {
	return l.withDO(l.DO.Offset(offset))
}

func (l leaveSignOffFlowDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ILeaveSignOffFlowDo {
	return l.withDO(l.DO.Scopes(funcs...))
}

func (l leaveSignOffFlowDo) Unscoped() ILeaveSignOffFlowDo {
	return l.withDO(l.DO.Unscoped())
}

func (l leaveSignOffFlowDo) Create(values ...*types.LeaveSignOffFlow) error {
	if len(values) == 0 {
		return nil
	}
	return l.DO.Create(values)
}

func (l leaveSignOffFlowDo) CreateInBatches(values []*types.LeaveSignOffFlow, batchSize int) error {
	return l.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (l leaveSignOffFlowDo) Save(values ...*types.LeaveSignOffFlow) error {
	if len(values) == 0 {
		return nil
	}
	return l.DO.Save(values)
}

func (l leaveSignOffFlowDo) First() (*types.LeaveSignOffFlow, error) {
	if result, err := l.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*types.LeaveSignOffFlow), nil
	}
}

func (l leaveSignOffFlowDo) Take() (*types.LeaveSignOffFlow, error) {
	if result, err := l.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*types.LeaveSignOffFlow), nil
	}
}

func (l leaveSignOffFlowDo) Last() (*types.LeaveSignOffFlow, error) {
	if result, err := l.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*types.LeaveSignOffFlow), nil
	}
}

func (l leaveSignOffFlowDo) Find() ([]*types.LeaveSignOffFlow, error) {
	result, err := l.DO.Find()
	return result.([]*types.LeaveSignOffFlow), err
}

func (l leaveSignOffFlowDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*types.LeaveSignOffFlow, err error) {
	buf := make([]*types.LeaveSignOffFlow, 0, batchSize)
	err = l.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (l leaveSignOffFlowDo) FindInBatches(result *[]*types.LeaveSignOffFlow, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return l.DO.FindInBatches(result, batchSize, fc)
}

func (l leaveSignOffFlowDo) Attrs(attrs ...field.AssignExpr) ILeaveSignOffFlowDo {
	return l.withDO(l.DO.Attrs(attrs...))
}

func (l leaveSignOffFlowDo) Assign(attrs ...field.AssignExpr) ILeaveSignOffFlowDo {
	return l.withDO(l.DO.Assign(attrs...))
}

func (l leaveSignOffFlowDo) Joins(fields ...field.RelationField) ILeaveSignOffFlowDo {
	for _, _f := range fields {
		l = *l.withDO(l.DO.Joins(_f))
	}
	return &l
}

func (l leaveSignOffFlowDo) Preload(fields ...field.RelationField) ILeaveSignOffFlowDo {
	for _, _f := range fields {
		l = *l.withDO(l.DO.Preload(_f))
	}
	return &l
}

func (l leaveSignOffFlowDo) FirstOrInit() (*types.LeaveSignOffFlow, error) {
	if result, err := l.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*types.LeaveSignOffFlow), nil
	}
}

func (l leaveSignOffFlowDo) FirstOrCreate() (*types.LeaveSignOffFlow, error) {
	if result, err := l.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*types.LeaveSignOffFlow), nil
	}
}

func (l leaveSignOffFlowDo) FindByPage(offset int, limit int) (result []*types.LeaveSignOffFlow, count int64, err error) {
	result, err = l.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = l.Offset(-1).Limit(-1).Count()
	return
}

func (l leaveSignOffFlowDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = l.Count()
	if err != nil {
		return
	}

	err = l.Offset(offset).Limit(limit).Scan(result)
	return
}

func (l leaveSignOffFlowDo) Scan(result interface{}) (err error) {
	return l.DO.Scan(result)
}

func (l leaveSignOffFlowDo) Delete(models ...*types.LeaveSignOffFlow) (result gen.ResultInfo, err error) {
	return l.DO.Delete(models)
}

func (l *leaveSignOffFlowDo) withDO(do gen.Dao) *leaveSignOffFlowDo {
	l.DO = *do.(*gen.DO)
	return l
}
