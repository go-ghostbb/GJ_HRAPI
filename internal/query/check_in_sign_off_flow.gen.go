// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"hrapi/internal/types"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"
)

func newCheckInSignOffFlow(db *gorm.DB, opts ...gen.DOOption) checkInSignOffFlow {
	_checkInSignOffFlow := checkInSignOffFlow{}

	_checkInSignOffFlow.checkInSignOffFlowDo.UseDB(db, opts...)
	_checkInSignOffFlow.checkInSignOffFlowDo.UseModel(&types.CheckInSignOffFlow{})

	tableName := _checkInSignOffFlow.checkInSignOffFlowDo.TableName()
	_checkInSignOffFlow.ALL = field.NewAsterisk(tableName)
	_checkInSignOffFlow.ID = field.NewUint(tableName, "id")
	_checkInSignOffFlow.CreatedAt = field.NewTime(tableName, "created_at")
	_checkInSignOffFlow.UpdatedAt = field.NewTime(tableName, "updated_at")
	_checkInSignOffFlow.DeletedAt = field.NewField(tableName, "deleted_at")
	_checkInSignOffFlow.CheckInRequestFormID = field.NewUint(tableName, "check_in_request_form_id")
	_checkInSignOffFlow.SignOffEmployeeID = field.NewUint(tableName, "sign_off_employee_id")
	_checkInSignOffFlow.Level = field.NewUint(tableName, "level")
	_checkInSignOffFlow.SignType = field.NewField(tableName, "sign_type")
	_checkInSignOffFlow.Notify = field.NewField(tableName, "notify")
	_checkInSignOffFlow.Remark = field.NewString(tableName, "remark")
	_checkInSignOffFlow.Comment = field.NewString(tableName, "comment")
	_checkInSignOffFlow.Status = field.NewField(tableName, "status")
	_checkInSignOffFlow.SignDate = field.NewTime(tableName, "sign_date")
	_checkInSignOffFlow.UUID = field.NewString(tableName, "uuid")
	_checkInSignOffFlow.Locale = field.NewField(tableName, "locale")
	_checkInSignOffFlow.CheckInRequestForm = checkInSignOffFlowBelongsToCheckInRequestForm{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("CheckInRequestForm", "types.CheckInRequestForm"),
		Employee: struct {
			field.RelationField
			Department struct {
				field.RelationField
				Manager struct {
					field.RelationField
				}
			}
			Rank struct {
				field.RelationField
				Grade struct {
					field.RelationField
					Rank struct {
						field.RelationField
					}
				}
			}
			Grade struct {
				field.RelationField
			}
			LoginInformation struct {
				field.RelationField
				Employee struct {
					field.RelationField
				}
			}
			Roles struct {
				field.RelationField
				Employees struct {
					field.RelationField
				}
				Permissions struct {
					field.RelationField
					Roles struct {
						field.RelationField
					}
				}
				Menus struct {
					field.RelationField
					Roles struct {
						field.RelationField
					}
				}
			}
		}{
			RelationField: field.NewRelation("CheckInRequestForm.Employee", "types.Employee"),
			Department: struct {
				field.RelationField
				Manager struct {
					field.RelationField
				}
			}{
				RelationField: field.NewRelation("CheckInRequestForm.Employee.Department", "types.Department"),
				Manager: struct {
					field.RelationField
				}{
					RelationField: field.NewRelation("CheckInRequestForm.Employee.Department.Manager", "types.Employee"),
				},
			},
			Rank: struct {
				field.RelationField
				Grade struct {
					field.RelationField
					Rank struct {
						field.RelationField
					}
				}
			}{
				RelationField: field.NewRelation("CheckInRequestForm.Employee.Rank", "types.PositionRank"),
				Grade: struct {
					field.RelationField
					Rank struct {
						field.RelationField
					}
				}{
					RelationField: field.NewRelation("CheckInRequestForm.Employee.Rank.Grade", "types.PositionGrade"),
					Rank: struct {
						field.RelationField
					}{
						RelationField: field.NewRelation("CheckInRequestForm.Employee.Rank.Grade.Rank", "types.PositionRank"),
					},
				},
			},
			Grade: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("CheckInRequestForm.Employee.Grade", "types.PositionGrade"),
			},
			LoginInformation: struct {
				field.RelationField
				Employee struct {
					field.RelationField
				}
			}{
				RelationField: field.NewRelation("CheckInRequestForm.Employee.LoginInformation", "types.LoginInformation"),
				Employee: struct {
					field.RelationField
				}{
					RelationField: field.NewRelation("CheckInRequestForm.Employee.LoginInformation.Employee", "types.Employee"),
				},
			},
			Roles: struct {
				field.RelationField
				Employees struct {
					field.RelationField
				}
				Permissions struct {
					field.RelationField
					Roles struct {
						field.RelationField
					}
				}
				Menus struct {
					field.RelationField
					Roles struct {
						field.RelationField
					}
				}
			}{
				RelationField: field.NewRelation("CheckInRequestForm.Employee.Roles", "types.Role"),
				Employees: struct {
					field.RelationField
				}{
					RelationField: field.NewRelation("CheckInRequestForm.Employee.Roles.Employees", "types.Employee"),
				},
				Permissions: struct {
					field.RelationField
					Roles struct {
						field.RelationField
					}
				}{
					RelationField: field.NewRelation("CheckInRequestForm.Employee.Roles.Permissions", "types.Permission"),
					Roles: struct {
						field.RelationField
					}{
						RelationField: field.NewRelation("CheckInRequestForm.Employee.Roles.Permissions.Roles", "types.Role"),
					},
				},
				Menus: struct {
					field.RelationField
					Roles struct {
						field.RelationField
					}
				}{
					RelationField: field.NewRelation("CheckInRequestForm.Employee.Roles.Menus", "types.Menu"),
					Roles: struct {
						field.RelationField
					}{
						RelationField: field.NewRelation("CheckInRequestForm.Employee.Roles.Menus.Roles", "types.Role"),
					},
				},
			},
		},
		Department: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("CheckInRequestForm.Department", "types.Department"),
		},
		SignOffFlow: struct {
			field.RelationField
			CheckInRequestForm struct {
				field.RelationField
			}
			SignOffEmployee struct {
				field.RelationField
			}
		}{
			RelationField: field.NewRelation("CheckInRequestForm.SignOffFlow", "types.CheckInSignOffFlow"),
			CheckInRequestForm: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("CheckInRequestForm.SignOffFlow.CheckInRequestForm", "types.CheckInRequestForm"),
			},
			SignOffEmployee: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("CheckInRequestForm.SignOffFlow.SignOffEmployee", "types.Employee"),
			},
		},
		Detail: struct {
			field.RelationField
			CheckInRequestForm struct {
				field.RelationField
			}
		}{
			RelationField: field.NewRelation("CheckInRequestForm.Detail", "types.CheckInRequestFormDetail"),
			CheckInRequestForm: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("CheckInRequestForm.Detail.CheckInRequestForm", "types.CheckInRequestForm"),
			},
		},
	}

	_checkInSignOffFlow.SignOffEmployee = checkInSignOffFlowBelongsToSignOffEmployee{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("SignOffEmployee", "types.Employee"),
	}

	_checkInSignOffFlow.fillFieldMap()

	return _checkInSignOffFlow
}

type checkInSignOffFlow struct {
	checkInSignOffFlowDo checkInSignOffFlowDo

	ALL                  field.Asterisk
	ID                   field.Uint
	CreatedAt            field.Time
	UpdatedAt            field.Time
	DeletedAt            field.Field
	CheckInRequestFormID field.Uint
	SignOffEmployeeID    field.Uint
	Level                field.Uint
	SignType             field.Field
	Notify               field.Field
	Remark               field.String
	Comment              field.String
	Status               field.Field
	SignDate             field.Time
	UUID                 field.String
	Locale               field.Field
	CheckInRequestForm   checkInSignOffFlowBelongsToCheckInRequestForm

	SignOffEmployee checkInSignOffFlowBelongsToSignOffEmployee

	fieldMap map[string]field.Expr
}

func (c checkInSignOffFlow) Table(newTableName string) *checkInSignOffFlow {
	c.checkInSignOffFlowDo.UseTable(newTableName)
	return c.updateTableName(newTableName)
}

func (c checkInSignOffFlow) As(alias string) *checkInSignOffFlow {
	c.checkInSignOffFlowDo.DO = *(c.checkInSignOffFlowDo.As(alias).(*gen.DO))
	return c.updateTableName(alias)
}

func (c *checkInSignOffFlow) updateTableName(table string) *checkInSignOffFlow {
	c.ALL = field.NewAsterisk(table)
	c.ID = field.NewUint(table, "id")
	c.CreatedAt = field.NewTime(table, "created_at")
	c.UpdatedAt = field.NewTime(table, "updated_at")
	c.DeletedAt = field.NewField(table, "deleted_at")
	c.CheckInRequestFormID = field.NewUint(table, "check_in_request_form_id")
	c.SignOffEmployeeID = field.NewUint(table, "sign_off_employee_id")
	c.Level = field.NewUint(table, "level")
	c.SignType = field.NewField(table, "sign_type")
	c.Notify = field.NewField(table, "notify")
	c.Remark = field.NewString(table, "remark")
	c.Comment = field.NewString(table, "comment")
	c.Status = field.NewField(table, "status")
	c.SignDate = field.NewTime(table, "sign_date")
	c.UUID = field.NewString(table, "uuid")
	c.Locale = field.NewField(table, "locale")

	c.fillFieldMap()

	return c
}

func (c *checkInSignOffFlow) WithContext(ctx context.Context) ICheckInSignOffFlowDo {
	return c.checkInSignOffFlowDo.WithContext(ctx)
}

func (c checkInSignOffFlow) TableName() string { return c.checkInSignOffFlowDo.TableName() }

func (c checkInSignOffFlow) Alias() string { return c.checkInSignOffFlowDo.Alias() }

func (c checkInSignOffFlow) Columns(cols ...field.Expr) gen.Columns {
	return c.checkInSignOffFlowDo.Columns(cols...)
}

func (c *checkInSignOffFlow) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := c.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (c *checkInSignOffFlow) fillFieldMap() {
	c.fieldMap = make(map[string]field.Expr, 17)
	c.fieldMap["id"] = c.ID
	c.fieldMap["created_at"] = c.CreatedAt
	c.fieldMap["updated_at"] = c.UpdatedAt
	c.fieldMap["deleted_at"] = c.DeletedAt
	c.fieldMap["check_in_request_form_id"] = c.CheckInRequestFormID
	c.fieldMap["sign_off_employee_id"] = c.SignOffEmployeeID
	c.fieldMap["level"] = c.Level
	c.fieldMap["sign_type"] = c.SignType
	c.fieldMap["notify"] = c.Notify
	c.fieldMap["remark"] = c.Remark
	c.fieldMap["comment"] = c.Comment
	c.fieldMap["status"] = c.Status
	c.fieldMap["sign_date"] = c.SignDate
	c.fieldMap["uuid"] = c.UUID
	c.fieldMap["locale"] = c.Locale

}

func (c checkInSignOffFlow) clone(db *gorm.DB) checkInSignOffFlow {
	c.checkInSignOffFlowDo.ReplaceConnPool(db.Statement.ConnPool)
	return c
}

func (c checkInSignOffFlow) replaceDB(db *gorm.DB) checkInSignOffFlow {
	c.checkInSignOffFlowDo.ReplaceDB(db)
	return c
}

type checkInSignOffFlowBelongsToCheckInRequestForm struct {
	db *gorm.DB

	field.RelationField

	Employee struct {
		field.RelationField
		Department struct {
			field.RelationField
			Manager struct {
				field.RelationField
			}
		}
		Rank struct {
			field.RelationField
			Grade struct {
				field.RelationField
				Rank struct {
					field.RelationField
				}
			}
		}
		Grade struct {
			field.RelationField
		}
		LoginInformation struct {
			field.RelationField
			Employee struct {
				field.RelationField
			}
		}
		Roles struct {
			field.RelationField
			Employees struct {
				field.RelationField
			}
			Permissions struct {
				field.RelationField
				Roles struct {
					field.RelationField
				}
			}
			Menus struct {
				field.RelationField
				Roles struct {
					field.RelationField
				}
			}
		}
	}
	Department struct {
		field.RelationField
	}
	SignOffFlow struct {
		field.RelationField
		CheckInRequestForm struct {
			field.RelationField
		}
		SignOffEmployee struct {
			field.RelationField
		}
	}
	Detail struct {
		field.RelationField
		CheckInRequestForm struct {
			field.RelationField
		}
	}
}

func (a checkInSignOffFlowBelongsToCheckInRequestForm) Where(conds ...field.Expr) *checkInSignOffFlowBelongsToCheckInRequestForm {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a checkInSignOffFlowBelongsToCheckInRequestForm) WithContext(ctx context.Context) *checkInSignOffFlowBelongsToCheckInRequestForm {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a checkInSignOffFlowBelongsToCheckInRequestForm) Session(session *gorm.Session) *checkInSignOffFlowBelongsToCheckInRequestForm {
	a.db = a.db.Session(session)
	return &a
}

func (a checkInSignOffFlowBelongsToCheckInRequestForm) Model(m *types.CheckInSignOffFlow) *checkInSignOffFlowBelongsToCheckInRequestFormTx {
	return &checkInSignOffFlowBelongsToCheckInRequestFormTx{a.db.Model(m).Association(a.Name())}
}

type checkInSignOffFlowBelongsToCheckInRequestFormTx struct{ tx *gorm.Association }

func (a checkInSignOffFlowBelongsToCheckInRequestFormTx) Find() (result *types.CheckInRequestForm, err error) {
	return result, a.tx.Find(&result)
}

func (a checkInSignOffFlowBelongsToCheckInRequestFormTx) Append(values ...*types.CheckInRequestForm) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a checkInSignOffFlowBelongsToCheckInRequestFormTx) Replace(values ...*types.CheckInRequestForm) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a checkInSignOffFlowBelongsToCheckInRequestFormTx) Delete(values ...*types.CheckInRequestForm) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a checkInSignOffFlowBelongsToCheckInRequestFormTx) Clear() error {
	return a.tx.Clear()
}

func (a checkInSignOffFlowBelongsToCheckInRequestFormTx) Count() int64 {
	return a.tx.Count()
}

type checkInSignOffFlowBelongsToSignOffEmployee struct {
	db *gorm.DB

	field.RelationField
}

func (a checkInSignOffFlowBelongsToSignOffEmployee) Where(conds ...field.Expr) *checkInSignOffFlowBelongsToSignOffEmployee {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a checkInSignOffFlowBelongsToSignOffEmployee) WithContext(ctx context.Context) *checkInSignOffFlowBelongsToSignOffEmployee {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a checkInSignOffFlowBelongsToSignOffEmployee) Session(session *gorm.Session) *checkInSignOffFlowBelongsToSignOffEmployee {
	a.db = a.db.Session(session)
	return &a
}

func (a checkInSignOffFlowBelongsToSignOffEmployee) Model(m *types.CheckInSignOffFlow) *checkInSignOffFlowBelongsToSignOffEmployeeTx {
	return &checkInSignOffFlowBelongsToSignOffEmployeeTx{a.db.Model(m).Association(a.Name())}
}

type checkInSignOffFlowBelongsToSignOffEmployeeTx struct{ tx *gorm.Association }

func (a checkInSignOffFlowBelongsToSignOffEmployeeTx) Find() (result *types.Employee, err error) {
	return result, a.tx.Find(&result)
}

func (a checkInSignOffFlowBelongsToSignOffEmployeeTx) Append(values ...*types.Employee) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a checkInSignOffFlowBelongsToSignOffEmployeeTx) Replace(values ...*types.Employee) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a checkInSignOffFlowBelongsToSignOffEmployeeTx) Delete(values ...*types.Employee) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a checkInSignOffFlowBelongsToSignOffEmployeeTx) Clear() error {
	return a.tx.Clear()
}

func (a checkInSignOffFlowBelongsToSignOffEmployeeTx) Count() int64 {
	return a.tx.Count()
}

type checkInSignOffFlowDo struct{ gen.DO }

type ICheckInSignOffFlowDo interface {
	gen.SubQuery
	Debug() ICheckInSignOffFlowDo
	WithContext(ctx context.Context) ICheckInSignOffFlowDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ICheckInSignOffFlowDo
	WriteDB() ICheckInSignOffFlowDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ICheckInSignOffFlowDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ICheckInSignOffFlowDo
	Not(conds ...gen.Condition) ICheckInSignOffFlowDo
	Or(conds ...gen.Condition) ICheckInSignOffFlowDo
	Select(conds ...field.Expr) ICheckInSignOffFlowDo
	Where(conds ...gen.Condition) ICheckInSignOffFlowDo
	Order(conds ...field.Expr) ICheckInSignOffFlowDo
	Distinct(cols ...field.Expr) ICheckInSignOffFlowDo
	Omit(cols ...field.Expr) ICheckInSignOffFlowDo
	Join(table schema.Tabler, on ...field.Expr) ICheckInSignOffFlowDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ICheckInSignOffFlowDo
	RightJoin(table schema.Tabler, on ...field.Expr) ICheckInSignOffFlowDo
	Group(cols ...field.Expr) ICheckInSignOffFlowDo
	Having(conds ...gen.Condition) ICheckInSignOffFlowDo
	Limit(limit int) ICheckInSignOffFlowDo
	Offset(offset int) ICheckInSignOffFlowDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ICheckInSignOffFlowDo
	Unscoped() ICheckInSignOffFlowDo
	Create(values ...*types.CheckInSignOffFlow) error
	CreateInBatches(values []*types.CheckInSignOffFlow, batchSize int) error
	Save(values ...*types.CheckInSignOffFlow) error
	First() (*types.CheckInSignOffFlow, error)
	Take() (*types.CheckInSignOffFlow, error)
	Last() (*types.CheckInSignOffFlow, error)
	Find() ([]*types.CheckInSignOffFlow, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*types.CheckInSignOffFlow, err error)
	FindInBatches(result *[]*types.CheckInSignOffFlow, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*types.CheckInSignOffFlow) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ICheckInSignOffFlowDo
	Assign(attrs ...field.AssignExpr) ICheckInSignOffFlowDo
	Joins(fields ...field.RelationField) ICheckInSignOffFlowDo
	Preload(fields ...field.RelationField) ICheckInSignOffFlowDo
	FirstOrInit() (*types.CheckInSignOffFlow, error)
	FirstOrCreate() (*types.CheckInSignOffFlow, error)
	FindByPage(offset int, limit int) (result []*types.CheckInSignOffFlow, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ICheckInSignOffFlowDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (c checkInSignOffFlowDo) Debug() ICheckInSignOffFlowDo {
	return c.withDO(c.DO.Debug())
}

func (c checkInSignOffFlowDo) WithContext(ctx context.Context) ICheckInSignOffFlowDo {
	return c.withDO(c.DO.WithContext(ctx))
}

func (c checkInSignOffFlowDo) ReadDB() ICheckInSignOffFlowDo {
	return c.Clauses(dbresolver.Read)
}

func (c checkInSignOffFlowDo) WriteDB() ICheckInSignOffFlowDo {
	return c.Clauses(dbresolver.Write)
}

func (c checkInSignOffFlowDo) Session(config *gorm.Session) ICheckInSignOffFlowDo {
	return c.withDO(c.DO.Session(config))
}

func (c checkInSignOffFlowDo) Clauses(conds ...clause.Expression) ICheckInSignOffFlowDo {
	return c.withDO(c.DO.Clauses(conds...))
}

func (c checkInSignOffFlowDo) Returning(value interface{}, columns ...string) ICheckInSignOffFlowDo {
	return c.withDO(c.DO.Returning(value, columns...))
}

func (c checkInSignOffFlowDo) Not(conds ...gen.Condition) ICheckInSignOffFlowDo {
	return c.withDO(c.DO.Not(conds...))
}

func (c checkInSignOffFlowDo) Or(conds ...gen.Condition) ICheckInSignOffFlowDo {
	return c.withDO(c.DO.Or(conds...))
}

func (c checkInSignOffFlowDo) Select(conds ...field.Expr) ICheckInSignOffFlowDo {
	return c.withDO(c.DO.Select(conds...))
}

func (c checkInSignOffFlowDo) Where(conds ...gen.Condition) ICheckInSignOffFlowDo {
	return c.withDO(c.DO.Where(conds...))
}

func (c checkInSignOffFlowDo) Order(conds ...field.Expr) ICheckInSignOffFlowDo {
	return c.withDO(c.DO.Order(conds...))
}

func (c checkInSignOffFlowDo) Distinct(cols ...field.Expr) ICheckInSignOffFlowDo {
	return c.withDO(c.DO.Distinct(cols...))
}

func (c checkInSignOffFlowDo) Omit(cols ...field.Expr) ICheckInSignOffFlowDo {
	return c.withDO(c.DO.Omit(cols...))
}

func (c checkInSignOffFlowDo) Join(table schema.Tabler, on ...field.Expr) ICheckInSignOffFlowDo {
	return c.withDO(c.DO.Join(table, on...))
}

func (c checkInSignOffFlowDo) LeftJoin(table schema.Tabler, on ...field.Expr) ICheckInSignOffFlowDo {
	return c.withDO(c.DO.LeftJoin(table, on...))
}

func (c checkInSignOffFlowDo) RightJoin(table schema.Tabler, on ...field.Expr) ICheckInSignOffFlowDo {
	return c.withDO(c.DO.RightJoin(table, on...))
}

func (c checkInSignOffFlowDo) Group(cols ...field.Expr) ICheckInSignOffFlowDo {
	return c.withDO(c.DO.Group(cols...))
}

func (c checkInSignOffFlowDo) Having(conds ...gen.Condition) ICheckInSignOffFlowDo {
	return c.withDO(c.DO.Having(conds...))
}

func (c checkInSignOffFlowDo) Limit(limit int) ICheckInSignOffFlowDo {
	return c.withDO(c.DO.Limit(limit))
}

func (c checkInSignOffFlowDo) Offset(offset int) ICheckInSignOffFlowDo {
	return c.withDO(c.DO.Offset(offset))
}

func (c checkInSignOffFlowDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ICheckInSignOffFlowDo {
	return c.withDO(c.DO.Scopes(funcs...))
}

func (c checkInSignOffFlowDo) Unscoped() ICheckInSignOffFlowDo {
	return c.withDO(c.DO.Unscoped())
}

func (c checkInSignOffFlowDo) Create(values ...*types.CheckInSignOffFlow) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Create(values)
}

func (c checkInSignOffFlowDo) CreateInBatches(values []*types.CheckInSignOffFlow, batchSize int) error {
	return c.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (c checkInSignOffFlowDo) Save(values ...*types.CheckInSignOffFlow) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Save(values)
}

func (c checkInSignOffFlowDo) First() (*types.CheckInSignOffFlow, error) {
	if result, err := c.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*types.CheckInSignOffFlow), nil
	}
}

func (c checkInSignOffFlowDo) Take() (*types.CheckInSignOffFlow, error) {
	if result, err := c.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*types.CheckInSignOffFlow), nil
	}
}

func (c checkInSignOffFlowDo) Last() (*types.CheckInSignOffFlow, error) {
	if result, err := c.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*types.CheckInSignOffFlow), nil
	}
}

func (c checkInSignOffFlowDo) Find() ([]*types.CheckInSignOffFlow, error) {
	result, err := c.DO.Find()
	return result.([]*types.CheckInSignOffFlow), err
}

func (c checkInSignOffFlowDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*types.CheckInSignOffFlow, err error) {
	buf := make([]*types.CheckInSignOffFlow, 0, batchSize)
	err = c.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (c checkInSignOffFlowDo) FindInBatches(result *[]*types.CheckInSignOffFlow, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return c.DO.FindInBatches(result, batchSize, fc)
}

func (c checkInSignOffFlowDo) Attrs(attrs ...field.AssignExpr) ICheckInSignOffFlowDo {
	return c.withDO(c.DO.Attrs(attrs...))
}

func (c checkInSignOffFlowDo) Assign(attrs ...field.AssignExpr) ICheckInSignOffFlowDo {
	return c.withDO(c.DO.Assign(attrs...))
}

func (c checkInSignOffFlowDo) Joins(fields ...field.RelationField) ICheckInSignOffFlowDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Joins(_f))
	}
	return &c
}

func (c checkInSignOffFlowDo) Preload(fields ...field.RelationField) ICheckInSignOffFlowDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Preload(_f))
	}
	return &c
}

func (c checkInSignOffFlowDo) FirstOrInit() (*types.CheckInSignOffFlow, error) {
	if result, err := c.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*types.CheckInSignOffFlow), nil
	}
}

func (c checkInSignOffFlowDo) FirstOrCreate() (*types.CheckInSignOffFlow, error) {
	if result, err := c.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*types.CheckInSignOffFlow), nil
	}
}

func (c checkInSignOffFlowDo) FindByPage(offset int, limit int) (result []*types.CheckInSignOffFlow, count int64, err error) {
	result, err = c.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = c.Offset(-1).Limit(-1).Count()
	return
}

func (c checkInSignOffFlowDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = c.Count()
	if err != nil {
		return
	}

	err = c.Offset(offset).Limit(limit).Scan(result)
	return
}

func (c checkInSignOffFlowDo) Scan(result interface{}) (err error) {
	return c.DO.Scan(result)
}

func (c checkInSignOffFlowDo) Delete(models ...*types.CheckInSignOffFlow) (result gen.ResultInfo, err error) {
	return c.DO.Delete(models)
}

func (c *checkInSignOffFlowDo) withDO(do gen.Dao) *checkInSignOffFlowDo {
	c.DO = *do.(*gen.DO)
	return c
}
