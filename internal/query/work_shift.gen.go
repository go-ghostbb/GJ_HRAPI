// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"hrapi/internal/types"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"
)

func newWorkShift(db *gorm.DB, opts ...gen.DOOption) workShift {
	_workShift := workShift{}

	_workShift.workShiftDo.UseDB(db, opts...)
	_workShift.workShiftDo.UseModel(&types.WorkShift{})

	tableName := _workShift.workShiftDo.TableName()
	_workShift.ALL = field.NewAsterisk(tableName)
	_workShift.ID = field.NewUint(tableName, "id")
	_workShift.CreatedAt = field.NewTime(tableName, "created_at")
	_workShift.UpdatedAt = field.NewTime(tableName, "updated_at")
	_workShift.DeletedAt = field.NewField(tableName, "deleted_at")
	_workShift.Code = field.NewString(tableName, "code")
	_workShift.Name = field.NewString(tableName, "name")
	_workShift.Status = field.NewBool(tableName, "status")
	_workShift.Remark = field.NewString(tableName, "remark")
	_workShift.WorkStart = field.NewTime(tableName, "work_start")
	_workShift.WorkEnd = field.NewTime(tableName, "work_end")
	_workShift.RestStart = field.NewTime(tableName, "rest_start")
	_workShift.EndStart = field.NewTime(tableName, "end_start")
	_workShift.TotalHours = field.NewUint(tableName, "total_hours")
	_workShift.Color = field.NewString(tableName, "color")

	_workShift.fillFieldMap()

	return _workShift
}

type workShift struct {
	workShiftDo workShiftDo

	ALL        field.Asterisk
	ID         field.Uint
	CreatedAt  field.Time
	UpdatedAt  field.Time
	DeletedAt  field.Field
	Code       field.String
	Name       field.String
	Status     field.Bool
	Remark     field.String
	WorkStart  field.Time
	WorkEnd    field.Time
	RestStart  field.Time
	EndStart   field.Time
	TotalHours field.Uint
	Color      field.String

	fieldMap map[string]field.Expr
}

func (w workShift) Table(newTableName string) *workShift {
	w.workShiftDo.UseTable(newTableName)
	return w.updateTableName(newTableName)
}

func (w workShift) As(alias string) *workShift {
	w.workShiftDo.DO = *(w.workShiftDo.As(alias).(*gen.DO))
	return w.updateTableName(alias)
}

func (w *workShift) updateTableName(table string) *workShift {
	w.ALL = field.NewAsterisk(table)
	w.ID = field.NewUint(table, "id")
	w.CreatedAt = field.NewTime(table, "created_at")
	w.UpdatedAt = field.NewTime(table, "updated_at")
	w.DeletedAt = field.NewField(table, "deleted_at")
	w.Code = field.NewString(table, "code")
	w.Name = field.NewString(table, "name")
	w.Status = field.NewBool(table, "status")
	w.Remark = field.NewString(table, "remark")
	w.WorkStart = field.NewTime(table, "work_start")
	w.WorkEnd = field.NewTime(table, "work_end")
	w.RestStart = field.NewTime(table, "rest_start")
	w.EndStart = field.NewTime(table, "end_start")
	w.TotalHours = field.NewUint(table, "total_hours")
	w.Color = field.NewString(table, "color")

	w.fillFieldMap()

	return w
}

func (w *workShift) WithContext(ctx context.Context) IWorkShiftDo {
	return w.workShiftDo.WithContext(ctx)
}

func (w workShift) TableName() string { return w.workShiftDo.TableName() }

func (w workShift) Alias() string { return w.workShiftDo.Alias() }

func (w workShift) Columns(cols ...field.Expr) gen.Columns { return w.workShiftDo.Columns(cols...) }

func (w *workShift) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := w.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (w *workShift) fillFieldMap() {
	w.fieldMap = make(map[string]field.Expr, 14)
	w.fieldMap["id"] = w.ID
	w.fieldMap["created_at"] = w.CreatedAt
	w.fieldMap["updated_at"] = w.UpdatedAt
	w.fieldMap["deleted_at"] = w.DeletedAt
	w.fieldMap["code"] = w.Code
	w.fieldMap["name"] = w.Name
	w.fieldMap["status"] = w.Status
	w.fieldMap["remark"] = w.Remark
	w.fieldMap["work_start"] = w.WorkStart
	w.fieldMap["work_end"] = w.WorkEnd
	w.fieldMap["rest_start"] = w.RestStart
	w.fieldMap["end_start"] = w.EndStart
	w.fieldMap["total_hours"] = w.TotalHours
	w.fieldMap["color"] = w.Color
}

func (w workShift) clone(db *gorm.DB) workShift {
	w.workShiftDo.ReplaceConnPool(db.Statement.ConnPool)
	return w
}

func (w workShift) replaceDB(db *gorm.DB) workShift {
	w.workShiftDo.ReplaceDB(db)
	return w
}

type workShiftDo struct{ gen.DO }

type IWorkShiftDo interface {
	gen.SubQuery
	Debug() IWorkShiftDo
	WithContext(ctx context.Context) IWorkShiftDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IWorkShiftDo
	WriteDB() IWorkShiftDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IWorkShiftDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IWorkShiftDo
	Not(conds ...gen.Condition) IWorkShiftDo
	Or(conds ...gen.Condition) IWorkShiftDo
	Select(conds ...field.Expr) IWorkShiftDo
	Where(conds ...gen.Condition) IWorkShiftDo
	Order(conds ...field.Expr) IWorkShiftDo
	Distinct(cols ...field.Expr) IWorkShiftDo
	Omit(cols ...field.Expr) IWorkShiftDo
	Join(table schema.Tabler, on ...field.Expr) IWorkShiftDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IWorkShiftDo
	RightJoin(table schema.Tabler, on ...field.Expr) IWorkShiftDo
	Group(cols ...field.Expr) IWorkShiftDo
	Having(conds ...gen.Condition) IWorkShiftDo
	Limit(limit int) IWorkShiftDo
	Offset(offset int) IWorkShiftDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IWorkShiftDo
	Unscoped() IWorkShiftDo
	Create(values ...*types.WorkShift) error
	CreateInBatches(values []*types.WorkShift, batchSize int) error
	Save(values ...*types.WorkShift) error
	First() (*types.WorkShift, error)
	Take() (*types.WorkShift, error)
	Last() (*types.WorkShift, error)
	Find() ([]*types.WorkShift, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*types.WorkShift, err error)
	FindInBatches(result *[]*types.WorkShift, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*types.WorkShift) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IWorkShiftDo
	Assign(attrs ...field.AssignExpr) IWorkShiftDo
	Joins(fields ...field.RelationField) IWorkShiftDo
	Preload(fields ...field.RelationField) IWorkShiftDo
	FirstOrInit() (*types.WorkShift, error)
	FirstOrCreate() (*types.WorkShift, error)
	FindByPage(offset int, limit int) (result []*types.WorkShift, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IWorkShiftDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (w workShiftDo) Debug() IWorkShiftDo {
	return w.withDO(w.DO.Debug())
}

func (w workShiftDo) WithContext(ctx context.Context) IWorkShiftDo {
	return w.withDO(w.DO.WithContext(ctx))
}

func (w workShiftDo) ReadDB() IWorkShiftDo {
	return w.Clauses(dbresolver.Read)
}

func (w workShiftDo) WriteDB() IWorkShiftDo {
	return w.Clauses(dbresolver.Write)
}

func (w workShiftDo) Session(config *gorm.Session) IWorkShiftDo {
	return w.withDO(w.DO.Session(config))
}

func (w workShiftDo) Clauses(conds ...clause.Expression) IWorkShiftDo {
	return w.withDO(w.DO.Clauses(conds...))
}

func (w workShiftDo) Returning(value interface{}, columns ...string) IWorkShiftDo {
	return w.withDO(w.DO.Returning(value, columns...))
}

func (w workShiftDo) Not(conds ...gen.Condition) IWorkShiftDo {
	return w.withDO(w.DO.Not(conds...))
}

func (w workShiftDo) Or(conds ...gen.Condition) IWorkShiftDo {
	return w.withDO(w.DO.Or(conds...))
}

func (w workShiftDo) Select(conds ...field.Expr) IWorkShiftDo {
	return w.withDO(w.DO.Select(conds...))
}

func (w workShiftDo) Where(conds ...gen.Condition) IWorkShiftDo {
	return w.withDO(w.DO.Where(conds...))
}

func (w workShiftDo) Order(conds ...field.Expr) IWorkShiftDo {
	return w.withDO(w.DO.Order(conds...))
}

func (w workShiftDo) Distinct(cols ...field.Expr) IWorkShiftDo {
	return w.withDO(w.DO.Distinct(cols...))
}

func (w workShiftDo) Omit(cols ...field.Expr) IWorkShiftDo {
	return w.withDO(w.DO.Omit(cols...))
}

func (w workShiftDo) Join(table schema.Tabler, on ...field.Expr) IWorkShiftDo {
	return w.withDO(w.DO.Join(table, on...))
}

func (w workShiftDo) LeftJoin(table schema.Tabler, on ...field.Expr) IWorkShiftDo {
	return w.withDO(w.DO.LeftJoin(table, on...))
}

func (w workShiftDo) RightJoin(table schema.Tabler, on ...field.Expr) IWorkShiftDo {
	return w.withDO(w.DO.RightJoin(table, on...))
}

func (w workShiftDo) Group(cols ...field.Expr) IWorkShiftDo {
	return w.withDO(w.DO.Group(cols...))
}

func (w workShiftDo) Having(conds ...gen.Condition) IWorkShiftDo {
	return w.withDO(w.DO.Having(conds...))
}

func (w workShiftDo) Limit(limit int) IWorkShiftDo {
	return w.withDO(w.DO.Limit(limit))
}

func (w workShiftDo) Offset(offset int) IWorkShiftDo {
	return w.withDO(w.DO.Offset(offset))
}

func (w workShiftDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IWorkShiftDo {
	return w.withDO(w.DO.Scopes(funcs...))
}

func (w workShiftDo) Unscoped() IWorkShiftDo {
	return w.withDO(w.DO.Unscoped())
}

func (w workShiftDo) Create(values ...*types.WorkShift) error {
	if len(values) == 0 {
		return nil
	}
	return w.DO.Create(values)
}

func (w workShiftDo) CreateInBatches(values []*types.WorkShift, batchSize int) error {
	return w.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (w workShiftDo) Save(values ...*types.WorkShift) error {
	if len(values) == 0 {
		return nil
	}
	return w.DO.Save(values)
}

func (w workShiftDo) First() (*types.WorkShift, error) {
	if result, err := w.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*types.WorkShift), nil
	}
}

func (w workShiftDo) Take() (*types.WorkShift, error) {
	if result, err := w.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*types.WorkShift), nil
	}
}

func (w workShiftDo) Last() (*types.WorkShift, error) {
	if result, err := w.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*types.WorkShift), nil
	}
}

func (w workShiftDo) Find() ([]*types.WorkShift, error) {
	result, err := w.DO.Find()
	return result.([]*types.WorkShift), err
}

func (w workShiftDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*types.WorkShift, err error) {
	buf := make([]*types.WorkShift, 0, batchSize)
	err = w.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (w workShiftDo) FindInBatches(result *[]*types.WorkShift, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return w.DO.FindInBatches(result, batchSize, fc)
}

func (w workShiftDo) Attrs(attrs ...field.AssignExpr) IWorkShiftDo {
	return w.withDO(w.DO.Attrs(attrs...))
}

func (w workShiftDo) Assign(attrs ...field.AssignExpr) IWorkShiftDo {
	return w.withDO(w.DO.Assign(attrs...))
}

func (w workShiftDo) Joins(fields ...field.RelationField) IWorkShiftDo {
	for _, _f := range fields {
		w = *w.withDO(w.DO.Joins(_f))
	}
	return &w
}

func (w workShiftDo) Preload(fields ...field.RelationField) IWorkShiftDo {
	for _, _f := range fields {
		w = *w.withDO(w.DO.Preload(_f))
	}
	return &w
}

func (w workShiftDo) FirstOrInit() (*types.WorkShift, error) {
	if result, err := w.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*types.WorkShift), nil
	}
}

func (w workShiftDo) FirstOrCreate() (*types.WorkShift, error) {
	if result, err := w.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*types.WorkShift), nil
	}
}

func (w workShiftDo) FindByPage(offset int, limit int) (result []*types.WorkShift, count int64, err error) {
	result, err = w.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = w.Offset(-1).Limit(-1).Count()
	return
}

func (w workShiftDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = w.Count()
	if err != nil {
		return
	}

	err = w.Offset(offset).Limit(limit).Scan(result)
	return
}

func (w workShiftDo) Scan(result interface{}) (err error) {
	return w.DO.Scan(result)
}

func (w workShiftDo) Delete(models ...*types.WorkShift) (result gen.ResultInfo, err error) {
	return w.DO.Delete(models)
}

func (w *workShiftDo) withDO(do gen.Dao) *workShiftDo {
	w.DO = *do.(*gen.DO)
	return w
}
