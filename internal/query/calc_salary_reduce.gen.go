// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"hrapi/internal/types"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"
)

func newCalcSalaryReduce(db *gorm.DB, opts ...gen.DOOption) calcSalaryReduce {
	_calcSalaryReduce := calcSalaryReduce{}

	_calcSalaryReduce.calcSalaryReduceDo.UseDB(db, opts...)
	_calcSalaryReduce.calcSalaryReduceDo.UseModel(&types.CalcSalaryReduce{})

	tableName := _calcSalaryReduce.calcSalaryReduceDo.TableName()
	_calcSalaryReduce.ALL = field.NewAsterisk(tableName)
	_calcSalaryReduce.ID = field.NewUint(tableName, "id")
	_calcSalaryReduce.CreatedAt = field.NewTime(tableName, "created_at")
	_calcSalaryReduce.UpdatedAt = field.NewTime(tableName, "updated_at")
	_calcSalaryReduce.DeletedAt = field.NewField(tableName, "deleted_at")
	_calcSalaryReduce.CalcSalaryID = field.NewUint(tableName, "calc_salary_id")
	_calcSalaryReduce.Name = field.NewString(tableName, "name")
	_calcSalaryReduce.Amount = field.NewFloat32(tableName, "amount")
	_calcSalaryReduce.CalcSalary = calcSalaryReduceBelongsToCalcSalary{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("CalcSalary", "types.CalcSalary"),
		SalaryAdd: struct {
			field.RelationField
			CalcSalary struct {
				field.RelationField
			}
		}{
			RelationField: field.NewRelation("CalcSalary.SalaryAdd", "types.CalcSalaryAdd"),
			CalcSalary: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("CalcSalary.SalaryAdd.CalcSalary", "types.CalcSalary"),
			},
		},
		SalaryReduce: struct {
			field.RelationField
			CalcSalary struct {
				field.RelationField
			}
		}{
			RelationField: field.NewRelation("CalcSalary.SalaryReduce", "types.CalcSalaryReduce"),
			CalcSalary: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("CalcSalary.SalaryReduce.CalcSalary", "types.CalcSalary"),
			},
		},
	}

	_calcSalaryReduce.fillFieldMap()

	return _calcSalaryReduce
}

type calcSalaryReduce struct {
	calcSalaryReduceDo calcSalaryReduceDo

	ALL          field.Asterisk
	ID           field.Uint
	CreatedAt    field.Time
	UpdatedAt    field.Time
	DeletedAt    field.Field
	CalcSalaryID field.Uint
	Name         field.String
	Amount       field.Float32
	CalcSalary   calcSalaryReduceBelongsToCalcSalary

	fieldMap map[string]field.Expr
}

func (c calcSalaryReduce) Table(newTableName string) *calcSalaryReduce {
	c.calcSalaryReduceDo.UseTable(newTableName)
	return c.updateTableName(newTableName)
}

func (c calcSalaryReduce) As(alias string) *calcSalaryReduce {
	c.calcSalaryReduceDo.DO = *(c.calcSalaryReduceDo.As(alias).(*gen.DO))
	return c.updateTableName(alias)
}

func (c *calcSalaryReduce) updateTableName(table string) *calcSalaryReduce {
	c.ALL = field.NewAsterisk(table)
	c.ID = field.NewUint(table, "id")
	c.CreatedAt = field.NewTime(table, "created_at")
	c.UpdatedAt = field.NewTime(table, "updated_at")
	c.DeletedAt = field.NewField(table, "deleted_at")
	c.CalcSalaryID = field.NewUint(table, "calc_salary_id")
	c.Name = field.NewString(table, "name")
	c.Amount = field.NewFloat32(table, "amount")

	c.fillFieldMap()

	return c
}

func (c *calcSalaryReduce) WithContext(ctx context.Context) ICalcSalaryReduceDo {
	return c.calcSalaryReduceDo.WithContext(ctx)
}

func (c calcSalaryReduce) TableName() string { return c.calcSalaryReduceDo.TableName() }

func (c calcSalaryReduce) Alias() string { return c.calcSalaryReduceDo.Alias() }

func (c calcSalaryReduce) Columns(cols ...field.Expr) gen.Columns {
	return c.calcSalaryReduceDo.Columns(cols...)
}

func (c *calcSalaryReduce) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := c.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (c *calcSalaryReduce) fillFieldMap() {
	c.fieldMap = make(map[string]field.Expr, 8)
	c.fieldMap["id"] = c.ID
	c.fieldMap["created_at"] = c.CreatedAt
	c.fieldMap["updated_at"] = c.UpdatedAt
	c.fieldMap["deleted_at"] = c.DeletedAt
	c.fieldMap["calc_salary_id"] = c.CalcSalaryID
	c.fieldMap["name"] = c.Name
	c.fieldMap["amount"] = c.Amount

}

func (c calcSalaryReduce) clone(db *gorm.DB) calcSalaryReduce {
	c.calcSalaryReduceDo.ReplaceConnPool(db.Statement.ConnPool)
	return c
}

func (c calcSalaryReduce) replaceDB(db *gorm.DB) calcSalaryReduce {
	c.calcSalaryReduceDo.ReplaceDB(db)
	return c
}

type calcSalaryReduceBelongsToCalcSalary struct {
	db *gorm.DB

	field.RelationField

	SalaryAdd struct {
		field.RelationField
		CalcSalary struct {
			field.RelationField
		}
	}
	SalaryReduce struct {
		field.RelationField
		CalcSalary struct {
			field.RelationField
		}
	}
}

func (a calcSalaryReduceBelongsToCalcSalary) Where(conds ...field.Expr) *calcSalaryReduceBelongsToCalcSalary {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a calcSalaryReduceBelongsToCalcSalary) WithContext(ctx context.Context) *calcSalaryReduceBelongsToCalcSalary {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a calcSalaryReduceBelongsToCalcSalary) Session(session *gorm.Session) *calcSalaryReduceBelongsToCalcSalary {
	a.db = a.db.Session(session)
	return &a
}

func (a calcSalaryReduceBelongsToCalcSalary) Model(m *types.CalcSalaryReduce) *calcSalaryReduceBelongsToCalcSalaryTx {
	return &calcSalaryReduceBelongsToCalcSalaryTx{a.db.Model(m).Association(a.Name())}
}

type calcSalaryReduceBelongsToCalcSalaryTx struct{ tx *gorm.Association }

func (a calcSalaryReduceBelongsToCalcSalaryTx) Find() (result *types.CalcSalary, err error) {
	return result, a.tx.Find(&result)
}

func (a calcSalaryReduceBelongsToCalcSalaryTx) Append(values ...*types.CalcSalary) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a calcSalaryReduceBelongsToCalcSalaryTx) Replace(values ...*types.CalcSalary) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a calcSalaryReduceBelongsToCalcSalaryTx) Delete(values ...*types.CalcSalary) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a calcSalaryReduceBelongsToCalcSalaryTx) Clear() error {
	return a.tx.Clear()
}

func (a calcSalaryReduceBelongsToCalcSalaryTx) Count() int64 {
	return a.tx.Count()
}

type calcSalaryReduceDo struct{ gen.DO }

type ICalcSalaryReduceDo interface {
	gen.SubQuery
	Debug() ICalcSalaryReduceDo
	WithContext(ctx context.Context) ICalcSalaryReduceDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ICalcSalaryReduceDo
	WriteDB() ICalcSalaryReduceDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ICalcSalaryReduceDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ICalcSalaryReduceDo
	Not(conds ...gen.Condition) ICalcSalaryReduceDo
	Or(conds ...gen.Condition) ICalcSalaryReduceDo
	Select(conds ...field.Expr) ICalcSalaryReduceDo
	Where(conds ...gen.Condition) ICalcSalaryReduceDo
	Order(conds ...field.Expr) ICalcSalaryReduceDo
	Distinct(cols ...field.Expr) ICalcSalaryReduceDo
	Omit(cols ...field.Expr) ICalcSalaryReduceDo
	Join(table schema.Tabler, on ...field.Expr) ICalcSalaryReduceDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ICalcSalaryReduceDo
	RightJoin(table schema.Tabler, on ...field.Expr) ICalcSalaryReduceDo
	Group(cols ...field.Expr) ICalcSalaryReduceDo
	Having(conds ...gen.Condition) ICalcSalaryReduceDo
	Limit(limit int) ICalcSalaryReduceDo
	Offset(offset int) ICalcSalaryReduceDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ICalcSalaryReduceDo
	Unscoped() ICalcSalaryReduceDo
	Create(values ...*types.CalcSalaryReduce) error
	CreateInBatches(values []*types.CalcSalaryReduce, batchSize int) error
	Save(values ...*types.CalcSalaryReduce) error
	First() (*types.CalcSalaryReduce, error)
	Take() (*types.CalcSalaryReduce, error)
	Last() (*types.CalcSalaryReduce, error)
	Find() ([]*types.CalcSalaryReduce, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*types.CalcSalaryReduce, err error)
	FindInBatches(result *[]*types.CalcSalaryReduce, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*types.CalcSalaryReduce) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ICalcSalaryReduceDo
	Assign(attrs ...field.AssignExpr) ICalcSalaryReduceDo
	Joins(fields ...field.RelationField) ICalcSalaryReduceDo
	Preload(fields ...field.RelationField) ICalcSalaryReduceDo
	FirstOrInit() (*types.CalcSalaryReduce, error)
	FirstOrCreate() (*types.CalcSalaryReduce, error)
	FindByPage(offset int, limit int) (result []*types.CalcSalaryReduce, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ICalcSalaryReduceDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (c calcSalaryReduceDo) Debug() ICalcSalaryReduceDo {
	return c.withDO(c.DO.Debug())
}

func (c calcSalaryReduceDo) WithContext(ctx context.Context) ICalcSalaryReduceDo {
	return c.withDO(c.DO.WithContext(ctx))
}

func (c calcSalaryReduceDo) ReadDB() ICalcSalaryReduceDo {
	return c.Clauses(dbresolver.Read)
}

func (c calcSalaryReduceDo) WriteDB() ICalcSalaryReduceDo {
	return c.Clauses(dbresolver.Write)
}

func (c calcSalaryReduceDo) Session(config *gorm.Session) ICalcSalaryReduceDo {
	return c.withDO(c.DO.Session(config))
}

func (c calcSalaryReduceDo) Clauses(conds ...clause.Expression) ICalcSalaryReduceDo {
	return c.withDO(c.DO.Clauses(conds...))
}

func (c calcSalaryReduceDo) Returning(value interface{}, columns ...string) ICalcSalaryReduceDo {
	return c.withDO(c.DO.Returning(value, columns...))
}

func (c calcSalaryReduceDo) Not(conds ...gen.Condition) ICalcSalaryReduceDo {
	return c.withDO(c.DO.Not(conds...))
}

func (c calcSalaryReduceDo) Or(conds ...gen.Condition) ICalcSalaryReduceDo {
	return c.withDO(c.DO.Or(conds...))
}

func (c calcSalaryReduceDo) Select(conds ...field.Expr) ICalcSalaryReduceDo {
	return c.withDO(c.DO.Select(conds...))
}

func (c calcSalaryReduceDo) Where(conds ...gen.Condition) ICalcSalaryReduceDo {
	return c.withDO(c.DO.Where(conds...))
}

func (c calcSalaryReduceDo) Order(conds ...field.Expr) ICalcSalaryReduceDo {
	return c.withDO(c.DO.Order(conds...))
}

func (c calcSalaryReduceDo) Distinct(cols ...field.Expr) ICalcSalaryReduceDo {
	return c.withDO(c.DO.Distinct(cols...))
}

func (c calcSalaryReduceDo) Omit(cols ...field.Expr) ICalcSalaryReduceDo {
	return c.withDO(c.DO.Omit(cols...))
}

func (c calcSalaryReduceDo) Join(table schema.Tabler, on ...field.Expr) ICalcSalaryReduceDo {
	return c.withDO(c.DO.Join(table, on...))
}

func (c calcSalaryReduceDo) LeftJoin(table schema.Tabler, on ...field.Expr) ICalcSalaryReduceDo {
	return c.withDO(c.DO.LeftJoin(table, on...))
}

func (c calcSalaryReduceDo) RightJoin(table schema.Tabler, on ...field.Expr) ICalcSalaryReduceDo {
	return c.withDO(c.DO.RightJoin(table, on...))
}

func (c calcSalaryReduceDo) Group(cols ...field.Expr) ICalcSalaryReduceDo {
	return c.withDO(c.DO.Group(cols...))
}

func (c calcSalaryReduceDo) Having(conds ...gen.Condition) ICalcSalaryReduceDo {
	return c.withDO(c.DO.Having(conds...))
}

func (c calcSalaryReduceDo) Limit(limit int) ICalcSalaryReduceDo {
	return c.withDO(c.DO.Limit(limit))
}

func (c calcSalaryReduceDo) Offset(offset int) ICalcSalaryReduceDo {
	return c.withDO(c.DO.Offset(offset))
}

func (c calcSalaryReduceDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ICalcSalaryReduceDo {
	return c.withDO(c.DO.Scopes(funcs...))
}

func (c calcSalaryReduceDo) Unscoped() ICalcSalaryReduceDo {
	return c.withDO(c.DO.Unscoped())
}

func (c calcSalaryReduceDo) Create(values ...*types.CalcSalaryReduce) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Create(values)
}

func (c calcSalaryReduceDo) CreateInBatches(values []*types.CalcSalaryReduce, batchSize int) error {
	return c.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (c calcSalaryReduceDo) Save(values ...*types.CalcSalaryReduce) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Save(values)
}

func (c calcSalaryReduceDo) First() (*types.CalcSalaryReduce, error) {
	if result, err := c.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*types.CalcSalaryReduce), nil
	}
}

func (c calcSalaryReduceDo) Take() (*types.CalcSalaryReduce, error) {
	if result, err := c.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*types.CalcSalaryReduce), nil
	}
}

func (c calcSalaryReduceDo) Last() (*types.CalcSalaryReduce, error) {
	if result, err := c.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*types.CalcSalaryReduce), nil
	}
}

func (c calcSalaryReduceDo) Find() ([]*types.CalcSalaryReduce, error) {
	result, err := c.DO.Find()
	return result.([]*types.CalcSalaryReduce), err
}

func (c calcSalaryReduceDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*types.CalcSalaryReduce, err error) {
	buf := make([]*types.CalcSalaryReduce, 0, batchSize)
	err = c.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (c calcSalaryReduceDo) FindInBatches(result *[]*types.CalcSalaryReduce, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return c.DO.FindInBatches(result, batchSize, fc)
}

func (c calcSalaryReduceDo) Attrs(attrs ...field.AssignExpr) ICalcSalaryReduceDo {
	return c.withDO(c.DO.Attrs(attrs...))
}

func (c calcSalaryReduceDo) Assign(attrs ...field.AssignExpr) ICalcSalaryReduceDo {
	return c.withDO(c.DO.Assign(attrs...))
}

func (c calcSalaryReduceDo) Joins(fields ...field.RelationField) ICalcSalaryReduceDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Joins(_f))
	}
	return &c
}

func (c calcSalaryReduceDo) Preload(fields ...field.RelationField) ICalcSalaryReduceDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Preload(_f))
	}
	return &c
}

func (c calcSalaryReduceDo) FirstOrInit() (*types.CalcSalaryReduce, error) {
	if result, err := c.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*types.CalcSalaryReduce), nil
	}
}

func (c calcSalaryReduceDo) FirstOrCreate() (*types.CalcSalaryReduce, error) {
	if result, err := c.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*types.CalcSalaryReduce), nil
	}
}

func (c calcSalaryReduceDo) FindByPage(offset int, limit int) (result []*types.CalcSalaryReduce, count int64, err error) {
	result, err = c.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = c.Offset(-1).Limit(-1).Count()
	return
}

func (c calcSalaryReduceDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = c.Count()
	if err != nil {
		return
	}

	err = c.Offset(offset).Limit(limit).Scan(result)
	return
}

func (c calcSalaryReduceDo) Scan(result interface{}) (err error) {
	return c.DO.Scan(result)
}

func (c calcSalaryReduceDo) Delete(models ...*types.CalcSalaryReduce) (result gen.ResultInfo, err error) {
	return c.DO.Delete(models)
}

func (c *calcSalaryReduceDo) withDO(do gen.Dao) *calcSalaryReduceDo {
	c.DO = *do.(*gen.DO)
	return c
}
