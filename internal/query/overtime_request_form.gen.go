// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"hrapi/internal/types"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"
)

func newOvertimeRequestForm(db *gorm.DB, opts ...gen.DOOption) overtimeRequestForm {
	_overtimeRequestForm := overtimeRequestForm{}

	_overtimeRequestForm.overtimeRequestFormDo.UseDB(db, opts...)
	_overtimeRequestForm.overtimeRequestFormDo.UseModel(&types.OvertimeRequestForm{})

	tableName := _overtimeRequestForm.overtimeRequestFormDo.TableName()
	_overtimeRequestForm.ALL = field.NewAsterisk(tableName)
	_overtimeRequestForm.ID = field.NewUint(tableName, "id")
	_overtimeRequestForm.CreatedAt = field.NewTime(tableName, "created_at")
	_overtimeRequestForm.UpdatedAt = field.NewTime(tableName, "updated_at")
	_overtimeRequestForm.DeletedAt = field.NewField(tableName, "deleted_at")
	_overtimeRequestForm.Order = field.NewString(tableName, "order")
	_overtimeRequestForm.Date = field.NewField(tableName, "date")
	_overtimeRequestForm.StartTime = field.NewField(tableName, "start_time")
	_overtimeRequestForm.EndTime = field.NewField(tableName, "end_time")
	_overtimeRequestForm.EstimatedHours = field.NewFloat32(tableName, "estimated_hours")
	_overtimeRequestForm.SignStatus = field.NewField(tableName, "sign_status")
	_overtimeRequestForm.Remark = field.NewString(tableName, "remark")
	_overtimeRequestForm.EmployeeID = field.NewUint(tableName, "employee_id")
	_overtimeRequestForm.DepartmentID = field.NewUint(tableName, "department_id")
	_overtimeRequestForm.SignOffFlow = overtimeRequestFormHasManySignOffFlow{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("SignOffFlow", "types.OvertimeSignOffFlow"),
		OvertimeRequestForm: struct {
			field.RelationField
			Employee struct {
				field.RelationField
				Department struct {
					field.RelationField
					Manager struct {
						field.RelationField
					}
				}
				Rank struct {
					field.RelationField
					Grade struct {
						field.RelationField
						Rank struct {
							field.RelationField
						}
					}
				}
				Grade struct {
					field.RelationField
				}
				LoginInformation struct {
					field.RelationField
					Employee struct {
						field.RelationField
					}
				}
				Roles struct {
					field.RelationField
					Employees struct {
						field.RelationField
					}
					Permissions struct {
						field.RelationField
						Roles struct {
							field.RelationField
						}
					}
					Menus struct {
						field.RelationField
						Roles struct {
							field.RelationField
						}
					}
				}
			}
			Department struct {
				field.RelationField
			}
			SignOffFlow struct {
				field.RelationField
			}
		}{
			RelationField: field.NewRelation("SignOffFlow.OvertimeRequestForm", "types.OvertimeRequestForm"),
			Employee: struct {
				field.RelationField
				Department struct {
					field.RelationField
					Manager struct {
						field.RelationField
					}
				}
				Rank struct {
					field.RelationField
					Grade struct {
						field.RelationField
						Rank struct {
							field.RelationField
						}
					}
				}
				Grade struct {
					field.RelationField
				}
				LoginInformation struct {
					field.RelationField
					Employee struct {
						field.RelationField
					}
				}
				Roles struct {
					field.RelationField
					Employees struct {
						field.RelationField
					}
					Permissions struct {
						field.RelationField
						Roles struct {
							field.RelationField
						}
					}
					Menus struct {
						field.RelationField
						Roles struct {
							field.RelationField
						}
					}
				}
			}{
				RelationField: field.NewRelation("SignOffFlow.OvertimeRequestForm.Employee", "types.Employee"),
				Department: struct {
					field.RelationField
					Manager struct {
						field.RelationField
					}
				}{
					RelationField: field.NewRelation("SignOffFlow.OvertimeRequestForm.Employee.Department", "types.Department"),
					Manager: struct {
						field.RelationField
					}{
						RelationField: field.NewRelation("SignOffFlow.OvertimeRequestForm.Employee.Department.Manager", "types.Employee"),
					},
				},
				Rank: struct {
					field.RelationField
					Grade struct {
						field.RelationField
						Rank struct {
							field.RelationField
						}
					}
				}{
					RelationField: field.NewRelation("SignOffFlow.OvertimeRequestForm.Employee.Rank", "types.PositionRank"),
					Grade: struct {
						field.RelationField
						Rank struct {
							field.RelationField
						}
					}{
						RelationField: field.NewRelation("SignOffFlow.OvertimeRequestForm.Employee.Rank.Grade", "types.PositionGrade"),
						Rank: struct {
							field.RelationField
						}{
							RelationField: field.NewRelation("SignOffFlow.OvertimeRequestForm.Employee.Rank.Grade.Rank", "types.PositionRank"),
						},
					},
				},
				Grade: struct {
					field.RelationField
				}{
					RelationField: field.NewRelation("SignOffFlow.OvertimeRequestForm.Employee.Grade", "types.PositionGrade"),
				},
				LoginInformation: struct {
					field.RelationField
					Employee struct {
						field.RelationField
					}
				}{
					RelationField: field.NewRelation("SignOffFlow.OvertimeRequestForm.Employee.LoginInformation", "types.LoginInformation"),
					Employee: struct {
						field.RelationField
					}{
						RelationField: field.NewRelation("SignOffFlow.OvertimeRequestForm.Employee.LoginInformation.Employee", "types.Employee"),
					},
				},
				Roles: struct {
					field.RelationField
					Employees struct {
						field.RelationField
					}
					Permissions struct {
						field.RelationField
						Roles struct {
							field.RelationField
						}
					}
					Menus struct {
						field.RelationField
						Roles struct {
							field.RelationField
						}
					}
				}{
					RelationField: field.NewRelation("SignOffFlow.OvertimeRequestForm.Employee.Roles", "types.Role"),
					Employees: struct {
						field.RelationField
					}{
						RelationField: field.NewRelation("SignOffFlow.OvertimeRequestForm.Employee.Roles.Employees", "types.Employee"),
					},
					Permissions: struct {
						field.RelationField
						Roles struct {
							field.RelationField
						}
					}{
						RelationField: field.NewRelation("SignOffFlow.OvertimeRequestForm.Employee.Roles.Permissions", "types.Permission"),
						Roles: struct {
							field.RelationField
						}{
							RelationField: field.NewRelation("SignOffFlow.OvertimeRequestForm.Employee.Roles.Permissions.Roles", "types.Role"),
						},
					},
					Menus: struct {
						field.RelationField
						Roles struct {
							field.RelationField
						}
					}{
						RelationField: field.NewRelation("SignOffFlow.OvertimeRequestForm.Employee.Roles.Menus", "types.Menu"),
						Roles: struct {
							field.RelationField
						}{
							RelationField: field.NewRelation("SignOffFlow.OvertimeRequestForm.Employee.Roles.Menus.Roles", "types.Role"),
						},
					},
				},
			},
			Department: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("SignOffFlow.OvertimeRequestForm.Department", "types.Department"),
			},
			SignOffFlow: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("SignOffFlow.OvertimeRequestForm.SignOffFlow", "types.OvertimeSignOffFlow"),
			},
		},
		SignOffEmployee: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("SignOffFlow.SignOffEmployee", "types.Employee"),
		},
	}

	_overtimeRequestForm.Employee = overtimeRequestFormBelongsToEmployee{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Employee", "types.Employee"),
	}

	_overtimeRequestForm.Department = overtimeRequestFormBelongsToDepartment{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Department", "types.Department"),
	}

	_overtimeRequestForm.fillFieldMap()

	return _overtimeRequestForm
}

type overtimeRequestForm struct {
	overtimeRequestFormDo overtimeRequestFormDo

	ALL            field.Asterisk
	ID             field.Uint
	CreatedAt      field.Time
	UpdatedAt      field.Time
	DeletedAt      field.Field
	Order          field.String
	Date           field.Field
	StartTime      field.Field
	EndTime        field.Field
	EstimatedHours field.Float32
	SignStatus     field.Field
	Remark         field.String
	EmployeeID     field.Uint
	DepartmentID   field.Uint
	SignOffFlow    overtimeRequestFormHasManySignOffFlow

	Employee overtimeRequestFormBelongsToEmployee

	Department overtimeRequestFormBelongsToDepartment

	fieldMap map[string]field.Expr
}

func (o overtimeRequestForm) Table(newTableName string) *overtimeRequestForm {
	o.overtimeRequestFormDo.UseTable(newTableName)
	return o.updateTableName(newTableName)
}

func (o overtimeRequestForm) As(alias string) *overtimeRequestForm {
	o.overtimeRequestFormDo.DO = *(o.overtimeRequestFormDo.As(alias).(*gen.DO))
	return o.updateTableName(alias)
}

func (o *overtimeRequestForm) updateTableName(table string) *overtimeRequestForm {
	o.ALL = field.NewAsterisk(table)
	o.ID = field.NewUint(table, "id")
	o.CreatedAt = field.NewTime(table, "created_at")
	o.UpdatedAt = field.NewTime(table, "updated_at")
	o.DeletedAt = field.NewField(table, "deleted_at")
	o.Order = field.NewString(table, "order")
	o.Date = field.NewField(table, "date")
	o.StartTime = field.NewField(table, "start_time")
	o.EndTime = field.NewField(table, "end_time")
	o.EstimatedHours = field.NewFloat32(table, "estimated_hours")
	o.SignStatus = field.NewField(table, "sign_status")
	o.Remark = field.NewString(table, "remark")
	o.EmployeeID = field.NewUint(table, "employee_id")
	o.DepartmentID = field.NewUint(table, "department_id")

	o.fillFieldMap()

	return o
}

func (o *overtimeRequestForm) WithContext(ctx context.Context) IOvertimeRequestFormDo {
	return o.overtimeRequestFormDo.WithContext(ctx)
}

func (o overtimeRequestForm) TableName() string { return o.overtimeRequestFormDo.TableName() }

func (o overtimeRequestForm) Alias() string { return o.overtimeRequestFormDo.Alias() }

func (o overtimeRequestForm) Columns(cols ...field.Expr) gen.Columns {
	return o.overtimeRequestFormDo.Columns(cols...)
}

func (o *overtimeRequestForm) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := o.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (o *overtimeRequestForm) fillFieldMap() {
	o.fieldMap = make(map[string]field.Expr, 16)
	o.fieldMap["id"] = o.ID
	o.fieldMap["created_at"] = o.CreatedAt
	o.fieldMap["updated_at"] = o.UpdatedAt
	o.fieldMap["deleted_at"] = o.DeletedAt
	o.fieldMap["order"] = o.Order
	o.fieldMap["date"] = o.Date
	o.fieldMap["start_time"] = o.StartTime
	o.fieldMap["end_time"] = o.EndTime
	o.fieldMap["estimated_hours"] = o.EstimatedHours
	o.fieldMap["sign_status"] = o.SignStatus
	o.fieldMap["remark"] = o.Remark
	o.fieldMap["employee_id"] = o.EmployeeID
	o.fieldMap["department_id"] = o.DepartmentID

}

func (o overtimeRequestForm) clone(db *gorm.DB) overtimeRequestForm {
	o.overtimeRequestFormDo.ReplaceConnPool(db.Statement.ConnPool)
	return o
}

func (o overtimeRequestForm) replaceDB(db *gorm.DB) overtimeRequestForm {
	o.overtimeRequestFormDo.ReplaceDB(db)
	return o
}

type overtimeRequestFormHasManySignOffFlow struct {
	db *gorm.DB

	field.RelationField

	OvertimeRequestForm struct {
		field.RelationField
		Employee struct {
			field.RelationField
			Department struct {
				field.RelationField
				Manager struct {
					field.RelationField
				}
			}
			Rank struct {
				field.RelationField
				Grade struct {
					field.RelationField
					Rank struct {
						field.RelationField
					}
				}
			}
			Grade struct {
				field.RelationField
			}
			LoginInformation struct {
				field.RelationField
				Employee struct {
					field.RelationField
				}
			}
			Roles struct {
				field.RelationField
				Employees struct {
					field.RelationField
				}
				Permissions struct {
					field.RelationField
					Roles struct {
						field.RelationField
					}
				}
				Menus struct {
					field.RelationField
					Roles struct {
						field.RelationField
					}
				}
			}
		}
		Department struct {
			field.RelationField
		}
		SignOffFlow struct {
			field.RelationField
		}
	}
	SignOffEmployee struct {
		field.RelationField
	}
}

func (a overtimeRequestFormHasManySignOffFlow) Where(conds ...field.Expr) *overtimeRequestFormHasManySignOffFlow {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a overtimeRequestFormHasManySignOffFlow) WithContext(ctx context.Context) *overtimeRequestFormHasManySignOffFlow {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a overtimeRequestFormHasManySignOffFlow) Session(session *gorm.Session) *overtimeRequestFormHasManySignOffFlow {
	a.db = a.db.Session(session)
	return &a
}

func (a overtimeRequestFormHasManySignOffFlow) Model(m *types.OvertimeRequestForm) *overtimeRequestFormHasManySignOffFlowTx {
	return &overtimeRequestFormHasManySignOffFlowTx{a.db.Model(m).Association(a.Name())}
}

type overtimeRequestFormHasManySignOffFlowTx struct{ tx *gorm.Association }

func (a overtimeRequestFormHasManySignOffFlowTx) Find() (result []*types.OvertimeSignOffFlow, err error) {
	return result, a.tx.Find(&result)
}

func (a overtimeRequestFormHasManySignOffFlowTx) Append(values ...*types.OvertimeSignOffFlow) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a overtimeRequestFormHasManySignOffFlowTx) Replace(values ...*types.OvertimeSignOffFlow) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a overtimeRequestFormHasManySignOffFlowTx) Delete(values ...*types.OvertimeSignOffFlow) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a overtimeRequestFormHasManySignOffFlowTx) Clear() error {
	return a.tx.Clear()
}

func (a overtimeRequestFormHasManySignOffFlowTx) Count() int64 {
	return a.tx.Count()
}

type overtimeRequestFormBelongsToEmployee struct {
	db *gorm.DB

	field.RelationField
}

func (a overtimeRequestFormBelongsToEmployee) Where(conds ...field.Expr) *overtimeRequestFormBelongsToEmployee {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a overtimeRequestFormBelongsToEmployee) WithContext(ctx context.Context) *overtimeRequestFormBelongsToEmployee {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a overtimeRequestFormBelongsToEmployee) Session(session *gorm.Session) *overtimeRequestFormBelongsToEmployee {
	a.db = a.db.Session(session)
	return &a
}

func (a overtimeRequestFormBelongsToEmployee) Model(m *types.OvertimeRequestForm) *overtimeRequestFormBelongsToEmployeeTx {
	return &overtimeRequestFormBelongsToEmployeeTx{a.db.Model(m).Association(a.Name())}
}

type overtimeRequestFormBelongsToEmployeeTx struct{ tx *gorm.Association }

func (a overtimeRequestFormBelongsToEmployeeTx) Find() (result *types.Employee, err error) {
	return result, a.tx.Find(&result)
}

func (a overtimeRequestFormBelongsToEmployeeTx) Append(values ...*types.Employee) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a overtimeRequestFormBelongsToEmployeeTx) Replace(values ...*types.Employee) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a overtimeRequestFormBelongsToEmployeeTx) Delete(values ...*types.Employee) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a overtimeRequestFormBelongsToEmployeeTx) Clear() error {
	return a.tx.Clear()
}

func (a overtimeRequestFormBelongsToEmployeeTx) Count() int64 {
	return a.tx.Count()
}

type overtimeRequestFormBelongsToDepartment struct {
	db *gorm.DB

	field.RelationField
}

func (a overtimeRequestFormBelongsToDepartment) Where(conds ...field.Expr) *overtimeRequestFormBelongsToDepartment {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a overtimeRequestFormBelongsToDepartment) WithContext(ctx context.Context) *overtimeRequestFormBelongsToDepartment {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a overtimeRequestFormBelongsToDepartment) Session(session *gorm.Session) *overtimeRequestFormBelongsToDepartment {
	a.db = a.db.Session(session)
	return &a
}

func (a overtimeRequestFormBelongsToDepartment) Model(m *types.OvertimeRequestForm) *overtimeRequestFormBelongsToDepartmentTx {
	return &overtimeRequestFormBelongsToDepartmentTx{a.db.Model(m).Association(a.Name())}
}

type overtimeRequestFormBelongsToDepartmentTx struct{ tx *gorm.Association }

func (a overtimeRequestFormBelongsToDepartmentTx) Find() (result *types.Department, err error) {
	return result, a.tx.Find(&result)
}

func (a overtimeRequestFormBelongsToDepartmentTx) Append(values ...*types.Department) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a overtimeRequestFormBelongsToDepartmentTx) Replace(values ...*types.Department) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a overtimeRequestFormBelongsToDepartmentTx) Delete(values ...*types.Department) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a overtimeRequestFormBelongsToDepartmentTx) Clear() error {
	return a.tx.Clear()
}

func (a overtimeRequestFormBelongsToDepartmentTx) Count() int64 {
	return a.tx.Count()
}

type overtimeRequestFormDo struct{ gen.DO }

type IOvertimeRequestFormDo interface {
	gen.SubQuery
	Debug() IOvertimeRequestFormDo
	WithContext(ctx context.Context) IOvertimeRequestFormDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IOvertimeRequestFormDo
	WriteDB() IOvertimeRequestFormDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IOvertimeRequestFormDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IOvertimeRequestFormDo
	Not(conds ...gen.Condition) IOvertimeRequestFormDo
	Or(conds ...gen.Condition) IOvertimeRequestFormDo
	Select(conds ...field.Expr) IOvertimeRequestFormDo
	Where(conds ...gen.Condition) IOvertimeRequestFormDo
	Order(conds ...field.Expr) IOvertimeRequestFormDo
	Distinct(cols ...field.Expr) IOvertimeRequestFormDo
	Omit(cols ...field.Expr) IOvertimeRequestFormDo
	Join(table schema.Tabler, on ...field.Expr) IOvertimeRequestFormDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IOvertimeRequestFormDo
	RightJoin(table schema.Tabler, on ...field.Expr) IOvertimeRequestFormDo
	Group(cols ...field.Expr) IOvertimeRequestFormDo
	Having(conds ...gen.Condition) IOvertimeRequestFormDo
	Limit(limit int) IOvertimeRequestFormDo
	Offset(offset int) IOvertimeRequestFormDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IOvertimeRequestFormDo
	Unscoped() IOvertimeRequestFormDo
	Create(values ...*types.OvertimeRequestForm) error
	CreateInBatches(values []*types.OvertimeRequestForm, batchSize int) error
	Save(values ...*types.OvertimeRequestForm) error
	First() (*types.OvertimeRequestForm, error)
	Take() (*types.OvertimeRequestForm, error)
	Last() (*types.OvertimeRequestForm, error)
	Find() ([]*types.OvertimeRequestForm, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*types.OvertimeRequestForm, err error)
	FindInBatches(result *[]*types.OvertimeRequestForm, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*types.OvertimeRequestForm) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IOvertimeRequestFormDo
	Assign(attrs ...field.AssignExpr) IOvertimeRequestFormDo
	Joins(fields ...field.RelationField) IOvertimeRequestFormDo
	Preload(fields ...field.RelationField) IOvertimeRequestFormDo
	FirstOrInit() (*types.OvertimeRequestForm, error)
	FirstOrCreate() (*types.OvertimeRequestForm, error)
	FindByPage(offset int, limit int) (result []*types.OvertimeRequestForm, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IOvertimeRequestFormDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (o overtimeRequestFormDo) Debug() IOvertimeRequestFormDo {
	return o.withDO(o.DO.Debug())
}

func (o overtimeRequestFormDo) WithContext(ctx context.Context) IOvertimeRequestFormDo {
	return o.withDO(o.DO.WithContext(ctx))
}

func (o overtimeRequestFormDo) ReadDB() IOvertimeRequestFormDo {
	return o.Clauses(dbresolver.Read)
}

func (o overtimeRequestFormDo) WriteDB() IOvertimeRequestFormDo {
	return o.Clauses(dbresolver.Write)
}

func (o overtimeRequestFormDo) Session(config *gorm.Session) IOvertimeRequestFormDo {
	return o.withDO(o.DO.Session(config))
}

func (o overtimeRequestFormDo) Clauses(conds ...clause.Expression) IOvertimeRequestFormDo {
	return o.withDO(o.DO.Clauses(conds...))
}

func (o overtimeRequestFormDo) Returning(value interface{}, columns ...string) IOvertimeRequestFormDo {
	return o.withDO(o.DO.Returning(value, columns...))
}

func (o overtimeRequestFormDo) Not(conds ...gen.Condition) IOvertimeRequestFormDo {
	return o.withDO(o.DO.Not(conds...))
}

func (o overtimeRequestFormDo) Or(conds ...gen.Condition) IOvertimeRequestFormDo {
	return o.withDO(o.DO.Or(conds...))
}

func (o overtimeRequestFormDo) Select(conds ...field.Expr) IOvertimeRequestFormDo {
	return o.withDO(o.DO.Select(conds...))
}

func (o overtimeRequestFormDo) Where(conds ...gen.Condition) IOvertimeRequestFormDo {
	return o.withDO(o.DO.Where(conds...))
}

func (o overtimeRequestFormDo) Order(conds ...field.Expr) IOvertimeRequestFormDo {
	return o.withDO(o.DO.Order(conds...))
}

func (o overtimeRequestFormDo) Distinct(cols ...field.Expr) IOvertimeRequestFormDo {
	return o.withDO(o.DO.Distinct(cols...))
}

func (o overtimeRequestFormDo) Omit(cols ...field.Expr) IOvertimeRequestFormDo {
	return o.withDO(o.DO.Omit(cols...))
}

func (o overtimeRequestFormDo) Join(table schema.Tabler, on ...field.Expr) IOvertimeRequestFormDo {
	return o.withDO(o.DO.Join(table, on...))
}

func (o overtimeRequestFormDo) LeftJoin(table schema.Tabler, on ...field.Expr) IOvertimeRequestFormDo {
	return o.withDO(o.DO.LeftJoin(table, on...))
}

func (o overtimeRequestFormDo) RightJoin(table schema.Tabler, on ...field.Expr) IOvertimeRequestFormDo {
	return o.withDO(o.DO.RightJoin(table, on...))
}

func (o overtimeRequestFormDo) Group(cols ...field.Expr) IOvertimeRequestFormDo {
	return o.withDO(o.DO.Group(cols...))
}

func (o overtimeRequestFormDo) Having(conds ...gen.Condition) IOvertimeRequestFormDo {
	return o.withDO(o.DO.Having(conds...))
}

func (o overtimeRequestFormDo) Limit(limit int) IOvertimeRequestFormDo {
	return o.withDO(o.DO.Limit(limit))
}

func (o overtimeRequestFormDo) Offset(offset int) IOvertimeRequestFormDo {
	return o.withDO(o.DO.Offset(offset))
}

func (o overtimeRequestFormDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IOvertimeRequestFormDo {
	return o.withDO(o.DO.Scopes(funcs...))
}

func (o overtimeRequestFormDo) Unscoped() IOvertimeRequestFormDo {
	return o.withDO(o.DO.Unscoped())
}

func (o overtimeRequestFormDo) Create(values ...*types.OvertimeRequestForm) error {
	if len(values) == 0 {
		return nil
	}
	return o.DO.Create(values)
}

func (o overtimeRequestFormDo) CreateInBatches(values []*types.OvertimeRequestForm, batchSize int) error {
	return o.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (o overtimeRequestFormDo) Save(values ...*types.OvertimeRequestForm) error {
	if len(values) == 0 {
		return nil
	}
	return o.DO.Save(values)
}

func (o overtimeRequestFormDo) First() (*types.OvertimeRequestForm, error) {
	if result, err := o.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*types.OvertimeRequestForm), nil
	}
}

func (o overtimeRequestFormDo) Take() (*types.OvertimeRequestForm, error) {
	if result, err := o.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*types.OvertimeRequestForm), nil
	}
}

func (o overtimeRequestFormDo) Last() (*types.OvertimeRequestForm, error) {
	if result, err := o.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*types.OvertimeRequestForm), nil
	}
}

func (o overtimeRequestFormDo) Find() ([]*types.OvertimeRequestForm, error) {
	result, err := o.DO.Find()
	return result.([]*types.OvertimeRequestForm), err
}

func (o overtimeRequestFormDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*types.OvertimeRequestForm, err error) {
	buf := make([]*types.OvertimeRequestForm, 0, batchSize)
	err = o.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (o overtimeRequestFormDo) FindInBatches(result *[]*types.OvertimeRequestForm, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return o.DO.FindInBatches(result, batchSize, fc)
}

func (o overtimeRequestFormDo) Attrs(attrs ...field.AssignExpr) IOvertimeRequestFormDo {
	return o.withDO(o.DO.Attrs(attrs...))
}

func (o overtimeRequestFormDo) Assign(attrs ...field.AssignExpr) IOvertimeRequestFormDo {
	return o.withDO(o.DO.Assign(attrs...))
}

func (o overtimeRequestFormDo) Joins(fields ...field.RelationField) IOvertimeRequestFormDo {
	for _, _f := range fields {
		o = *o.withDO(o.DO.Joins(_f))
	}
	return &o
}

func (o overtimeRequestFormDo) Preload(fields ...field.RelationField) IOvertimeRequestFormDo {
	for _, _f := range fields {
		o = *o.withDO(o.DO.Preload(_f))
	}
	return &o
}

func (o overtimeRequestFormDo) FirstOrInit() (*types.OvertimeRequestForm, error) {
	if result, err := o.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*types.OvertimeRequestForm), nil
	}
}

func (o overtimeRequestFormDo) FirstOrCreate() (*types.OvertimeRequestForm, error) {
	if result, err := o.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*types.OvertimeRequestForm), nil
	}
}

func (o overtimeRequestFormDo) FindByPage(offset int, limit int) (result []*types.OvertimeRequestForm, count int64, err error) {
	result, err = o.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = o.Offset(-1).Limit(-1).Count()
	return
}

func (o overtimeRequestFormDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = o.Count()
	if err != nil {
		return
	}

	err = o.Offset(offset).Limit(limit).Scan(result)
	return
}

func (o overtimeRequestFormDo) Scan(result interface{}) (err error) {
	return o.DO.Scan(result)
}

func (o overtimeRequestFormDo) Delete(models ...*types.OvertimeRequestForm) (result gen.ResultInfo, err error) {
	return o.DO.Delete(models)
}

func (o *overtimeRequestFormDo) withDO(do gen.Dao) *overtimeRequestFormDo {
	o.DO = *do.(*gen.DO)
	return o
}
