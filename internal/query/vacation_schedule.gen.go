// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"hrapi/internal/types"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"
)

func newVacationSchedule(db *gorm.DB, opts ...gen.DOOption) vacationSchedule {
	_vacationSchedule := vacationSchedule{}

	_vacationSchedule.vacationScheduleDo.UseDB(db, opts...)
	_vacationSchedule.vacationScheduleDo.UseModel(&types.VacationSchedule{})

	tableName := _vacationSchedule.vacationScheduleDo.TableName()
	_vacationSchedule.ALL = field.NewAsterisk(tableName)
	_vacationSchedule.ID = field.NewUint(tableName, "id")
	_vacationSchedule.CreatedAt = field.NewTime(tableName, "created_at")
	_vacationSchedule.UpdatedAt = field.NewTime(tableName, "updated_at")
	_vacationSchedule.DeletedAt = field.NewField(tableName, "deleted_at")
	_vacationSchedule.ScheduleDate = field.NewTime(tableName, "schedule_date")
	_vacationSchedule.GeneralKey = field.NewString(tableName, "general_key")
	_vacationSchedule.Remark = field.NewString(tableName, "remark")
	_vacationSchedule.VacationID = field.NewUint(tableName, "vacation_id")
	_vacationSchedule.StartDate = field.NewTime(tableName, "start_date")
	_vacationSchedule.EndDate = field.NewTime(tableName, "end_date")
	_vacationSchedule.Repeat = field.NewField(tableName, "repeat")
	_vacationSchedule.EndRepeat = field.NewTime(tableName, "end_repeat")
	_vacationSchedule.Vacation = vacationScheduleBelongsToVacation{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Vacation", "types.Vacation"),
		Schedule: struct {
			field.RelationField
			Vacation struct {
				field.RelationField
			}
		}{
			RelationField: field.NewRelation("Vacation.Schedule", "types.VacationSchedule"),
			Vacation: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("Vacation.Schedule.Vacation", "types.Vacation"),
			},
		},
		VacationGroup: struct {
			field.RelationField
			Vacation struct {
				field.RelationField
			}
			VacationGroupOvertimeRate struct {
				field.RelationField
				VacationGroup struct {
					field.RelationField
					Leave struct {
						field.RelationField
						LeaveGroup struct {
							field.RelationField
						}
					}
					LeaveGroupCondition struct {
						field.RelationField
						LeaveGroup struct {
							field.RelationField
						}
					}
					Employee struct {
						field.RelationField
						Department struct {
							field.RelationField
							Manager struct {
								field.RelationField
							}
						}
						LoginInformation struct {
							field.RelationField
							Employee struct {
								field.RelationField
							}
						}
						Roles struct {
							field.RelationField
							Employees struct {
								field.RelationField
							}
							Permissions struct {
								field.RelationField
								Roles struct {
									field.RelationField
								}
							}
							Menus struct {
								field.RelationField
								Roles struct {
									field.RelationField
								}
							}
						}
					}
				}
			}
			Employee struct {
				field.RelationField
			}
		}{
			RelationField: field.NewRelation("Vacation.VacationGroup", "types.VacationGroup"),
			Vacation: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("Vacation.VacationGroup.Vacation", "types.Vacation"),
			},
			VacationGroupOvertimeRate: struct {
				field.RelationField
				VacationGroup struct {
					field.RelationField
					Leave struct {
						field.RelationField
						LeaveGroup struct {
							field.RelationField
						}
					}
					LeaveGroupCondition struct {
						field.RelationField
						LeaveGroup struct {
							field.RelationField
						}
					}
					Employee struct {
						field.RelationField
						Department struct {
							field.RelationField
							Manager struct {
								field.RelationField
							}
						}
						LoginInformation struct {
							field.RelationField
							Employee struct {
								field.RelationField
							}
						}
						Roles struct {
							field.RelationField
							Employees struct {
								field.RelationField
							}
							Permissions struct {
								field.RelationField
								Roles struct {
									field.RelationField
								}
							}
							Menus struct {
								field.RelationField
								Roles struct {
									field.RelationField
								}
							}
						}
					}
				}
			}{
				RelationField: field.NewRelation("Vacation.VacationGroup.VacationGroupOvertimeRate", "types.VacationGroupOvertimeRate"),
				VacationGroup: struct {
					field.RelationField
					Leave struct {
						field.RelationField
						LeaveGroup struct {
							field.RelationField
						}
					}
					LeaveGroupCondition struct {
						field.RelationField
						LeaveGroup struct {
							field.RelationField
						}
					}
					Employee struct {
						field.RelationField
						Department struct {
							field.RelationField
							Manager struct {
								field.RelationField
							}
						}
						LoginInformation struct {
							field.RelationField
							Employee struct {
								field.RelationField
							}
						}
						Roles struct {
							field.RelationField
							Employees struct {
								field.RelationField
							}
							Permissions struct {
								field.RelationField
								Roles struct {
									field.RelationField
								}
							}
							Menus struct {
								field.RelationField
								Roles struct {
									field.RelationField
								}
							}
						}
					}
				}{
					RelationField: field.NewRelation("Vacation.VacationGroup.VacationGroupOvertimeRate.VacationGroup", "types.LeaveGroup"),
					Leave: struct {
						field.RelationField
						LeaveGroup struct {
							field.RelationField
						}
					}{
						RelationField: field.NewRelation("Vacation.VacationGroup.VacationGroupOvertimeRate.VacationGroup.Leave", "types.Leave"),
						LeaveGroup: struct {
							field.RelationField
						}{
							RelationField: field.NewRelation("Vacation.VacationGroup.VacationGroupOvertimeRate.VacationGroup.Leave.LeaveGroup", "types.LeaveGroup"),
						},
					},
					LeaveGroupCondition: struct {
						field.RelationField
						LeaveGroup struct {
							field.RelationField
						}
					}{
						RelationField: field.NewRelation("Vacation.VacationGroup.VacationGroupOvertimeRate.VacationGroup.LeaveGroupCondition", "types.LeaveGroupCondition"),
						LeaveGroup: struct {
							field.RelationField
						}{
							RelationField: field.NewRelation("Vacation.VacationGroup.VacationGroupOvertimeRate.VacationGroup.LeaveGroupCondition.LeaveGroup", "types.LeaveGroup"),
						},
					},
					Employee: struct {
						field.RelationField
						Department struct {
							field.RelationField
							Manager struct {
								field.RelationField
							}
						}
						LoginInformation struct {
							field.RelationField
							Employee struct {
								field.RelationField
							}
						}
						Roles struct {
							field.RelationField
							Employees struct {
								field.RelationField
							}
							Permissions struct {
								field.RelationField
								Roles struct {
									field.RelationField
								}
							}
							Menus struct {
								field.RelationField
								Roles struct {
									field.RelationField
								}
							}
						}
					}{
						RelationField: field.NewRelation("Vacation.VacationGroup.VacationGroupOvertimeRate.VacationGroup.Employee", "types.Employee"),
						Department: struct {
							field.RelationField
							Manager struct {
								field.RelationField
							}
						}{
							RelationField: field.NewRelation("Vacation.VacationGroup.VacationGroupOvertimeRate.VacationGroup.Employee.Department", "types.Department"),
							Manager: struct {
								field.RelationField
							}{
								RelationField: field.NewRelation("Vacation.VacationGroup.VacationGroupOvertimeRate.VacationGroup.Employee.Department.Manager", "types.Employee"),
							},
						},
						LoginInformation: struct {
							field.RelationField
							Employee struct {
								field.RelationField
							}
						}{
							RelationField: field.NewRelation("Vacation.VacationGroup.VacationGroupOvertimeRate.VacationGroup.Employee.LoginInformation", "types.LoginInformation"),
							Employee: struct {
								field.RelationField
							}{
								RelationField: field.NewRelation("Vacation.VacationGroup.VacationGroupOvertimeRate.VacationGroup.Employee.LoginInformation.Employee", "types.Employee"),
							},
						},
						Roles: struct {
							field.RelationField
							Employees struct {
								field.RelationField
							}
							Permissions struct {
								field.RelationField
								Roles struct {
									field.RelationField
								}
							}
							Menus struct {
								field.RelationField
								Roles struct {
									field.RelationField
								}
							}
						}{
							RelationField: field.NewRelation("Vacation.VacationGroup.VacationGroupOvertimeRate.VacationGroup.Employee.Roles", "types.Role"),
							Employees: struct {
								field.RelationField
							}{
								RelationField: field.NewRelation("Vacation.VacationGroup.VacationGroupOvertimeRate.VacationGroup.Employee.Roles.Employees", "types.Employee"),
							},
							Permissions: struct {
								field.RelationField
								Roles struct {
									field.RelationField
								}
							}{
								RelationField: field.NewRelation("Vacation.VacationGroup.VacationGroupOvertimeRate.VacationGroup.Employee.Roles.Permissions", "types.Permission"),
								Roles: struct {
									field.RelationField
								}{
									RelationField: field.NewRelation("Vacation.VacationGroup.VacationGroupOvertimeRate.VacationGroup.Employee.Roles.Permissions.Roles", "types.Role"),
								},
							},
							Menus: struct {
								field.RelationField
								Roles struct {
									field.RelationField
								}
							}{
								RelationField: field.NewRelation("Vacation.VacationGroup.VacationGroupOvertimeRate.VacationGroup.Employee.Roles.Menus", "types.Menu"),
								Roles: struct {
									field.RelationField
								}{
									RelationField: field.NewRelation("Vacation.VacationGroup.VacationGroupOvertimeRate.VacationGroup.Employee.Roles.Menus.Roles", "types.Role"),
								},
							},
						},
					},
				},
			},
			Employee: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("Vacation.VacationGroup.Employee", "types.Employee"),
			},
		},
	}

	_vacationSchedule.fillFieldMap()

	return _vacationSchedule
}

type vacationSchedule struct {
	vacationScheduleDo vacationScheduleDo

	ALL          field.Asterisk
	ID           field.Uint
	CreatedAt    field.Time
	UpdatedAt    field.Time
	DeletedAt    field.Field
	ScheduleDate field.Time
	GeneralKey   field.String
	Remark       field.String
	VacationID   field.Uint
	StartDate    field.Time
	EndDate      field.Time
	Repeat       field.Field
	EndRepeat    field.Time
	Vacation     vacationScheduleBelongsToVacation

	fieldMap map[string]field.Expr
}

func (v vacationSchedule) Table(newTableName string) *vacationSchedule {
	v.vacationScheduleDo.UseTable(newTableName)
	return v.updateTableName(newTableName)
}

func (v vacationSchedule) As(alias string) *vacationSchedule {
	v.vacationScheduleDo.DO = *(v.vacationScheduleDo.As(alias).(*gen.DO))
	return v.updateTableName(alias)
}

func (v *vacationSchedule) updateTableName(table string) *vacationSchedule {
	v.ALL = field.NewAsterisk(table)
	v.ID = field.NewUint(table, "id")
	v.CreatedAt = field.NewTime(table, "created_at")
	v.UpdatedAt = field.NewTime(table, "updated_at")
	v.DeletedAt = field.NewField(table, "deleted_at")
	v.ScheduleDate = field.NewTime(table, "schedule_date")
	v.GeneralKey = field.NewString(table, "general_key")
	v.Remark = field.NewString(table, "remark")
	v.VacationID = field.NewUint(table, "vacation_id")
	v.StartDate = field.NewTime(table, "start_date")
	v.EndDate = field.NewTime(table, "end_date")
	v.Repeat = field.NewField(table, "repeat")
	v.EndRepeat = field.NewTime(table, "end_repeat")

	v.fillFieldMap()

	return v
}

func (v *vacationSchedule) WithContext(ctx context.Context) IVacationScheduleDo {
	return v.vacationScheduleDo.WithContext(ctx)
}

func (v vacationSchedule) TableName() string { return v.vacationScheduleDo.TableName() }

func (v vacationSchedule) Alias() string { return v.vacationScheduleDo.Alias() }

func (v vacationSchedule) Columns(cols ...field.Expr) gen.Columns {
	return v.vacationScheduleDo.Columns(cols...)
}

func (v *vacationSchedule) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := v.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (v *vacationSchedule) fillFieldMap() {
	v.fieldMap = make(map[string]field.Expr, 13)
	v.fieldMap["id"] = v.ID
	v.fieldMap["created_at"] = v.CreatedAt
	v.fieldMap["updated_at"] = v.UpdatedAt
	v.fieldMap["deleted_at"] = v.DeletedAt
	v.fieldMap["schedule_date"] = v.ScheduleDate
	v.fieldMap["general_key"] = v.GeneralKey
	v.fieldMap["remark"] = v.Remark
	v.fieldMap["vacation_id"] = v.VacationID
	v.fieldMap["start_date"] = v.StartDate
	v.fieldMap["end_date"] = v.EndDate
	v.fieldMap["repeat"] = v.Repeat
	v.fieldMap["end_repeat"] = v.EndRepeat

}

func (v vacationSchedule) clone(db *gorm.DB) vacationSchedule {
	v.vacationScheduleDo.ReplaceConnPool(db.Statement.ConnPool)
	return v
}

func (v vacationSchedule) replaceDB(db *gorm.DB) vacationSchedule {
	v.vacationScheduleDo.ReplaceDB(db)
	return v
}

type vacationScheduleBelongsToVacation struct {
	db *gorm.DB

	field.RelationField

	Schedule struct {
		field.RelationField
		Vacation struct {
			field.RelationField
		}
	}
	VacationGroup struct {
		field.RelationField
		Vacation struct {
			field.RelationField
		}
		VacationGroupOvertimeRate struct {
			field.RelationField
			VacationGroup struct {
				field.RelationField
				Leave struct {
					field.RelationField
					LeaveGroup struct {
						field.RelationField
					}
				}
				LeaveGroupCondition struct {
					field.RelationField
					LeaveGroup struct {
						field.RelationField
					}
				}
				Employee struct {
					field.RelationField
					Department struct {
						field.RelationField
						Manager struct {
							field.RelationField
						}
					}
					LoginInformation struct {
						field.RelationField
						Employee struct {
							field.RelationField
						}
					}
					Roles struct {
						field.RelationField
						Employees struct {
							field.RelationField
						}
						Permissions struct {
							field.RelationField
							Roles struct {
								field.RelationField
							}
						}
						Menus struct {
							field.RelationField
							Roles struct {
								field.RelationField
							}
						}
					}
				}
			}
		}
		Employee struct {
			field.RelationField
		}
	}
}

func (a vacationScheduleBelongsToVacation) Where(conds ...field.Expr) *vacationScheduleBelongsToVacation {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a vacationScheduleBelongsToVacation) WithContext(ctx context.Context) *vacationScheduleBelongsToVacation {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a vacationScheduleBelongsToVacation) Session(session *gorm.Session) *vacationScheduleBelongsToVacation {
	a.db = a.db.Session(session)
	return &a
}

func (a vacationScheduleBelongsToVacation) Model(m *types.VacationSchedule) *vacationScheduleBelongsToVacationTx {
	return &vacationScheduleBelongsToVacationTx{a.db.Model(m).Association(a.Name())}
}

type vacationScheduleBelongsToVacationTx struct{ tx *gorm.Association }

func (a vacationScheduleBelongsToVacationTx) Find() (result *types.Vacation, err error) {
	return result, a.tx.Find(&result)
}

func (a vacationScheduleBelongsToVacationTx) Append(values ...*types.Vacation) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a vacationScheduleBelongsToVacationTx) Replace(values ...*types.Vacation) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a vacationScheduleBelongsToVacationTx) Delete(values ...*types.Vacation) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a vacationScheduleBelongsToVacationTx) Clear() error {
	return a.tx.Clear()
}

func (a vacationScheduleBelongsToVacationTx) Count() int64 {
	return a.tx.Count()
}

type vacationScheduleDo struct{ gen.DO }

type IVacationScheduleDo interface {
	gen.SubQuery
	Debug() IVacationScheduleDo
	WithContext(ctx context.Context) IVacationScheduleDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IVacationScheduleDo
	WriteDB() IVacationScheduleDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IVacationScheduleDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IVacationScheduleDo
	Not(conds ...gen.Condition) IVacationScheduleDo
	Or(conds ...gen.Condition) IVacationScheduleDo
	Select(conds ...field.Expr) IVacationScheduleDo
	Where(conds ...gen.Condition) IVacationScheduleDo
	Order(conds ...field.Expr) IVacationScheduleDo
	Distinct(cols ...field.Expr) IVacationScheduleDo
	Omit(cols ...field.Expr) IVacationScheduleDo
	Join(table schema.Tabler, on ...field.Expr) IVacationScheduleDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IVacationScheduleDo
	RightJoin(table schema.Tabler, on ...field.Expr) IVacationScheduleDo
	Group(cols ...field.Expr) IVacationScheduleDo
	Having(conds ...gen.Condition) IVacationScheduleDo
	Limit(limit int) IVacationScheduleDo
	Offset(offset int) IVacationScheduleDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IVacationScheduleDo
	Unscoped() IVacationScheduleDo
	Create(values ...*types.VacationSchedule) error
	CreateInBatches(values []*types.VacationSchedule, batchSize int) error
	Save(values ...*types.VacationSchedule) error
	First() (*types.VacationSchedule, error)
	Take() (*types.VacationSchedule, error)
	Last() (*types.VacationSchedule, error)
	Find() ([]*types.VacationSchedule, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*types.VacationSchedule, err error)
	FindInBatches(result *[]*types.VacationSchedule, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*types.VacationSchedule) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IVacationScheduleDo
	Assign(attrs ...field.AssignExpr) IVacationScheduleDo
	Joins(fields ...field.RelationField) IVacationScheduleDo
	Preload(fields ...field.RelationField) IVacationScheduleDo
	FirstOrInit() (*types.VacationSchedule, error)
	FirstOrCreate() (*types.VacationSchedule, error)
	FindByPage(offset int, limit int) (result []*types.VacationSchedule, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IVacationScheduleDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (v vacationScheduleDo) Debug() IVacationScheduleDo {
	return v.withDO(v.DO.Debug())
}

func (v vacationScheduleDo) WithContext(ctx context.Context) IVacationScheduleDo {
	return v.withDO(v.DO.WithContext(ctx))
}

func (v vacationScheduleDo) ReadDB() IVacationScheduleDo {
	return v.Clauses(dbresolver.Read)
}

func (v vacationScheduleDo) WriteDB() IVacationScheduleDo {
	return v.Clauses(dbresolver.Write)
}

func (v vacationScheduleDo) Session(config *gorm.Session) IVacationScheduleDo {
	return v.withDO(v.DO.Session(config))
}

func (v vacationScheduleDo) Clauses(conds ...clause.Expression) IVacationScheduleDo {
	return v.withDO(v.DO.Clauses(conds...))
}

func (v vacationScheduleDo) Returning(value interface{}, columns ...string) IVacationScheduleDo {
	return v.withDO(v.DO.Returning(value, columns...))
}

func (v vacationScheduleDo) Not(conds ...gen.Condition) IVacationScheduleDo {
	return v.withDO(v.DO.Not(conds...))
}

func (v vacationScheduleDo) Or(conds ...gen.Condition) IVacationScheduleDo {
	return v.withDO(v.DO.Or(conds...))
}

func (v vacationScheduleDo) Select(conds ...field.Expr) IVacationScheduleDo {
	return v.withDO(v.DO.Select(conds...))
}

func (v vacationScheduleDo) Where(conds ...gen.Condition) IVacationScheduleDo {
	return v.withDO(v.DO.Where(conds...))
}

func (v vacationScheduleDo) Order(conds ...field.Expr) IVacationScheduleDo {
	return v.withDO(v.DO.Order(conds...))
}

func (v vacationScheduleDo) Distinct(cols ...field.Expr) IVacationScheduleDo {
	return v.withDO(v.DO.Distinct(cols...))
}

func (v vacationScheduleDo) Omit(cols ...field.Expr) IVacationScheduleDo {
	return v.withDO(v.DO.Omit(cols...))
}

func (v vacationScheduleDo) Join(table schema.Tabler, on ...field.Expr) IVacationScheduleDo {
	return v.withDO(v.DO.Join(table, on...))
}

func (v vacationScheduleDo) LeftJoin(table schema.Tabler, on ...field.Expr) IVacationScheduleDo {
	return v.withDO(v.DO.LeftJoin(table, on...))
}

func (v vacationScheduleDo) RightJoin(table schema.Tabler, on ...field.Expr) IVacationScheduleDo {
	return v.withDO(v.DO.RightJoin(table, on...))
}

func (v vacationScheduleDo) Group(cols ...field.Expr) IVacationScheduleDo {
	return v.withDO(v.DO.Group(cols...))
}

func (v vacationScheduleDo) Having(conds ...gen.Condition) IVacationScheduleDo {
	return v.withDO(v.DO.Having(conds...))
}

func (v vacationScheduleDo) Limit(limit int) IVacationScheduleDo {
	return v.withDO(v.DO.Limit(limit))
}

func (v vacationScheduleDo) Offset(offset int) IVacationScheduleDo {
	return v.withDO(v.DO.Offset(offset))
}

func (v vacationScheduleDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IVacationScheduleDo {
	return v.withDO(v.DO.Scopes(funcs...))
}

func (v vacationScheduleDo) Unscoped() IVacationScheduleDo {
	return v.withDO(v.DO.Unscoped())
}

func (v vacationScheduleDo) Create(values ...*types.VacationSchedule) error {
	if len(values) == 0 {
		return nil
	}
	return v.DO.Create(values)
}

func (v vacationScheduleDo) CreateInBatches(values []*types.VacationSchedule, batchSize int) error {
	return v.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (v vacationScheduleDo) Save(values ...*types.VacationSchedule) error {
	if len(values) == 0 {
		return nil
	}
	return v.DO.Save(values)
}

func (v vacationScheduleDo) First() (*types.VacationSchedule, error) {
	if result, err := v.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*types.VacationSchedule), nil
	}
}

func (v vacationScheduleDo) Take() (*types.VacationSchedule, error) {
	if result, err := v.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*types.VacationSchedule), nil
	}
}

func (v vacationScheduleDo) Last() (*types.VacationSchedule, error) {
	if result, err := v.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*types.VacationSchedule), nil
	}
}

func (v vacationScheduleDo) Find() ([]*types.VacationSchedule, error) {
	result, err := v.DO.Find()
	return result.([]*types.VacationSchedule), err
}

func (v vacationScheduleDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*types.VacationSchedule, err error) {
	buf := make([]*types.VacationSchedule, 0, batchSize)
	err = v.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (v vacationScheduleDo) FindInBatches(result *[]*types.VacationSchedule, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return v.DO.FindInBatches(result, batchSize, fc)
}

func (v vacationScheduleDo) Attrs(attrs ...field.AssignExpr) IVacationScheduleDo {
	return v.withDO(v.DO.Attrs(attrs...))
}

func (v vacationScheduleDo) Assign(attrs ...field.AssignExpr) IVacationScheduleDo {
	return v.withDO(v.DO.Assign(attrs...))
}

func (v vacationScheduleDo) Joins(fields ...field.RelationField) IVacationScheduleDo {
	for _, _f := range fields {
		v = *v.withDO(v.DO.Joins(_f))
	}
	return &v
}

func (v vacationScheduleDo) Preload(fields ...field.RelationField) IVacationScheduleDo {
	for _, _f := range fields {
		v = *v.withDO(v.DO.Preload(_f))
	}
	return &v
}

func (v vacationScheduleDo) FirstOrInit() (*types.VacationSchedule, error) {
	if result, err := v.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*types.VacationSchedule), nil
	}
}

func (v vacationScheduleDo) FirstOrCreate() (*types.VacationSchedule, error) {
	if result, err := v.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*types.VacationSchedule), nil
	}
}

func (v vacationScheduleDo) FindByPage(offset int, limit int) (result []*types.VacationSchedule, count int64, err error) {
	result, err = v.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = v.Offset(-1).Limit(-1).Count()
	return
}

func (v vacationScheduleDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = v.Count()
	if err != nil {
		return
	}

	err = v.Offset(offset).Limit(limit).Scan(result)
	return
}

func (v vacationScheduleDo) Scan(result interface{}) (err error) {
	return v.DO.Scan(result)
}

func (v vacationScheduleDo) Delete(models ...*types.VacationSchedule) (result gen.ResultInfo, err error) {
	return v.DO.Delete(models)
}

func (v *vacationScheduleDo) withDO(do gen.Dao) *vacationScheduleDo {
	v.DO = *do.(*gen.DO)
	return v
}
