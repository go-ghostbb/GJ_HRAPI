// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"hrapi/internal/types"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"
)

func newLeaveRequestForm(db *gorm.DB, opts ...gen.DOOption) leaveRequestForm {
	_leaveRequestForm := leaveRequestForm{}

	_leaveRequestForm.leaveRequestFormDo.UseDB(db, opts...)
	_leaveRequestForm.leaveRequestFormDo.UseModel(&types.LeaveRequestForm{})

	tableName := _leaveRequestForm.leaveRequestFormDo.TableName()
	_leaveRequestForm.ALL = field.NewAsterisk(tableName)
	_leaveRequestForm.ID = field.NewUint(tableName, "id")
	_leaveRequestForm.CreatedAt = field.NewTime(tableName, "created_at")
	_leaveRequestForm.UpdatedAt = field.NewTime(tableName, "updated_at")
	_leaveRequestForm.DeletedAt = field.NewField(tableName, "deleted_at")
	_leaveRequestForm.Order = field.NewString(tableName, "order")
	_leaveRequestForm.StartDate = field.NewField(tableName, "start_date")
	_leaveRequestForm.StartTime = field.NewField(tableName, "start_time")
	_leaveRequestForm.EndDate = field.NewField(tableName, "end_date")
	_leaveRequestForm.EndTime = field.NewField(tableName, "end_time")
	_leaveRequestForm.Remark = field.NewString(tableName, "remark")
	_leaveRequestForm.SignStatus = field.NewField(tableName, "sign_status")
	_leaveRequestForm.LeaveMinuteCount = field.NewFloat32(tableName, "leave_minute_count")
	_leaveRequestForm.LeaveHourCount = field.NewFloat32(tableName, "leave_hour_count")
	_leaveRequestForm.LeaveDayCount = field.NewFloat32(tableName, "leave_day_count")
	_leaveRequestForm.IsDefer = field.NewBool(tableName, "is_defer")
	_leaveRequestForm.Attach = field.NewString(tableName, "attach")
	_leaveRequestForm.LeaveID = field.NewUint(tableName, "leave_id")
	_leaveRequestForm.EmployeeID = field.NewUint(tableName, "employee_id")
	_leaveRequestForm.DepartmentID = field.NewUint(tableName, "department_id")
	_leaveRequestForm.ProxyEmployeeID = field.NewUint(tableName, "proxy_employee_id")
	_leaveRequestForm.ProxyDepartmentID = field.NewUint(tableName, "proxy_department_id")
	_leaveRequestForm.SignOffFlow = leaveRequestFormHasManySignOffFlow{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("SignOffFlow", "types.LeaveSignOffFlow"),
		LeaveRequestForm: struct {
			field.RelationField
			Leave struct {
				field.RelationField
				LeaveGroup struct {
					field.RelationField
					Leave struct {
						field.RelationField
					}
					LeaveGroupCondition struct {
						field.RelationField
						LeaveGroup struct {
							field.RelationField
						}
					}
					Employee struct {
						field.RelationField
						Department struct {
							field.RelationField
							Manager struct {
								field.RelationField
							}
						}
						Rank struct {
							field.RelationField
							Grade struct {
								field.RelationField
								Rank struct {
									field.RelationField
								}
							}
						}
						Grade struct {
							field.RelationField
						}
						LoginInformation struct {
							field.RelationField
							Employee struct {
								field.RelationField
							}
						}
						Roles struct {
							field.RelationField
							Employees struct {
								field.RelationField
							}
							Permissions struct {
								field.RelationField
								Roles struct {
									field.RelationField
								}
							}
							Menus struct {
								field.RelationField
								Roles struct {
									field.RelationField
								}
							}
						}
					}
				}
			}
			Employee struct {
				field.RelationField
			}
			Department struct {
				field.RelationField
			}
			ProxyEmployee struct {
				field.RelationField
			}
			ProxyDepartment struct {
				field.RelationField
			}
			SignOffFlow struct {
				field.RelationField
			}
		}{
			RelationField: field.NewRelation("SignOffFlow.LeaveRequestForm", "types.LeaveRequestForm"),
			Leave: struct {
				field.RelationField
				LeaveGroup struct {
					field.RelationField
					Leave struct {
						field.RelationField
					}
					LeaveGroupCondition struct {
						field.RelationField
						LeaveGroup struct {
							field.RelationField
						}
					}
					Employee struct {
						field.RelationField
						Department struct {
							field.RelationField
							Manager struct {
								field.RelationField
							}
						}
						Rank struct {
							field.RelationField
							Grade struct {
								field.RelationField
								Rank struct {
									field.RelationField
								}
							}
						}
						Grade struct {
							field.RelationField
						}
						LoginInformation struct {
							field.RelationField
							Employee struct {
								field.RelationField
							}
						}
						Roles struct {
							field.RelationField
							Employees struct {
								field.RelationField
							}
							Permissions struct {
								field.RelationField
								Roles struct {
									field.RelationField
								}
							}
							Menus struct {
								field.RelationField
								Roles struct {
									field.RelationField
								}
							}
						}
					}
				}
			}{
				RelationField: field.NewRelation("SignOffFlow.LeaveRequestForm.Leave", "types.Leave"),
				LeaveGroup: struct {
					field.RelationField
					Leave struct {
						field.RelationField
					}
					LeaveGroupCondition struct {
						field.RelationField
						LeaveGroup struct {
							field.RelationField
						}
					}
					Employee struct {
						field.RelationField
						Department struct {
							field.RelationField
							Manager struct {
								field.RelationField
							}
						}
						Rank struct {
							field.RelationField
							Grade struct {
								field.RelationField
								Rank struct {
									field.RelationField
								}
							}
						}
						Grade struct {
							field.RelationField
						}
						LoginInformation struct {
							field.RelationField
							Employee struct {
								field.RelationField
							}
						}
						Roles struct {
							field.RelationField
							Employees struct {
								field.RelationField
							}
							Permissions struct {
								field.RelationField
								Roles struct {
									field.RelationField
								}
							}
							Menus struct {
								field.RelationField
								Roles struct {
									field.RelationField
								}
							}
						}
					}
				}{
					RelationField: field.NewRelation("SignOffFlow.LeaveRequestForm.Leave.LeaveGroup", "types.LeaveGroup"),
					Leave: struct {
						field.RelationField
					}{
						RelationField: field.NewRelation("SignOffFlow.LeaveRequestForm.Leave.LeaveGroup.Leave", "types.Leave"),
					},
					LeaveGroupCondition: struct {
						field.RelationField
						LeaveGroup struct {
							field.RelationField
						}
					}{
						RelationField: field.NewRelation("SignOffFlow.LeaveRequestForm.Leave.LeaveGroup.LeaveGroupCondition", "types.LeaveGroupCondition"),
						LeaveGroup: struct {
							field.RelationField
						}{
							RelationField: field.NewRelation("SignOffFlow.LeaveRequestForm.Leave.LeaveGroup.LeaveGroupCondition.LeaveGroup", "types.LeaveGroup"),
						},
					},
					Employee: struct {
						field.RelationField
						Department struct {
							field.RelationField
							Manager struct {
								field.RelationField
							}
						}
						Rank struct {
							field.RelationField
							Grade struct {
								field.RelationField
								Rank struct {
									field.RelationField
								}
							}
						}
						Grade struct {
							field.RelationField
						}
						LoginInformation struct {
							field.RelationField
							Employee struct {
								field.RelationField
							}
						}
						Roles struct {
							field.RelationField
							Employees struct {
								field.RelationField
							}
							Permissions struct {
								field.RelationField
								Roles struct {
									field.RelationField
								}
							}
							Menus struct {
								field.RelationField
								Roles struct {
									field.RelationField
								}
							}
						}
					}{
						RelationField: field.NewRelation("SignOffFlow.LeaveRequestForm.Leave.LeaveGroup.Employee", "types.Employee"),
						Department: struct {
							field.RelationField
							Manager struct {
								field.RelationField
							}
						}{
							RelationField: field.NewRelation("SignOffFlow.LeaveRequestForm.Leave.LeaveGroup.Employee.Department", "types.Department"),
							Manager: struct {
								field.RelationField
							}{
								RelationField: field.NewRelation("SignOffFlow.LeaveRequestForm.Leave.LeaveGroup.Employee.Department.Manager", "types.Employee"),
							},
						},
						Rank: struct {
							field.RelationField
							Grade struct {
								field.RelationField
								Rank struct {
									field.RelationField
								}
							}
						}{
							RelationField: field.NewRelation("SignOffFlow.LeaveRequestForm.Leave.LeaveGroup.Employee.Rank", "types.PositionRank"),
							Grade: struct {
								field.RelationField
								Rank struct {
									field.RelationField
								}
							}{
								RelationField: field.NewRelation("SignOffFlow.LeaveRequestForm.Leave.LeaveGroup.Employee.Rank.Grade", "types.PositionGrade"),
								Rank: struct {
									field.RelationField
								}{
									RelationField: field.NewRelation("SignOffFlow.LeaveRequestForm.Leave.LeaveGroup.Employee.Rank.Grade.Rank", "types.PositionRank"),
								},
							},
						},
						Grade: struct {
							field.RelationField
						}{
							RelationField: field.NewRelation("SignOffFlow.LeaveRequestForm.Leave.LeaveGroup.Employee.Grade", "types.PositionGrade"),
						},
						LoginInformation: struct {
							field.RelationField
							Employee struct {
								field.RelationField
							}
						}{
							RelationField: field.NewRelation("SignOffFlow.LeaveRequestForm.Leave.LeaveGroup.Employee.LoginInformation", "types.LoginInformation"),
							Employee: struct {
								field.RelationField
							}{
								RelationField: field.NewRelation("SignOffFlow.LeaveRequestForm.Leave.LeaveGroup.Employee.LoginInformation.Employee", "types.Employee"),
							},
						},
						Roles: struct {
							field.RelationField
							Employees struct {
								field.RelationField
							}
							Permissions struct {
								field.RelationField
								Roles struct {
									field.RelationField
								}
							}
							Menus struct {
								field.RelationField
								Roles struct {
									field.RelationField
								}
							}
						}{
							RelationField: field.NewRelation("SignOffFlow.LeaveRequestForm.Leave.LeaveGroup.Employee.Roles", "types.Role"),
							Employees: struct {
								field.RelationField
							}{
								RelationField: field.NewRelation("SignOffFlow.LeaveRequestForm.Leave.LeaveGroup.Employee.Roles.Employees", "types.Employee"),
							},
							Permissions: struct {
								field.RelationField
								Roles struct {
									field.RelationField
								}
							}{
								RelationField: field.NewRelation("SignOffFlow.LeaveRequestForm.Leave.LeaveGroup.Employee.Roles.Permissions", "types.Permission"),
								Roles: struct {
									field.RelationField
								}{
									RelationField: field.NewRelation("SignOffFlow.LeaveRequestForm.Leave.LeaveGroup.Employee.Roles.Permissions.Roles", "types.Role"),
								},
							},
							Menus: struct {
								field.RelationField
								Roles struct {
									field.RelationField
								}
							}{
								RelationField: field.NewRelation("SignOffFlow.LeaveRequestForm.Leave.LeaveGroup.Employee.Roles.Menus", "types.Menu"),
								Roles: struct {
									field.RelationField
								}{
									RelationField: field.NewRelation("SignOffFlow.LeaveRequestForm.Leave.LeaveGroup.Employee.Roles.Menus.Roles", "types.Role"),
								},
							},
						},
					},
				},
			},
			Employee: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("SignOffFlow.LeaveRequestForm.Employee", "types.Employee"),
			},
			Department: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("SignOffFlow.LeaveRequestForm.Department", "types.Department"),
			},
			ProxyEmployee: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("SignOffFlow.LeaveRequestForm.ProxyEmployee", "types.Employee"),
			},
			ProxyDepartment: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("SignOffFlow.LeaveRequestForm.ProxyDepartment", "types.Department"),
			},
			SignOffFlow: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("SignOffFlow.LeaveRequestForm.SignOffFlow", "types.LeaveSignOffFlow"),
			},
		},
		SignOffEmployee: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("SignOffFlow.SignOffEmployee", "types.Employee"),
		},
	}

	_leaveRequestForm.Leave = leaveRequestFormBelongsToLeave{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Leave", "types.Leave"),
	}

	_leaveRequestForm.Employee = leaveRequestFormBelongsToEmployee{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Employee", "types.Employee"),
	}

	_leaveRequestForm.Department = leaveRequestFormBelongsToDepartment{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Department", "types.Department"),
	}

	_leaveRequestForm.ProxyEmployee = leaveRequestFormBelongsToProxyEmployee{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("ProxyEmployee", "types.Employee"),
	}

	_leaveRequestForm.ProxyDepartment = leaveRequestFormBelongsToProxyDepartment{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("ProxyDepartment", "types.Department"),
	}

	_leaveRequestForm.fillFieldMap()

	return _leaveRequestForm
}

type leaveRequestForm struct {
	leaveRequestFormDo leaveRequestFormDo

	ALL               field.Asterisk
	ID                field.Uint
	CreatedAt         field.Time
	UpdatedAt         field.Time
	DeletedAt         field.Field
	Order             field.String
	StartDate         field.Field
	StartTime         field.Field
	EndDate           field.Field
	EndTime           field.Field
	Remark            field.String
	SignStatus        field.Field
	LeaveMinuteCount  field.Float32
	LeaveHourCount    field.Float32
	LeaveDayCount     field.Float32
	IsDefer           field.Bool
	Attach            field.String
	LeaveID           field.Uint
	EmployeeID        field.Uint
	DepartmentID      field.Uint
	ProxyEmployeeID   field.Uint
	ProxyDepartmentID field.Uint
	SignOffFlow       leaveRequestFormHasManySignOffFlow

	Leave leaveRequestFormBelongsToLeave

	Employee leaveRequestFormBelongsToEmployee

	Department leaveRequestFormBelongsToDepartment

	ProxyEmployee leaveRequestFormBelongsToProxyEmployee

	ProxyDepartment leaveRequestFormBelongsToProxyDepartment

	fieldMap map[string]field.Expr
}

func (l leaveRequestForm) Table(newTableName string) *leaveRequestForm {
	l.leaveRequestFormDo.UseTable(newTableName)
	return l.updateTableName(newTableName)
}

func (l leaveRequestForm) As(alias string) *leaveRequestForm {
	l.leaveRequestFormDo.DO = *(l.leaveRequestFormDo.As(alias).(*gen.DO))
	return l.updateTableName(alias)
}

func (l *leaveRequestForm) updateTableName(table string) *leaveRequestForm {
	l.ALL = field.NewAsterisk(table)
	l.ID = field.NewUint(table, "id")
	l.CreatedAt = field.NewTime(table, "created_at")
	l.UpdatedAt = field.NewTime(table, "updated_at")
	l.DeletedAt = field.NewField(table, "deleted_at")
	l.Order = field.NewString(table, "order")
	l.StartDate = field.NewField(table, "start_date")
	l.StartTime = field.NewField(table, "start_time")
	l.EndDate = field.NewField(table, "end_date")
	l.EndTime = field.NewField(table, "end_time")
	l.Remark = field.NewString(table, "remark")
	l.SignStatus = field.NewField(table, "sign_status")
	l.LeaveMinuteCount = field.NewFloat32(table, "leave_minute_count")
	l.LeaveHourCount = field.NewFloat32(table, "leave_hour_count")
	l.LeaveDayCount = field.NewFloat32(table, "leave_day_count")
	l.IsDefer = field.NewBool(table, "is_defer")
	l.Attach = field.NewString(table, "attach")
	l.LeaveID = field.NewUint(table, "leave_id")
	l.EmployeeID = field.NewUint(table, "employee_id")
	l.DepartmentID = field.NewUint(table, "department_id")
	l.ProxyEmployeeID = field.NewUint(table, "proxy_employee_id")
	l.ProxyDepartmentID = field.NewUint(table, "proxy_department_id")

	l.fillFieldMap()

	return l
}

func (l *leaveRequestForm) WithContext(ctx context.Context) ILeaveRequestFormDo {
	return l.leaveRequestFormDo.WithContext(ctx)
}

func (l leaveRequestForm) TableName() string { return l.leaveRequestFormDo.TableName() }

func (l leaveRequestForm) Alias() string { return l.leaveRequestFormDo.Alias() }

func (l leaveRequestForm) Columns(cols ...field.Expr) gen.Columns {
	return l.leaveRequestFormDo.Columns(cols...)
}

func (l *leaveRequestForm) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := l.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (l *leaveRequestForm) fillFieldMap() {
	l.fieldMap = make(map[string]field.Expr, 27)
	l.fieldMap["id"] = l.ID
	l.fieldMap["created_at"] = l.CreatedAt
	l.fieldMap["updated_at"] = l.UpdatedAt
	l.fieldMap["deleted_at"] = l.DeletedAt
	l.fieldMap["order"] = l.Order
	l.fieldMap["start_date"] = l.StartDate
	l.fieldMap["start_time"] = l.StartTime
	l.fieldMap["end_date"] = l.EndDate
	l.fieldMap["end_time"] = l.EndTime
	l.fieldMap["remark"] = l.Remark
	l.fieldMap["sign_status"] = l.SignStatus
	l.fieldMap["leave_minute_count"] = l.LeaveMinuteCount
	l.fieldMap["leave_hour_count"] = l.LeaveHourCount
	l.fieldMap["leave_day_count"] = l.LeaveDayCount
	l.fieldMap["is_defer"] = l.IsDefer
	l.fieldMap["attach"] = l.Attach
	l.fieldMap["leave_id"] = l.LeaveID
	l.fieldMap["employee_id"] = l.EmployeeID
	l.fieldMap["department_id"] = l.DepartmentID
	l.fieldMap["proxy_employee_id"] = l.ProxyEmployeeID
	l.fieldMap["proxy_department_id"] = l.ProxyDepartmentID

}

func (l leaveRequestForm) clone(db *gorm.DB) leaveRequestForm {
	l.leaveRequestFormDo.ReplaceConnPool(db.Statement.ConnPool)
	return l
}

func (l leaveRequestForm) replaceDB(db *gorm.DB) leaveRequestForm {
	l.leaveRequestFormDo.ReplaceDB(db)
	return l
}

type leaveRequestFormHasManySignOffFlow struct {
	db *gorm.DB

	field.RelationField

	LeaveRequestForm struct {
		field.RelationField
		Leave struct {
			field.RelationField
			LeaveGroup struct {
				field.RelationField
				Leave struct {
					field.RelationField
				}
				LeaveGroupCondition struct {
					field.RelationField
					LeaveGroup struct {
						field.RelationField
					}
				}
				Employee struct {
					field.RelationField
					Department struct {
						field.RelationField
						Manager struct {
							field.RelationField
						}
					}
					Rank struct {
						field.RelationField
						Grade struct {
							field.RelationField
							Rank struct {
								field.RelationField
							}
						}
					}
					Grade struct {
						field.RelationField
					}
					LoginInformation struct {
						field.RelationField
						Employee struct {
							field.RelationField
						}
					}
					Roles struct {
						field.RelationField
						Employees struct {
							field.RelationField
						}
						Permissions struct {
							field.RelationField
							Roles struct {
								field.RelationField
							}
						}
						Menus struct {
							field.RelationField
							Roles struct {
								field.RelationField
							}
						}
					}
				}
			}
		}
		Employee struct {
			field.RelationField
		}
		Department struct {
			field.RelationField
		}
		ProxyEmployee struct {
			field.RelationField
		}
		ProxyDepartment struct {
			field.RelationField
		}
		SignOffFlow struct {
			field.RelationField
		}
	}
	SignOffEmployee struct {
		field.RelationField
	}
}

func (a leaveRequestFormHasManySignOffFlow) Where(conds ...field.Expr) *leaveRequestFormHasManySignOffFlow {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a leaveRequestFormHasManySignOffFlow) WithContext(ctx context.Context) *leaveRequestFormHasManySignOffFlow {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a leaveRequestFormHasManySignOffFlow) Session(session *gorm.Session) *leaveRequestFormHasManySignOffFlow {
	a.db = a.db.Session(session)
	return &a
}

func (a leaveRequestFormHasManySignOffFlow) Model(m *types.LeaveRequestForm) *leaveRequestFormHasManySignOffFlowTx {
	return &leaveRequestFormHasManySignOffFlowTx{a.db.Model(m).Association(a.Name())}
}

type leaveRequestFormHasManySignOffFlowTx struct{ tx *gorm.Association }

func (a leaveRequestFormHasManySignOffFlowTx) Find() (result []*types.LeaveSignOffFlow, err error) {
	return result, a.tx.Find(&result)
}

func (a leaveRequestFormHasManySignOffFlowTx) Append(values ...*types.LeaveSignOffFlow) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a leaveRequestFormHasManySignOffFlowTx) Replace(values ...*types.LeaveSignOffFlow) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a leaveRequestFormHasManySignOffFlowTx) Delete(values ...*types.LeaveSignOffFlow) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a leaveRequestFormHasManySignOffFlowTx) Clear() error {
	return a.tx.Clear()
}

func (a leaveRequestFormHasManySignOffFlowTx) Count() int64 {
	return a.tx.Count()
}

type leaveRequestFormBelongsToLeave struct {
	db *gorm.DB

	field.RelationField
}

func (a leaveRequestFormBelongsToLeave) Where(conds ...field.Expr) *leaveRequestFormBelongsToLeave {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a leaveRequestFormBelongsToLeave) WithContext(ctx context.Context) *leaveRequestFormBelongsToLeave {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a leaveRequestFormBelongsToLeave) Session(session *gorm.Session) *leaveRequestFormBelongsToLeave {
	a.db = a.db.Session(session)
	return &a
}

func (a leaveRequestFormBelongsToLeave) Model(m *types.LeaveRequestForm) *leaveRequestFormBelongsToLeaveTx {
	return &leaveRequestFormBelongsToLeaveTx{a.db.Model(m).Association(a.Name())}
}

type leaveRequestFormBelongsToLeaveTx struct{ tx *gorm.Association }

func (a leaveRequestFormBelongsToLeaveTx) Find() (result *types.Leave, err error) {
	return result, a.tx.Find(&result)
}

func (a leaveRequestFormBelongsToLeaveTx) Append(values ...*types.Leave) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a leaveRequestFormBelongsToLeaveTx) Replace(values ...*types.Leave) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a leaveRequestFormBelongsToLeaveTx) Delete(values ...*types.Leave) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a leaveRequestFormBelongsToLeaveTx) Clear() error {
	return a.tx.Clear()
}

func (a leaveRequestFormBelongsToLeaveTx) Count() int64 {
	return a.tx.Count()
}

type leaveRequestFormBelongsToEmployee struct {
	db *gorm.DB

	field.RelationField
}

func (a leaveRequestFormBelongsToEmployee) Where(conds ...field.Expr) *leaveRequestFormBelongsToEmployee {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a leaveRequestFormBelongsToEmployee) WithContext(ctx context.Context) *leaveRequestFormBelongsToEmployee {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a leaveRequestFormBelongsToEmployee) Session(session *gorm.Session) *leaveRequestFormBelongsToEmployee {
	a.db = a.db.Session(session)
	return &a
}

func (a leaveRequestFormBelongsToEmployee) Model(m *types.LeaveRequestForm) *leaveRequestFormBelongsToEmployeeTx {
	return &leaveRequestFormBelongsToEmployeeTx{a.db.Model(m).Association(a.Name())}
}

type leaveRequestFormBelongsToEmployeeTx struct{ tx *gorm.Association }

func (a leaveRequestFormBelongsToEmployeeTx) Find() (result *types.Employee, err error) {
	return result, a.tx.Find(&result)
}

func (a leaveRequestFormBelongsToEmployeeTx) Append(values ...*types.Employee) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a leaveRequestFormBelongsToEmployeeTx) Replace(values ...*types.Employee) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a leaveRequestFormBelongsToEmployeeTx) Delete(values ...*types.Employee) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a leaveRequestFormBelongsToEmployeeTx) Clear() error {
	return a.tx.Clear()
}

func (a leaveRequestFormBelongsToEmployeeTx) Count() int64 {
	return a.tx.Count()
}

type leaveRequestFormBelongsToDepartment struct {
	db *gorm.DB

	field.RelationField
}

func (a leaveRequestFormBelongsToDepartment) Where(conds ...field.Expr) *leaveRequestFormBelongsToDepartment {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a leaveRequestFormBelongsToDepartment) WithContext(ctx context.Context) *leaveRequestFormBelongsToDepartment {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a leaveRequestFormBelongsToDepartment) Session(session *gorm.Session) *leaveRequestFormBelongsToDepartment {
	a.db = a.db.Session(session)
	return &a
}

func (a leaveRequestFormBelongsToDepartment) Model(m *types.LeaveRequestForm) *leaveRequestFormBelongsToDepartmentTx {
	return &leaveRequestFormBelongsToDepartmentTx{a.db.Model(m).Association(a.Name())}
}

type leaveRequestFormBelongsToDepartmentTx struct{ tx *gorm.Association }

func (a leaveRequestFormBelongsToDepartmentTx) Find() (result *types.Department, err error) {
	return result, a.tx.Find(&result)
}

func (a leaveRequestFormBelongsToDepartmentTx) Append(values ...*types.Department) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a leaveRequestFormBelongsToDepartmentTx) Replace(values ...*types.Department) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a leaveRequestFormBelongsToDepartmentTx) Delete(values ...*types.Department) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a leaveRequestFormBelongsToDepartmentTx) Clear() error {
	return a.tx.Clear()
}

func (a leaveRequestFormBelongsToDepartmentTx) Count() int64 {
	return a.tx.Count()
}

type leaveRequestFormBelongsToProxyEmployee struct {
	db *gorm.DB

	field.RelationField
}

func (a leaveRequestFormBelongsToProxyEmployee) Where(conds ...field.Expr) *leaveRequestFormBelongsToProxyEmployee {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a leaveRequestFormBelongsToProxyEmployee) WithContext(ctx context.Context) *leaveRequestFormBelongsToProxyEmployee {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a leaveRequestFormBelongsToProxyEmployee) Session(session *gorm.Session) *leaveRequestFormBelongsToProxyEmployee {
	a.db = a.db.Session(session)
	return &a
}

func (a leaveRequestFormBelongsToProxyEmployee) Model(m *types.LeaveRequestForm) *leaveRequestFormBelongsToProxyEmployeeTx {
	return &leaveRequestFormBelongsToProxyEmployeeTx{a.db.Model(m).Association(a.Name())}
}

type leaveRequestFormBelongsToProxyEmployeeTx struct{ tx *gorm.Association }

func (a leaveRequestFormBelongsToProxyEmployeeTx) Find() (result *types.Employee, err error) {
	return result, a.tx.Find(&result)
}

func (a leaveRequestFormBelongsToProxyEmployeeTx) Append(values ...*types.Employee) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a leaveRequestFormBelongsToProxyEmployeeTx) Replace(values ...*types.Employee) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a leaveRequestFormBelongsToProxyEmployeeTx) Delete(values ...*types.Employee) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a leaveRequestFormBelongsToProxyEmployeeTx) Clear() error {
	return a.tx.Clear()
}

func (a leaveRequestFormBelongsToProxyEmployeeTx) Count() int64 {
	return a.tx.Count()
}

type leaveRequestFormBelongsToProxyDepartment struct {
	db *gorm.DB

	field.RelationField
}

func (a leaveRequestFormBelongsToProxyDepartment) Where(conds ...field.Expr) *leaveRequestFormBelongsToProxyDepartment {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a leaveRequestFormBelongsToProxyDepartment) WithContext(ctx context.Context) *leaveRequestFormBelongsToProxyDepartment {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a leaveRequestFormBelongsToProxyDepartment) Session(session *gorm.Session) *leaveRequestFormBelongsToProxyDepartment {
	a.db = a.db.Session(session)
	return &a
}

func (a leaveRequestFormBelongsToProxyDepartment) Model(m *types.LeaveRequestForm) *leaveRequestFormBelongsToProxyDepartmentTx {
	return &leaveRequestFormBelongsToProxyDepartmentTx{a.db.Model(m).Association(a.Name())}
}

type leaveRequestFormBelongsToProxyDepartmentTx struct{ tx *gorm.Association }

func (a leaveRequestFormBelongsToProxyDepartmentTx) Find() (result *types.Department, err error) {
	return result, a.tx.Find(&result)
}

func (a leaveRequestFormBelongsToProxyDepartmentTx) Append(values ...*types.Department) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a leaveRequestFormBelongsToProxyDepartmentTx) Replace(values ...*types.Department) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a leaveRequestFormBelongsToProxyDepartmentTx) Delete(values ...*types.Department) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a leaveRequestFormBelongsToProxyDepartmentTx) Clear() error {
	return a.tx.Clear()
}

func (a leaveRequestFormBelongsToProxyDepartmentTx) Count() int64 {
	return a.tx.Count()
}

type leaveRequestFormDo struct{ gen.DO }

type ILeaveRequestFormDo interface {
	gen.SubQuery
	Debug() ILeaveRequestFormDo
	WithContext(ctx context.Context) ILeaveRequestFormDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ILeaveRequestFormDo
	WriteDB() ILeaveRequestFormDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ILeaveRequestFormDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ILeaveRequestFormDo
	Not(conds ...gen.Condition) ILeaveRequestFormDo
	Or(conds ...gen.Condition) ILeaveRequestFormDo
	Select(conds ...field.Expr) ILeaveRequestFormDo
	Where(conds ...gen.Condition) ILeaveRequestFormDo
	Order(conds ...field.Expr) ILeaveRequestFormDo
	Distinct(cols ...field.Expr) ILeaveRequestFormDo
	Omit(cols ...field.Expr) ILeaveRequestFormDo
	Join(table schema.Tabler, on ...field.Expr) ILeaveRequestFormDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ILeaveRequestFormDo
	RightJoin(table schema.Tabler, on ...field.Expr) ILeaveRequestFormDo
	Group(cols ...field.Expr) ILeaveRequestFormDo
	Having(conds ...gen.Condition) ILeaveRequestFormDo
	Limit(limit int) ILeaveRequestFormDo
	Offset(offset int) ILeaveRequestFormDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ILeaveRequestFormDo
	Unscoped() ILeaveRequestFormDo
	Create(values ...*types.LeaveRequestForm) error
	CreateInBatches(values []*types.LeaveRequestForm, batchSize int) error
	Save(values ...*types.LeaveRequestForm) error
	First() (*types.LeaveRequestForm, error)
	Take() (*types.LeaveRequestForm, error)
	Last() (*types.LeaveRequestForm, error)
	Find() ([]*types.LeaveRequestForm, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*types.LeaveRequestForm, err error)
	FindInBatches(result *[]*types.LeaveRequestForm, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*types.LeaveRequestForm) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ILeaveRequestFormDo
	Assign(attrs ...field.AssignExpr) ILeaveRequestFormDo
	Joins(fields ...field.RelationField) ILeaveRequestFormDo
	Preload(fields ...field.RelationField) ILeaveRequestFormDo
	FirstOrInit() (*types.LeaveRequestForm, error)
	FirstOrCreate() (*types.LeaveRequestForm, error)
	FindByPage(offset int, limit int) (result []*types.LeaveRequestForm, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ILeaveRequestFormDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (l leaveRequestFormDo) Debug() ILeaveRequestFormDo {
	return l.withDO(l.DO.Debug())
}

func (l leaveRequestFormDo) WithContext(ctx context.Context) ILeaveRequestFormDo {
	return l.withDO(l.DO.WithContext(ctx))
}

func (l leaveRequestFormDo) ReadDB() ILeaveRequestFormDo {
	return l.Clauses(dbresolver.Read)
}

func (l leaveRequestFormDo) WriteDB() ILeaveRequestFormDo {
	return l.Clauses(dbresolver.Write)
}

func (l leaveRequestFormDo) Session(config *gorm.Session) ILeaveRequestFormDo {
	return l.withDO(l.DO.Session(config))
}

func (l leaveRequestFormDo) Clauses(conds ...clause.Expression) ILeaveRequestFormDo {
	return l.withDO(l.DO.Clauses(conds...))
}

func (l leaveRequestFormDo) Returning(value interface{}, columns ...string) ILeaveRequestFormDo {
	return l.withDO(l.DO.Returning(value, columns...))
}

func (l leaveRequestFormDo) Not(conds ...gen.Condition) ILeaveRequestFormDo {
	return l.withDO(l.DO.Not(conds...))
}

func (l leaveRequestFormDo) Or(conds ...gen.Condition) ILeaveRequestFormDo {
	return l.withDO(l.DO.Or(conds...))
}

func (l leaveRequestFormDo) Select(conds ...field.Expr) ILeaveRequestFormDo {
	return l.withDO(l.DO.Select(conds...))
}

func (l leaveRequestFormDo) Where(conds ...gen.Condition) ILeaveRequestFormDo {
	return l.withDO(l.DO.Where(conds...))
}

func (l leaveRequestFormDo) Order(conds ...field.Expr) ILeaveRequestFormDo {
	return l.withDO(l.DO.Order(conds...))
}

func (l leaveRequestFormDo) Distinct(cols ...field.Expr) ILeaveRequestFormDo {
	return l.withDO(l.DO.Distinct(cols...))
}

func (l leaveRequestFormDo) Omit(cols ...field.Expr) ILeaveRequestFormDo {
	return l.withDO(l.DO.Omit(cols...))
}

func (l leaveRequestFormDo) Join(table schema.Tabler, on ...field.Expr) ILeaveRequestFormDo {
	return l.withDO(l.DO.Join(table, on...))
}

func (l leaveRequestFormDo) LeftJoin(table schema.Tabler, on ...field.Expr) ILeaveRequestFormDo {
	return l.withDO(l.DO.LeftJoin(table, on...))
}

func (l leaveRequestFormDo) RightJoin(table schema.Tabler, on ...field.Expr) ILeaveRequestFormDo {
	return l.withDO(l.DO.RightJoin(table, on...))
}

func (l leaveRequestFormDo) Group(cols ...field.Expr) ILeaveRequestFormDo {
	return l.withDO(l.DO.Group(cols...))
}

func (l leaveRequestFormDo) Having(conds ...gen.Condition) ILeaveRequestFormDo {
	return l.withDO(l.DO.Having(conds...))
}

func (l leaveRequestFormDo) Limit(limit int) ILeaveRequestFormDo {
	return l.withDO(l.DO.Limit(limit))
}

func (l leaveRequestFormDo) Offset(offset int) ILeaveRequestFormDo {
	return l.withDO(l.DO.Offset(offset))
}

func (l leaveRequestFormDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ILeaveRequestFormDo {
	return l.withDO(l.DO.Scopes(funcs...))
}

func (l leaveRequestFormDo) Unscoped() ILeaveRequestFormDo {
	return l.withDO(l.DO.Unscoped())
}

func (l leaveRequestFormDo) Create(values ...*types.LeaveRequestForm) error {
	if len(values) == 0 {
		return nil
	}
	return l.DO.Create(values)
}

func (l leaveRequestFormDo) CreateInBatches(values []*types.LeaveRequestForm, batchSize int) error {
	return l.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (l leaveRequestFormDo) Save(values ...*types.LeaveRequestForm) error {
	if len(values) == 0 {
		return nil
	}
	return l.DO.Save(values)
}

func (l leaveRequestFormDo) First() (*types.LeaveRequestForm, error) {
	if result, err := l.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*types.LeaveRequestForm), nil
	}
}

func (l leaveRequestFormDo) Take() (*types.LeaveRequestForm, error) {
	if result, err := l.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*types.LeaveRequestForm), nil
	}
}

func (l leaveRequestFormDo) Last() (*types.LeaveRequestForm, error) {
	if result, err := l.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*types.LeaveRequestForm), nil
	}
}

func (l leaveRequestFormDo) Find() ([]*types.LeaveRequestForm, error) {
	result, err := l.DO.Find()
	return result.([]*types.LeaveRequestForm), err
}

func (l leaveRequestFormDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*types.LeaveRequestForm, err error) {
	buf := make([]*types.LeaveRequestForm, 0, batchSize)
	err = l.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (l leaveRequestFormDo) FindInBatches(result *[]*types.LeaveRequestForm, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return l.DO.FindInBatches(result, batchSize, fc)
}

func (l leaveRequestFormDo) Attrs(attrs ...field.AssignExpr) ILeaveRequestFormDo {
	return l.withDO(l.DO.Attrs(attrs...))
}

func (l leaveRequestFormDo) Assign(attrs ...field.AssignExpr) ILeaveRequestFormDo {
	return l.withDO(l.DO.Assign(attrs...))
}

func (l leaveRequestFormDo) Joins(fields ...field.RelationField) ILeaveRequestFormDo {
	for _, _f := range fields {
		l = *l.withDO(l.DO.Joins(_f))
	}
	return &l
}

func (l leaveRequestFormDo) Preload(fields ...field.RelationField) ILeaveRequestFormDo {
	for _, _f := range fields {
		l = *l.withDO(l.DO.Preload(_f))
	}
	return &l
}

func (l leaveRequestFormDo) FirstOrInit() (*types.LeaveRequestForm, error) {
	if result, err := l.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*types.LeaveRequestForm), nil
	}
}

func (l leaveRequestFormDo) FirstOrCreate() (*types.LeaveRequestForm, error) {
	if result, err := l.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*types.LeaveRequestForm), nil
	}
}

func (l leaveRequestFormDo) FindByPage(offset int, limit int) (result []*types.LeaveRequestForm, count int64, err error) {
	result, err = l.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = l.Offset(-1).Limit(-1).Count()
	return
}

func (l leaveRequestFormDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = l.Count()
	if err != nil {
		return
	}

	err = l.Offset(offset).Limit(limit).Scan(result)
	return
}

func (l leaveRequestFormDo) Scan(result interface{}) (err error) {
	return l.DO.Scan(result)
}

func (l leaveRequestFormDo) Delete(models ...*types.LeaveRequestForm) (result gen.ResultInfo, err error) {
	return l.DO.Delete(models)
}

func (l *leaveRequestFormDo) withDO(do gen.Dao) *leaveRequestFormDo {
	l.DO = *do.(*gen.DO)
	return l
}
